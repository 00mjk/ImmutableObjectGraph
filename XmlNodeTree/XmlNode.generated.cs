// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace XmlNodeTree {
	using System.Diagnostics;
	using ImmutableObjectGraph;

	
	public interface IXmlNode {
		System.String TagName { get; }
		System.String TagNamespace { get; }
		System.String TagPrefix { get; }
		System.Collections.Immutable.ImmutableList<XmlNode> Children { get; }
	}
	
	public partial class XmlNode : IXmlNode, System.Collections.Generic.IEnumerable<XmlNode> {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlNode DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String tagName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String tagNamespace;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String tagPrefix;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<XmlNode> children;
	
		/// <summary>Initializes a new instance of the XmlNode class.</summary>
		private XmlNode()
		{
		}
	
		/// <summary>Initializes a new instance of the XmlNode class.</summary>
		private XmlNode(System.String tagName, System.String tagNamespace, System.String tagPrefix, System.Collections.Immutable.ImmutableList<XmlNode> children)
		{
			this.tagName = tagName;
			this.tagNamespace = tagNamespace;
			this.tagPrefix = tagPrefix;
			this.children = children;
			this.Validate();
		}
	
		public static XmlNode Create(
			ImmutableObjectGraph.Optional<System.String> tagName = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.String> tagNamespace = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.String> tagPrefix = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			return DefaultInstance.With(
				tagName.IsDefined ? tagName : ImmutableObjectGraph.Optional.For(DefaultInstance.tagName), 
				tagNamespace.IsDefined ? tagNamespace : ImmutableObjectGraph.Optional.For(DefaultInstance.tagNamespace), 
				tagPrefix.IsDefined ? tagPrefix : ImmutableObjectGraph.Optional.For(DefaultInstance.tagPrefix), 
				children.IsDefined ? children : ImmutableObjectGraph.Optional.For(DefaultInstance.children));
		}
	
		public System.String TagName {
			get { return this.tagName; }
		}
	
		/// <summary>Returns a new instance with the TagName property set to the specified value.</summary>
		public XmlNode WithTagName(System.String value) {
			if (value == this.TagName) {
				return this;
			}
	
			return new XmlNode(value, this.TagNamespace, this.TagPrefix, this.Children);
		}
	
		public System.String TagNamespace {
			get { return this.tagNamespace; }
		}
	
		/// <summary>Returns a new instance with the TagNamespace property set to the specified value.</summary>
		public XmlNode WithTagNamespace(System.String value) {
			if (value == this.TagNamespace) {
				return this;
			}
	
			return new XmlNode(this.TagName, value, this.TagPrefix, this.Children);
		}
	
		public System.String TagPrefix {
			get { return this.tagPrefix; }
		}
	
		/// <summary>Returns a new instance with the TagPrefix property set to the specified value.</summary>
		public XmlNode WithTagPrefix(System.String value) {
			if (value == this.TagPrefix) {
				return this;
			}
	
			return new XmlNode(this.TagName, this.TagNamespace, value, this.Children);
		}
	
		public System.Collections.Immutable.ImmutableList<XmlNode> Children {
			get { return this.children; }
		}
	
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public XmlNode WithChildren(System.Collections.Immutable.ImmutableList<XmlNode> value) {
			if (value == this.Children) {
				return this;
			}
	
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, value);
		}
	
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlNode WithChildren(params XmlNode[] values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.ResetContents(values));
		}
	
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlNode WithChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.ResetContents(values));
		}
	
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlNode AddChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.AddRange(values));
		}
	
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlNode AddChildren(params XmlNode[] values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.AddRange(values));
		}
	
		/// <summary>Adds the specified element from the Children collection.</summary>
		public XmlNode AddChildren(XmlNode value) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.Add(value));
		}
	
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlNode RemoveChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.RemoveRange(values));
		}
	
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlNode RemoveChildren(params XmlNode[] values) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.RemoveRange(values));
		}
	
		/// <summary>Removes the specified element from the Children collection.</summary>
		public XmlNode RemoveChildren(XmlNode value) {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.Remove(value));
		}
	
		/// <summary>Clears all elements from the Children collection.</summary>
		public XmlNode RemoveChildren() {
			return new XmlNode(this.TagName, this.TagNamespace, this.TagPrefix, this.Children.Clear());
		}
		
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public XmlNode With(
			ImmutableObjectGraph.Optional<System.String> tagName = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.String> tagNamespace = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.String> tagPrefix = default(ImmutableObjectGraph.Optional<System.String>), 
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			if (
				(tagName.IsDefined && tagName.Value != this.TagName) || 
				(tagNamespace.IsDefined && tagNamespace.Value != this.TagNamespace) || 
				(tagPrefix.IsDefined && tagPrefix.Value != this.TagPrefix) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new XmlNode(
					tagName.IsDefined ? tagName.Value : this.TagName,
					tagNamespace.IsDefined ? tagNamespace.Value : this.TagNamespace,
					tagPrefix.IsDefined ? tagPrefix.Value : this.TagPrefix,
					children.IsDefined ? children.Value : this.Children);
			} else {
				return this;
			}
		}
	
		public Builder ToBuilder() {
			return new Builder(this);
		}
	
	 	public System.Collections.Generic.IEnumerator<XmlNode> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
	 	/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlNode whose fields are initialized with default values.</summary>
		private static XmlNode GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlNode(
				template.TagName, 
				template.TagNamespace, 
				template.TagPrefix, 
				template.Children);
		}
	
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private XmlNode immutable;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private System.String tagName;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private System.String tagNamespace;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private System.String tagPrefix;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>.Builder> children;
	
			internal Builder(XmlNode immutable) {
				this.immutable = immutable;
	
				this.tagName = immutable.TagName;
				this.tagNamespace = immutable.TagNamespace;
				this.tagPrefix = immutable.TagPrefix;
			}
	
			public System.String TagName {
				get {
					return this.tagName;
				}
	
				set {
					this.tagName = value;
				}
			}
	
			public System.String TagNamespace {
				get {
					return this.tagNamespace;
				}
	
				set {
					this.tagNamespace = value;
				}
			}
	
			public System.String TagPrefix {
				get {
					return this.tagPrefix;
				}
	
				set {
					this.tagPrefix = value;
				}
			}
	
			public System.Collections.Immutable.ImmutableList<XmlNode>.Builder Children {
				get {
					if (!this.children.IsDefined) {
						this.children = this.immutable.children != null ? this.immutable.children.ToBuilder() : null;
					}
	
					return this.children.Value;
				}
	
				set {
					this.children = value;
				}
			}
	
			public XmlNode ToImmutable() {
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.tagName),
					ImmutableObjectGraph.Optional.For(this.tagNamespace),
					ImmutableObjectGraph.Optional.For(this.tagPrefix),
					ImmutableObjectGraph.Optional.For(children));
			}
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String TagName { get; set; }
	
			internal System.String TagNamespace { get; set; }
	
			internal System.String TagPrefix { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<XmlNode> Children { get; set; }
		}
	}
}

