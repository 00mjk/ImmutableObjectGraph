<#
this.HandleField += (templateType, field) => {
	string keywords = field.DeclaringType.Equals(templateType) ? "" : "new ";
	if (field.IsCollection) { #>

/// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
public <#= keywords #><#= templateType.TypeName #> With<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.ResetContents(values));
}

/// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
public <#= keywords #><#= templateType.TypeName #> With<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.ResetContents(values));
}

/// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Add<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.AddRange(values));
}

/// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Add<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.AddRange(values));
}

/// <summary>Adds the specified element from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Add<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Add(value));
}

/// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.RemoveRange(values));
}

/// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.RemoveRange(values));
}

/// <summary>Removes the specified element from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Remove(value));
}

/// <summary>Clears all elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= keywords #><#= templateType.TypeName #> Remove<#= field.NamePascalCase #>() {
	return this.With(<#= field.NameCamelCase #>: this.<#=field.NamePascalCase#>.Clear());
}

<#
	} // if field type is a collection
}; // green field event handler

this.HandleRedField += (templateType, redField) => {
	if (redField.IsCollection) {
		var fieldTypes = new List<MetaType.MetaField> { redField };
		if (redField.GreenField.TypeName != redField.TypeName) {
			fieldTypes.Add(redField.GreenField);
		}

		foreach (var field in fieldTypes) {
			var translateOne = field.GreenField.TypeName != field.TypeName ? "." + field.GreenField.ElementTypeName : "";
			var translateCollection = field.GreenField.TypeName != field.TypeName ? (".Select(r => r" + translateOne + ")") : "";
#>

/// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
public <#= templateType.TypeName #> With<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.With<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Replaces the elements of the <#= field.NamePascalCase #> collection with the specified collection.</summary>
public <#= templateType.TypeName #> With<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.With<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Add<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Adds the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Add<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Adds the specified element from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Add<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Add<#= field.NamePascalCase #>(value<#= translateOne #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(System.Collections.Generic.IEnumerable<<#= field.ElementTypeName #>> values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Remove<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Removes the specified elements from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(params <#= field.ElementTypeName #>[] values) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Remove<#= field.NamePascalCase #>(values<#= translateCollection #>);
	return this.NewSpine(mutatedLeaf);
}

/// <summary>Removes the specified element from the <#= field.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Remove<#= field.NamePascalCase #>(<#= field.ElementTypeName #> value) {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Remove<#= field.NamePascalCase #>(value<#= translateOne #>);
	return this.NewSpine(mutatedLeaf);
}
<#
		}
#>

/// <summary>Clears all elements from the <#= redField.NamePascalCase #> collection.</summary>
public <#= templateType.TypeName #> Remove<#= redField.NamePascalCase #>() {
	this.ThrowIfDefault();
	var mutatedLeaf = this.greenNode.Remove<#= redField.NamePascalCase #>();
	return this.NewSpine(mutatedLeaf);
}
<#	} // if field type is a collection
}; // red field event handler
#>