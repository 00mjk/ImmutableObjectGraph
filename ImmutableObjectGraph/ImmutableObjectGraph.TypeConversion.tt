<#
this.HandleType += (templateType, position) => {
	if (position != HandleTypePosition.WithinTypeDeclaration) {
		return;
	}

	if (templateType.HasAncestor && !templateType.Ancestor.IsAbstract) {
#>

public <#= templateType.Ancestor.TypeName#> To<#= templateType.Ancestor.TypeName#>() {
	return <#= templateType.Ancestor.TypeName #>.Create(<# WriteArguments(templateType.Ancestor.AllFields, indent: 2, asOptional: OptionalStyle.WhenNotRequired); #>);
}
<#
	}

	foreach (MetaType derivedType in templateType.Descendents.Where(d => !d.IsAbstract)) {
#>

public virtual <#= derivedType.TypeName #> To<#= derivedType.TypeName #>(<# WriteParameters(derivedType.GetFieldsBeyond(templateType), ParameterStyle.OptionalOrRequired, indent: 1); #>) {
	<#= derivedType.TypeName #> that = this as <#= derivedType.TypeName #>;
	if (that != null && this.GetType().IsEquivalentTo(typeof(<#= derivedType.TypeName #>))) {
		if (<#
		bool firstInSequence = true;
		PushIndent("\t\t    ");
		foreach (var field in derivedType.GetFieldsBeyond(templateType)) {
			if (!firstInSequence) { WriteLine(" && "); }
			if (field.IsRequired) {
				Write("({0} == that.{1})", field.NameCamelCase, field.NamePascalCase);
			} else {
				Write("(!{0}.IsDefined || {0}.Value == that.{1})", field.NameCamelCase, field.NamePascalCase);
			}

			firstInSequence = false;
		}

		PopIndent();
		#>) {
			return that;
		}
	}

	return <#= derivedType.TypeName #>.Create(<#
		WriteArguments(templateType.AllFields, indent: 2, asOptional: OptionalStyle.WhenNotRequired);
		Write(",");
		WriteArguments(derivedType.GetFieldsBeyond(templateType), ArgSource.Argument, indent: 2);
		#>);
}
<#
		foreach (var ancestor in templateType.Ancestors) { #>

public override <#= derivedType.TypeName #> To<#= derivedType.TypeName #>(<# WriteParameters(derivedType.GetFieldsBeyond(ancestor), ParameterStyle.OptionalOrRequired); #>) {
	return base.To<#= derivedType.TypeName #>(<#
		WriteArguments(templateType.GetFieldsBeyond(ancestor), ArgSource.OptionalArgumentOrProperty, asOptional: OptionalStyle.WhenNotRequired);
		Write(",");
		WriteArguments(derivedType.GetFieldsBeyond(templateType), ArgSource.Argument);
		#>);
}
<#
		} // foreach ancestor type
	} // foreach derived type
}; // event handler

this.HandleRedType += (templateType, position) => {
	if (position != HandleTypePosition.WithinTypeDeclaration) {
		return;
	}

	PushIndent("\t");
	foreach (MetaType familyType in templateType.GetTypeFamily().Where(ft => !ft.IsAbstract && !ft.Equals(templateType))) {
		var commonAncestor = familyType.GetFirstCommonAncestor(templateType);
#>

public <#= familyType.TypeName #> To<#= familyType.GreenType.TypeName #>(<# WriteParameters(familyType.GetFieldsBeyond(commonAncestor), ParameterStyle.OptionalOrRequired, indent: 1); #>) {
	var newGreenNode = this.greenNode.To<#= familyType.GreenType.TypeName #>(<# WriteArguments(familyType.GetFieldsBeyond(commonAncestor), ArgSource.Argument); #>);
	var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
	return newGreenNode.WithRoot(newRoot);
}
<#
	} // foreach familyType

	PopIndent();
};
#>