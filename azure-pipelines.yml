trigger:
  branches:
    include: ["master"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
#  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

jobs:
- job: Windows
  pool: Hosted VS2017
  steps:
  - script: |
      dotnet tool install --tool-path . nbgv
      .\nbgv cloud -p src
    displayName: Set build number
    condition: ne(variables['system.pullrequest.isfork'], true)

  - script: dotnet --info
    displayName: Show dotnet SDK info

  - task: DotNetCoreCLI@2
    displayName: Restore NuGet packages
    inputs:
      command: restore
      verbosityRestore: normal # detailed, normal, minimal
      projects: src/**/*.sln
      feedsToUse: config
      nugetConfigPath: src/NuGet.Config

  # Use VSBuild on Windows so GitLink will work (it fails on dotnet build)
  - task: VSBuild@1
    inputs:
      vsVersion: 15.0
      msbuildArgs: /t:build,pack /m /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
    displayName: Build Visual Studio solution

  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: test
      projects: src/ImmutableObjectGraph.Generation.Tests
      configuration: $(BuildConfiguration)
      nobuild: true

  - task: CopyFiles@1
    inputs:
      Contents: |
        obj/**/project.assets.json
      TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    displayName: Collecting project.assets.json artifacts
    condition: succeededOrFailed()

  - task: CopyFiles@1
    inputs:
      Contents: |
        bin/Packages/$(BuildConfiguration)/*.nupkg
      TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
      flattenFolders: true
    displayName: Collecting deployables

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
      ArtifactName: projectAssetsJson
      ArtifactType: Container
    displayName: Publish projectAssetsJson artifacts
    condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
      ArtifactName: build_logs
      ArtifactType: Container
    displayName: Publish build_logs artifacts
    condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

  ## The rest of these steps are for deployment and skipped for PR builds

  #- task: PublishBuildArtifacts@1
  #  inputs:
  #    PathtoPublish: $(build.sourcesdirectory)/bin
  #    ArtifactName: bin
  #    ArtifactType: Container
  #  condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
      ArtifactName: deployables
      ArtifactType: Container
    displayName: Publish deployables artifacts
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))
