namespace Microsoft.ImmutableObjectGraph_SFG
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Formatting;
    using Microsoft.CodeAnalysis.Simplification;
    using Validation;

    public class DocumentTransform
    {
        private const string GeneratedByAToolPreamble = @"// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
";

        private DocumentTransform()
        {
        }

        public static async Task<Document> TransformAsync(Document inputDocument, IProgressAndErrors progress)
        {
            Requires.NotNull(inputDocument, "inputDocument");

            var workspace = inputDocument.Project.Solution.Workspace;
            var inputSemanticModel = await inputDocument.GetSemanticModelAsync();
            var inputSyntaxTree = inputSemanticModel.SyntaxTree;

            var inputFileLevelUsingDirectives = inputSyntaxTree.GetRoot().ChildNodes().OfType<UsingDirectiveSyntax>();

            var memberNodes = from syntax in inputSyntaxTree.GetRoot().DescendantNodes(n => n is CompilationUnitSyntax || n is NamespaceDeclarationSyntax || n is TypeDeclarationSyntax).OfType<MemberDeclarationSyntax>()
                              select syntax;

            var emittedMembers = new List<MemberDeclarationSyntax>();
            foreach (var memberNode in memberNodes)
            {
                var namespaceNode = memberNode.Parent as NamespaceDeclarationSyntax;

                var generationAttributesSymbols = FindCodeGenerationAttributes(
                    inputSemanticModel,
                    memberNode);
                foreach (var generationAttributeSymbol in generationAttributesSymbols)
                {
                    var generationAttribute = (CodeGenerationAttribute)Instantiate(generationAttributeSymbol, inputSemanticModel.Compilation);
                    if (generationAttribute != null)
                    {
                        var generatedTypes = await generationAttribute.GenerateAsync(memberNode, inputDocument, progress, CancellationToken.None);
                        if (namespaceNode != null)
                        {
                            emittedMembers.Add(SyntaxFactory.NamespaceDeclaration(namespaceNode.Name)
                                .WithUsings(SyntaxFactory.List(namespaceNode.ChildNodes().OfType<UsingDirectiveSyntax>()))
                                .WithMembers(SyntaxFactory.List(generatedTypes)));
                        }
                        else
                        {
                            emittedMembers.AddRange(generatedTypes);
                        }
                    }
                }
            }

            var emittedTree = SyntaxFactory.CompilationUnit()
                .WithUsings(SyntaxFactory.List(inputFileLevelUsingDirectives))
                .WithMembers(SyntaxFactory.List(emittedMembers))
                .WithLeadingTrivia(SyntaxFactory.Comment(GeneratedByAToolPreamble))
                .WithTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed);

            // Format the tree to get reasonably good whitespace.
            var formattedTree = Formatter.Format(emittedTree, workspace, workspace.Options);

            // Reduce the document to get rid of unnecessary fully-qualified type names that just hurt readability.
            var formattedText = formattedTree.GetText();
            var document = inputDocument.Project.AddDocument("generated.cs", formattedText);
            var annotatedDocument = document
                .WithSyntaxRoot((await document.GetSyntaxRootAsync())
                .WithAdditionalAnnotations(Simplifier.Annotation)); // allow simplification of the entire document
            var reducedDocument = await Simplifier.ReduceAsync(annotatedDocument);

            return reducedDocument;
        }

        private static IEnumerable<AttributeData> FindCodeGenerationAttributes(SemanticModel document, SyntaxNode nodeWithAttributesApplied)
        {
            Requires.NotNull(document, "document");
            Requires.NotNull(nodeWithAttributesApplied, "nodeWithAttributesApplied");

            var symbol = document.GetDeclaredSymbol(nodeWithAttributesApplied);
            if (symbol != null)
            {
                foreach (var attribute in symbol.GetAttributes())
                {
                    if (IsOrDerivesFromCodeGenerationAttribute(attribute.AttributeClass))
                    {
                        yield return attribute;
                    }
                }
            }
        }

        private static bool IsOrDerivesFromCodeGenerationAttribute(INamedTypeSymbol type)
        {
            if (type != null)
            {
                if (type.Name == typeof(CodeGenerationAttribute).Name)
                {
                    // Don't sweat accuracy too much at this point.
                    return true;
                }

                return IsOrDerivesFromCodeGenerationAttribute(type.BaseType);
            }

            return false;
        }

        private static Attribute Instantiate(AttributeData attributeData, Compilation compilation)
        {
            var ctor = GetConstructor(attributeData.AttributeConstructor, compilation);
            object[] args = attributeData.ConstructorArguments.Select(a => a.Value).ToArray();
            Attribute result = (Attribute)ctor.Invoke(args);

            foreach (var namedArg in attributeData.NamedArguments)
            {
                var property = ctor.DeclaringType.GetProperty(namedArg.Key);
                property.SetValue(result, namedArg.Value.Value);
            }

            return result;
        }

        private static Assembly GetAssembly(IAssemblySymbol symbol, Compilation compilation)
        {
            Requires.NotNull(symbol, "symbol");
            Requires.NotNull(compilation, "compilation");

            var matchingReferences = from reference in compilation.References.OfType<PortableExecutableReference>()
                                     where string.Equals(Path.GetFileNameWithoutExtension(reference.FilePath), symbol.Identity.Name, StringComparison.OrdinalIgnoreCase) // TODO: make this more correct
                                     select reference.FilePath;
            return Assembly.LoadFile(matchingReferences.First());
        }

        private static Type GetType(INamedTypeSymbol symbol, Compilation compilation)
        {
            Requires.NotNull(symbol, "symbol");

            var assembly = GetAssembly(symbol.ContainingAssembly, compilation);
            var nameBuilder = new StringBuilder();
            ISymbol symbolOrParent = symbol;
            while (symbolOrParent != null && !string.IsNullOrEmpty(symbolOrParent.Name))
            {
                if (nameBuilder.Length > 0)
                {
                    nameBuilder.Insert(0, ".");
                }

                nameBuilder.Insert(0, symbolOrParent.Name);
                symbolOrParent = symbolOrParent.ContainingSymbol;
            }

            Type type = assembly.GetType(nameBuilder.ToString(), true); // How to make this work more generally (nested types, etc)?
            return type;
        }

        private static ConstructorInfo GetConstructor(IMethodSymbol symbol, Compilation compilation)
        {
            Requires.NotNull(symbol, "symbol");

            Type type = GetType(symbol.ContainingType, compilation);
            return type.GetConstructors().First(ctor => ctor.GetParameters().Length == symbol.Parameters.Length); // TODO: make this pick overloads based on parameter types
        }

        private static object Construct(ConstructorInfo constructorInfo, SyntaxNode invocationSyntax, Document document)
        {
            // TODO: support parameters
            return constructorInfo.Invoke(new object[0]);
        }
    }
}
