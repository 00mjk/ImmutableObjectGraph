// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public interface IXmlNode {
		System.String LocalName { get; }
	}
	
	public abstract partial class XmlNode : IXmlNode {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String localName;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the XmlNode class.</summary>
		protected XmlNode(
			System.Int32 identity,
			System.String localName)
		{
			this.identity = identity;
			this.localName = localName;
		}
	
		public System.String LocalName {
			get { return this.localName; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public XmlNode WithLocalName(System.String value) {
			if (value == this.LocalName) {
				return this;
			}
		
			return this.With(localName: value);
		}
		
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public abstract XmlNode With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>));
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual System.Collections.Generic.IEnumerable<XmlNode> GetSelfAndDescendents() {
			yield return this;
		}
		
		public virtual XmlElement ToXmlElement(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			XmlElement that = this as XmlElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElement))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return XmlElement.Create(
				localName: this.LocalName,
				namespaceName: namespaceName,
				children: children);
		}
		
		public virtual XmlElementWithContent ToXmlElementWithContent(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlElementWithContent that = this as XmlElementWithContent;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElementWithContent))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!children.IsDefined || children.Value == that.Children) && 
				    (!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return XmlElementWithContent.Create(
				localName: this.LocalName,
				namespaceName: namespaceName,
				children: children,
				content: content);
		}
		
		public virtual XmlAttribute ToXmlAttribute(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlAttribute that = this as XmlAttribute;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlAttribute))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return XmlAttribute.Create(
				localName: this.LocalName,
				namespaceName: namespaceName,
				value: value);
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private XmlNode immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String localName;
		
			internal Builder(XmlNode immutable) {
				this.immutable = immutable;
		
				this.localName = immutable.LocalName;
			}
		
			public System.String LocalName {
				get {
					return this.localName;
				}
		
				set {
					this.localName = value;
				}
			}
		
			public XmlNode ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.LocalName));
			}
		}
	}
	
	public interface IXmlElement : IXmlNode {
		System.String NamespaceName { get; }
		System.Collections.Immutable.ImmutableList<XmlNode> Children { get; }
	}
	
	public partial class XmlElement : XmlNode, IXmlElement, System.Collections.Generic.IEnumerable<XmlNode> {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String namespaceName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<XmlNode> children;
	
		/// <summary>Initializes a new instance of the XmlElement class.</summary>
		protected XmlElement(
			System.Int32 identity,
			System.String localName,
			System.String namespaceName,
			System.Collections.Immutable.ImmutableList<XmlNode> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>>))
			: base(
				identity: identity,
				localName: localName)
		{
			this.namespaceName = namespaceName;
			this.children = children;
			this.Validate();
			this.InitializeLookup(lookupTable);
		}
	
		public static XmlElement Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: localName.GetValueOrDefault(DefaultInstance.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName),
				children: children.GetValueOrDefault(DefaultInstance.Children),
				identity: identity.GetValueOrDefault(DefaultInstance.Identity));
		}
	
		public System.String NamespaceName {
			get { return this.namespaceName; }
		}
	
		public System.Collections.Immutable.ImmutableList<XmlNode> Children {
			get { return this.children; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlElement WithLocalName(System.String value) {
			return (XmlElement)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public XmlElement WithNamespaceName(System.String value) {
			if (value == this.NamespaceName) {
				return this;
			}
		
			return this.With(namespaceName: value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public XmlElement WithChildren(System.Collections.Immutable.ImmutableList<XmlNode> value) {
			if (value == this.Children) {
				return this;
			}
		
			return this.With(children: value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlElement WithChildren(params XmlNode[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlElement WithChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlElement AddChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlElement AddChildren(params XmlNode[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public XmlElement AddChildren(XmlNode value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlElement RemoveChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlElement RemoveChildren(params XmlNode[] values) {
			return this.With(children: this.Children.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public XmlElement RemoveChildren(XmlNode value) {
			return this.With(children: this.Children.Remove(value));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public XmlElement RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public override XmlNode With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.With(
				localName: localName,
				namespaceName: default(ImmutableObjectGraph.Optional<System.String>),
				children: default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>));
		}
			
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public virtual XmlElement With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				localName: localName.GetValueOrDefault(this.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
				children: children.GetValueOrDefault(this.Children),
				identity: identity.GetValueOrDefault(this.Identity));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(children.IsDefined && children.Value != this.Children)) {
				var lookupTable = children.IsDefined && children.Value != this.Children ? default(Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>>) : Optional.For(this.lookupTable);
				return new XmlElement(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					children: children.GetValueOrDefault(this.Children),
					lookupTable: lookupTable);
			} else {
				return this;
			}
		}
	
		public System.Collections.Generic.IEnumerator<XmlNode> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlElement whose fields are initialized with default values.</summary>
		private static XmlElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlElement(
				default(System.Int32), 
				template.LocalName, 
				template.NamespaceName, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<XmlNode> Children { get; set; }
		}
		
		public XmlElement AddDescendent(XmlNode value, XmlElement parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (XmlElement)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public XmlElement RemoveDescendent(XmlNode value) {
			var spine = this.GetSpine(value);
			var parent = (XmlElement)spine.Reverse().Skip(1).First(); // second-to-last element in spine.
			var newParent = parent.RemoveChildren(value);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((XmlNode)newParent);
			return (XmlElement)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		public XmlElement ReplaceDescendent(XmlNode current, XmlNode replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (XmlElement)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		private System.Collections.Immutable.ImmutableStack<XmlNode> ReplaceDescendent(System.Collections.Immutable.ImmutableStack<XmlNode> spine, System.Collections.Immutable.ImmutableStack<XmlNode> replacementStackTip, bool spineIncludesDeletedElement) {
			Debug.Assert(this == spine.Peek());
			var remainingSpine = spine.Pop();
			if (remainingSpine.IsEmpty || (spineIncludesDeletedElement && remainingSpine.Pop().IsEmpty)) {
				// This is the instance to be changed.
				return replacementStackTip;
			}
		
			System.Collections.Immutable.ImmutableStack<XmlNode> newChildSpine;
			var child = remainingSpine.Peek();
			var recursiveChild = child as XmlElement;
			if (recursiveChild != null) {
				newChildSpine = recursiveChild.ReplaceDescendent(remainingSpine, replacementStackTip, spineIncludesDeletedElement);
			} else {
				Debug.Assert(remainingSpine.Pop().IsEmpty); // we should be at the tail of the stack, since we're at a leaf.
				Debug.Assert(this.Children.Contains(child));
				newChildSpine = replacementStackTip;
			}
		
			var newChildren = this.Children.Replace(child, newChildSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
			if (newSelf.lookupTable == lookupTableLazySentinal && this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = this.FixupLookupTable(ImmutableDeque.Create(newChildSpine), ImmutableDeque.Create(remainingSpine));
				newSelf.ValidateInternalIntegrityDebugOnly();
			}
		
			return newChildSpine.Push(newSelf);
		}
		
		private enum ChangeKind {
			Added,
			Removed,
			Replaced,
		}
		
		/// <summary>
		/// Produces a fast lookup table based on an existing one, if this node has one, to account for an updated spine among its descendents.
		/// </summary>
		/// <param name="updatedSpine">
		/// The spine of this node's new descendents' instances that are created for this change.
		/// The head is an immediate child of the new instance for this node.
		/// The tail is the node that was added or replaced.
		/// </param>
		/// <param name="oldSpine">
		/// The spine of this node's descendents that have been changed in this delta.
		/// The head is an immediate child of this instance.
		/// The tail is the node that was removed or replaced.
		/// </param>
		/// <returns>An updated lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> FixupLookupTable(ImmutableObjectGraph.ImmutableDeque<XmlNode> updatedSpine, ImmutableObjectGraph.ImmutableDeque<XmlNode> oldSpine) {
			if (this.lookupTable == null || this.lookupTable == lookupTableLazySentinal) {
				// We don't already have a lookup table to base this on, so leave it to the new instance to lazily construct.
				return lookupTableLazySentinal;
			}
		
			if ((updatedSpine.IsEmpty && oldSpine.IsEmpty) ||
				(updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead(), oldSpine.PeekHead()))) {
				// No changes were actually made.
				return this.lookupTable;
			}
		
			var lookupTable = this.lookupTable.ToBuilder();
		
			// Classify the kind of change that has just occurred.
			var oldSpineTail = oldSpine.PeekTail();
			var newSpineTail = updatedSpine.PeekTail();
			ChangeKind changeKind;
			bool childrenChanged = false;
			if (updatedSpine.Count == oldSpine.Count) {
				changeKind = ChangeKind.Replaced;
				var oldSpineTailRecursive = oldSpineTail as XmlElement;
				var newSpineTailRecursive = newSpineTail as XmlElement;
				if (oldSpineTailRecursive != null || newSpineTailRecursive != null) {
					// Children have changed if either before or after type didn't have a children property,
					// or if both did, but the children actually changed.
					childrenChanged = oldSpineTailRecursive == null || newSpineTailRecursive == null
						|| !System.Object.ReferenceEquals(oldSpineTailRecursive.Children, newSpineTailRecursive.Children);
				}
			} else if (updatedSpine.Count > oldSpine.Count) {
				changeKind = ChangeKind.Added;
			} else // updatedSpine.Count < oldSpine.Count
			{
				changeKind = ChangeKind.Removed;
			}
		
			// Trim the lookup table of any entries for nodes that have been removed from the tree.
			if (childrenChanged || changeKind == ChangeKind.Removed) {
				// We need to remove all descendents of the old tail node.
				lookupTable.RemoveRange(oldSpineTail.GetSelfAndDescendents().Select(n => n.Identity));
			} else if (changeKind == ChangeKind.Replaced && oldSpineTail.Identity != newSpineTail.Identity) {
				// The identity of the node was changed during the replacement.  We must explicitly remove the old entry
				// from our lookup table in this case.
				lookupTable.Remove(oldSpineTail.Identity);
		
				// We also need to update any immediate children of the old spine tail
				// because the identity of their parent has changed.
				var oldSpineTailRecursive = oldSpineTail as XmlElement;
				if (oldSpineTailRecursive != null) {
					foreach (var child in oldSpineTailRecursive) {
						lookupTable[child.Identity] = new System.Collections.Generic.KeyValuePair<XmlNode, int>(child, newSpineTail.Identity);
					}
				}
			}
		
			// Update our lookup table so that it includes (updated) entries for every member of the spine itself.
			XmlNode parent = this;
			foreach (var node in updatedSpine) {
				// Remove and add rather than use the Set method, since the old and new node are equal (in identity) therefore the map class will
				// assume no change is relevant and not apply the change.
				lookupTable.Remove(node.Identity);
				lookupTable.Add(node.Identity, new System.Collections.Generic.KeyValuePair<XmlNode, int>(node, parent.Identity));
				parent = node;
			}
		
			// There may be children on the added node that we should include.
			if (childrenChanged || changeKind == ChangeKind.Added) {
				var recursiveParent = parent as XmlElement;
				if (recursiveParent != null) {
					recursiveParent.ContributeDescendentsToLookupTable(lookupTable);
				}
			}
		
			return lookupTable.ToImmutable();
		}
		
		public override System.Collections.Generic.IEnumerable<XmlNode> GetSelfAndDescendents() {
			yield return this;
			foreach (var child in this.Children) {
				foreach (var descendent in child.GetSelfAndDescendents()) {
					yield return descendent;
				}
			}
		}
		
		/// <summary>
		/// Validates this node and all its descendents <em>only in DEBUG builds</em>.
		/// </summary>
		[Conditional("DEBUG")]
		private void ValidateInternalIntegrityDebugOnly() {
			this.ValidateInternalIntegrity();
		}
		
		/// <summary>
		/// Validates this node and all its descendents.
		/// </summary>
		protected internal void ValidateInternalIntegrity() {
			// Each node id appears at most once.
			var observedIdentities = new System.Collections.Generic.HashSet<int>();
			foreach (var node in this.GetSelfAndDescendents()) {
				if (!observedIdentities.Add(node.Identity)) {
					throw new RecursiveChildNotUniqueException(node.Identity);
				}
			}
		
			// The lookup table (if any) accurately describes the contents of this tree.
			if (this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// The table should have one entry for every *descendent* of this node (not this node itself).
				int expectedCount = this.GetSelfAndDescendents().Count() - 1;
				int actualCount = this.lookupTable.Count;
				if (actualCount != expectedCount) {
					throw new System.ApplicationException(string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expected {0} entries in lookup table but found {1}.", expectedCount, actualCount));
				}
		
				this.ValidateLookupTable(this.lookupTable);
			}
		}
		
		/// <summary>
		/// Validates that the contents of a lookup table are valid for all descendent nodes of this node.
		/// </summary>
		/// <param name="lookupTable">The lookup table being validated.</param>
		private void ValidateLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> lookupTable) {
			const string ErrorString = "Lookup table integrity failure.";
		
			foreach (var child in this.Children) {
				var entry = lookupTable[child.Identity];
				if (!object.ReferenceEquals(entry.Key, child)) {
					throw new System.ApplicationException(ErrorString);
				}
		
				if (entry.Value != this.Identity) {
					throw new System.ApplicationException(ErrorString);
				}
		
				var recursiveChild = child as XmlElement;
				if (recursiveChild != null) {
					recursiveChild.ValidateLookupTable(lookupTable);
				}
			}
		}
		
		
		
		private static readonly System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> lookupTableLazySentinal = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>().Add(default(System.Int32), new System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>());
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> lookupTable;
		
		private int inefficiencyLoad;
		
		/// <summary>
		/// The maximum number of steps allowable for a search to be done among this node's children
		/// before a faster lookup table will be built.
		/// </summary>
		private const int InefficiencyLoadThreshold = 16;
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> LookupTable {
			get {
				if (this.lookupTable == lookupTableLazySentinal) {
					this.lookupTable = this.CreateLookupTable();
					this.inefficiencyLoad = 1;
				}
		
				return this.lookupTable;
			}
		}
		
		private void InitializeLookup(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>> priorLookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>>)) {
			this.inefficiencyLoad = 1;
			if (priorLookupTable.IsDefined && priorLookupTable.Value != null) {
				this.lookupTable = priorLookupTable.Value;
			} else {
				foreach (var child in this.children)
				{
					var recursiveChild = child as XmlElement;
					this.inefficiencyLoad += recursiveChild != null ? recursiveChild.inefficiencyLoad : 1;
				}
		
				if (this.inefficiencyLoad > InefficiencyLoadThreshold) {
					this.inefficiencyLoad = 1;
					this.lookupTable = lookupTableLazySentinal;
				}
			}
		
			this.ValidateInternalIntegrityDebugOnly();
		}
		
		/// <summary>
		/// Creates the lookup table that will contain all this node's children.
		/// </summary>
		/// <returns>The lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>> CreateLookupTable() {
			var table = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>().ToBuilder();
			this.ContributeDescendentsToLookupTable(table);
			return table.ToImmutable();
		}
		
		/// <summary>
		/// Adds this node's children (recursively) to the lookup table.
		/// </summary>
		/// <param name="seedLookupTable">The lookup table to add entries to.</param>
		/// <returns>The new lookup table.</returns>
		private void ContributeDescendentsToLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>>.Builder seedLookupTable)
		{
			foreach (var child in this.Children)
			{
				seedLookupTable.Add(child.Identity, new System.Collections.Generic.KeyValuePair<XmlNode, System.Int32>(child, this.Identity));
				var recursiveChild = child as XmlElement;
				if (recursiveChild != null) {
					recursiveChild.ContributeDescendentsToLookupTable(seedLookupTable);
				}
			}
		}
		
		public XmlNode Find(System.Int32 identity) {
			if (this.Identity.Equals(identity)) {
				return this;
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<XmlNode, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					return lookupValue.Key;
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					var recursiveChild = child as XmlElement;
					if (recursiveChild != null) {
						var result = recursiveChild.Find(identity);
						if (result != null) {
							return result;
						}
					} else {
						if (child.Identity.Equals(identity)) {
							return child;
						}
					}
				}
			}
		
			return null;
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal XmlElement GetParent(XmlNode descendent) {
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<XmlNode, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent.Identity, out lookupValue)) {
					var parentIdentity = lookupValue.Value;
					return (XmlElement)this.LookupTable[parentIdentity].Key;
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(descendent.Identity)) {
						return this;
					}
		
					var recursiveChild = child as XmlElement;
					if (recursiveChild != null) {
						var childResult = recursiveChild.GetParent(descendent);
						if (childResult != null) {
							return childResult;
						}
					} 
				}
			}
		
			return null;
		}
		
		internal System.Collections.Immutable.ImmutableStack<XmlNode> GetSpine(System.Int32 descendent) {
			var emptySpine = System.Collections.Immutable.ImmutableStack.Create<XmlNode>();
			if (this.Identity.Equals(descendent)) {
				return emptySpine.Push(this);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<XmlNode, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent, out lookupValue))
				{
					// Awesome.  We know the node the caller is looking for is a descendent of this node.
					// Now just string together all the nodes that connect this one with the sought one.
					var spine = emptySpine;
					do
					{
						spine = spine.Push(lookupValue.Key);
					}
					while (this.lookupTable.TryGetValue(lookupValue.Value, out lookupValue));
					return spine.Push(this);
				}
			} else {
				// We don't have an efficient lookup table for this node.  Aggressively search every child.
				var spine = emptySpine;
				foreach (var child in this.Children) {
					var recursiveChild = child as XmlElement;
					if (recursiveChild != null) {
						spine = recursiveChild.GetSpine(descendent);
					} else if (child.Identity.Equals(descendent)) {
						spine = spine.Push(child);
					}
		
					if (!spine.IsEmpty) {
						return spine.Push(this);
					}
				}
			}
		
			// The descendent is not in this sub-tree.
			return emptySpine;
		}
		
		internal System.Collections.Immutable.ImmutableStack<XmlNode> GetSpine(XmlNode descendent) {
			return this.GetSpine(descendent.Identity);
		}
		
		public virtual XmlElementWithContent ToXmlElementWithContent(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlElementWithContent that = this as XmlElementWithContent;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElementWithContent))) {
				if ((!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return XmlElementWithContent.Create(
				localName: this.LocalName,
				namespaceName: this.NamespaceName,
				children: this.Children,
				content: content);
		}
		
		public override XmlElementWithContent ToXmlElementWithContent(
				ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
				ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToXmlElementWithContent(
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					children: children.GetValueOrDefault(this.Children),
					content: content);
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : XmlNode.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private XmlElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String namespaceName;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>.Builder> children;
		
			internal Builder(XmlElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.namespaceName = immutable.NamespaceName;
			}
		
			public System.String NamespaceName {
				get {
					return this.namespaceName;
				}
		
				set {
					this.namespaceName = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableList<XmlNode>.Builder Children {
				get {
					if (!this.children.IsDefined) {
						this.children = this.immutable.children != null ? this.immutable.children.ToBuilder() : null;
					}
		
					return this.children.Value;
				}
		
				set {
					this.children = value;
				}
			}
		
			public new XmlElement ToImmutable() {
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.LocalName),
					ImmutableObjectGraph.Optional.For(this.NamespaceName),
					ImmutableObjectGraph.Optional.For(children));
			}
		}
	}
	
	public interface IXmlElementWithContent : IXmlElement {
		System.String Content { get; }
	}
	
	public partial class XmlElementWithContent : XmlElement, IXmlElementWithContent {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlElementWithContent DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String content;
	
		/// <summary>Initializes a new instance of the XmlElementWithContent class.</summary>
		protected XmlElementWithContent(
			System.Int32 identity,
			System.String localName,
			System.String namespaceName,
			System.Collections.Immutable.ImmutableList<XmlNode> children,
			System.String content)
			: base(
				identity: identity,
				localName: localName,
				namespaceName: namespaceName,
				children: children)
		{
			this.content = content;
			this.Validate();
		}
	
		public static XmlElementWithContent Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: localName.GetValueOrDefault(DefaultInstance.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName),
				children: children.GetValueOrDefault(DefaultInstance.Children),
				content: content.GetValueOrDefault(DefaultInstance.Content),
				identity: identity.GetValueOrDefault(DefaultInstance.Identity));
		}
	
		public System.String Content {
			get { return this.content; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlElementWithContent WithLocalName(System.String value) {
			return (XmlElementWithContent)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public new XmlElementWithContent WithNamespaceName(System.String value) {
			return (XmlElementWithContent)base.WithNamespaceName(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new XmlElementWithContent WithChildren(System.Collections.Immutable.ImmutableList<XmlNode> value) {
			return (XmlElementWithContent)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new XmlElementWithContent WithChildren(params XmlNode[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new XmlElementWithContent WithChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new XmlElementWithContent AddChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new XmlElementWithContent AddChildren(params XmlNode[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new XmlElementWithContent AddChildren(XmlNode value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren(params XmlNode[] values) {
			return this.With(children: this.Children.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren(XmlNode value) {
			return this.With(children: this.Children.Remove(value));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
		
		/// <summary>Returns a new instance with the Content property set to the specified value.</summary>
		public XmlElementWithContent WithContent(System.String value) {
			if (value == this.Content) {
				return this;
			}
		
			return this.With(content: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public override XmlElement With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			return this.With(
				localName: localName,
				namespaceName: namespaceName,
				children: children,
				content: default(ImmutableObjectGraph.Optional<System.String>));
		}
			
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public virtual XmlElementWithContent With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				localName: localName.GetValueOrDefault(this.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
				children: children.GetValueOrDefault(this.Children),
				content: content.GetValueOrDefault(this.Content),
				identity: identity.GetValueOrDefault(this.Identity));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlElementWithContent WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(children.IsDefined && children.Value != this.Children) || 
				(content.IsDefined && content.Value != this.Content)) {
				return new XmlElementWithContent(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					children: children.GetValueOrDefault(this.Children),
					content: content.GetValueOrDefault(this.Content));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlElementWithContent whose fields are initialized with default values.</summary>
		private static XmlElementWithContent GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlElementWithContent(
				default(System.Int32), 
				template.LocalName, 
				template.NamespaceName, 
				template.Children, 
				template.Content);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<XmlNode> Children { get; set; }
	
			internal System.String Content { get; set; }
		}
		
		public XmlElement ToXmlElement() {
			return XmlElement.Create(
				localName: this.LocalName,
				namespaceName: this.NamespaceName,
				children: this.Children);
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : XmlElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private XmlElementWithContent immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String content;
		
			internal Builder(XmlElementWithContent immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.content = immutable.Content;
			}
		
			public System.String Content {
				get {
					return this.content;
				}
		
				set {
					this.content = value;
				}
			}
		
			public new XmlElementWithContent ToImmutable() {
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.LocalName),
					ImmutableObjectGraph.Optional.For(this.NamespaceName),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.Content));
			}
		}
	}
	
	public interface IXmlAttribute : IXmlNode {
		System.String NamespaceName { get; }
		System.String Value { get; }
	}
	
	public partial class XmlAttribute : XmlNode, IXmlAttribute {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlAttribute DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String namespaceName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the XmlAttribute class.</summary>
		protected XmlAttribute(
			System.Int32 identity,
			System.String localName,
			System.String namespaceName,
			System.String value)
			: base(
				identity: identity,
				localName: localName)
		{
			this.namespaceName = namespaceName;
			this.value = value;
			this.Validate();
		}
	
		public static XmlAttribute Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: localName.GetValueOrDefault(DefaultInstance.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName),
				value: value.GetValueOrDefault(DefaultInstance.Value),
				identity: identity.GetValueOrDefault(DefaultInstance.Identity));
		}
	
		public System.String NamespaceName {
			get { return this.namespaceName; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlAttribute WithLocalName(System.String value) {
			return (XmlAttribute)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public XmlAttribute WithNamespaceName(System.String value) {
			if (value == this.NamespaceName) {
				return this;
			}
		
			return this.With(namespaceName: value);
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public XmlAttribute WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public override XmlNode With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.With(
				localName: localName,
				namespaceName: default(ImmutableObjectGraph.Optional<System.String>),
				value: default(ImmutableObjectGraph.Optional<System.String>));
		}
			
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public virtual XmlAttribute With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				localName: localName.GetValueOrDefault(this.LocalName),
				namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
				value: value.GetValueOrDefault(this.Value),
				identity: identity.GetValueOrDefault(this.Identity));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlAttribute WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new XmlAttribute(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlAttribute whose fields are initialized with default values.</summary>
		private static XmlAttribute GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlAttribute(
				default(System.Int32), 
				template.LocalName, 
				template.NamespaceName, 
				template.Value);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : XmlNode.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private XmlAttribute immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String namespaceName;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String value;
		
			internal Builder(XmlAttribute immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.namespaceName = immutable.NamespaceName;
				this.value = immutable.Value;
			}
		
			public System.String NamespaceName {
				get {
					return this.namespaceName;
				}
		
				set {
					this.namespaceName = value;
				}
			}
		
			public System.String Value {
				get {
					return this.value;
				}
		
				set {
					this.value = value;
				}
			}
		
			public new XmlAttribute ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.LocalName),
					ImmutableObjectGraph.Optional.For(this.NamespaceName),
					ImmutableObjectGraph.Optional.For(this.Value));
			}
		}
	}
}


