// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public abstract partial class XmlNode : IRecursiveType {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String localName;
	
		private readonly System.UInt32 identity;
	
		/// <summary>Initializes a new instance of the XmlNode class.</summary>
		protected XmlNode(
			System.UInt32 identity,
			System.String localName,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
			this.localName = localName;
		}
	
		public System.String LocalName {
			get { return this.localName; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public XmlNode WithLocalName(System.String value) {
			if (value == this.LocalName) {
				return this;
			}
		
			return this.With(localName: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public XmlNode With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (XmlNode)this.WithCore(
				localName: localName);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract XmlNode WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>));
	
		protected internal uint Identity {
			get { return (uint)this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.UInt32 NewIdentity() {
			return (System.UInt32)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual XmlElement ToXmlElement(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			XmlElement that = this as XmlElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElement))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return XmlElement.CreateWithIdentity(
				localName: Optional.For(this.LocalName),
				identity: this.Identity,
				namespaceName: namespaceName,
				children: children);
		}
		
		public virtual XmlElementWithContent ToXmlElementWithContent(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlElementWithContent that = this as XmlElementWithContent;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElementWithContent))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!children.IsDefined || children.Value == that.Children) && 
				    (!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return XmlElementWithContent.CreateWithIdentity(
				localName: Optional.For(this.LocalName),
				identity: this.Identity,
				namespaceName: namespaceName,
				children: children,
				content: content);
		}
		
		public virtual XmlAttribute ToXmlAttribute(
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlAttribute that = this as XmlAttribute;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlAttribute))) {
				if ((!namespaceName.IsDefined || namespaceName.Value == that.NamespaceName) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return XmlAttribute.CreateWithIdentity(
				localName: Optional.For(this.LocalName),
				identity: this.Identity,
				namespaceName: namespaceName,
				value: value);
		}
	
		System.UInt32 IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public partial class XmlElement : XmlNode, System.Collections.Generic.IEnumerable<XmlNode>, IRecursiveParentWithOrderedChildren, IRecursiveParent<XmlNode>, IRecursiveParentWithLookupTable<XmlNode>, IRecursiveParentWithChildReplacement<XmlNode> {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String namespaceName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<XmlNode> children;
	
		/// <summary>Initializes a new instance of the XmlElement class.</summary>
		protected XmlElement(
			System.UInt32 identity,
			System.String localName,
			System.String namespaceName,
			System.Collections.Immutable.ImmutableList<XmlNode> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>>>),
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				localName: localName)
		{
			this.namespaceName = namespaceName;
			this.children = children;
			if (!skipValidation.Value) {
				this.Validate();
			}
			var lookupTableInitResult = RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.Initialize(this, lookupTable);
			this.lookupTable = lookupTableInitResult.LookupTable;
			this.inefficiencyLoad = lookupTableInitResult.InefficiencyLoad;
		}
	
		public static XmlElement Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String NamespaceName {
			get { return this.namespaceName; }
		}
	
		public System.Collections.Immutable.ImmutableList<XmlNode> Children {
			get { return this.children; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlElement WithLocalName(System.String value) {
			return (XmlElement)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public XmlElement WithNamespaceName(System.String value) {
			if (value == this.NamespaceName) {
				return this;
			}
		
			return this.With(namespaceName: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public XmlElement WithChildren(System.Collections.Immutable.ImmutableList<XmlNode> value) {
			if (value == this.Children) {
				return this;
			}
		
			return this.With(children: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlElement WithChildren(params XmlNode[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public XmlElement WithChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlElement AddChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public XmlElement AddChildren(params XmlNode[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public XmlElement AddChild(XmlNode value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlElement RemoveChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public XmlElement RemoveChildren(params XmlNode[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public XmlElement RemoveChild(XmlNode value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public XmlElement RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override XmlNode WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				localName: localName);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public XmlElement With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			return (XmlElement)this.WithCore(
				localName: localName,
				namespaceName: namespaceName,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual XmlElement WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.UInt32>);
			return this.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(this.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(this.NamespaceName)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(children.IsDefined && children.Value != this.Children)) {
				var lookupTable = children.IsDefined && children.Value != this.Children ? default(Optional<System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>>>) : Optional.For(this.lookupTable);
				return new XmlElement(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					children: children.GetValueOrDefault(this.Children),
					lookupTable: lookupTable);
			} else {
				return this;
			}
		}
	
		public System.Collections.Generic.IEnumerator<XmlNode> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlElement whose fields are initialized with default values.</summary>
		private static XmlElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlElement(
				default(System.UInt32),
				template.LocalName,
				template.NamespaceName,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<XmlNode> Children { get; set; }
		}
		
		protected XmlNode SyncImmediateChildToCurrentVersion(XmlNode child) {
			XmlNode currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public XmlElement AddDescendent(XmlNode value, XmlElement parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (XmlElement)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public XmlElement RemoveDescendent(XmlNode value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (XmlElement)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((XmlNode)newParent);
			return (XmlElement)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		/// <summary>Replaces one node with a modified version of itself (same identity) among this node's descendents</summary>
		public XmlElement ReplaceDescendent(XmlNode updatedNode) {
			var spine = this.GetSpine(updatedNode.Identity);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (XmlElement)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(updatedNode), spineIncludesDeletedElement: false).Peek();
		}
		
		/// <summary>Replaces one node with another node that may have a different identity.</summary>
		public XmlElement ReplaceDescendent(XmlNode current, XmlNode replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (XmlElement)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		
		private System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>> lookupTable;
		
		private uint inefficiencyLoad;
		
		private System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>> LookupTable {
			get {
				if (this.lookupTable == RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.LazySentinel) {
					this.lookupTable = RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.CreateLookupTable(this);
				}
		
				return this.lookupTable;
			}
		}
		
		uint IRecursiveParentWithLookupTable<XmlNode>.InefficiencyLoad {
			get { return this.inefficiencyLoad; }
		}
		
		System.Collections.Generic.IReadOnlyCollection<XmlNode> IRecursiveParentWithLookupTable<XmlNode>.Children {
			get { return this.Children; }
		}
		
		System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<XmlNode, System.UInt32>> IRecursiveParentWithLookupTable<XmlNode>.LookupTable {
			get { return this.LookupTable; }
		}
		
		public System.Collections.Immutable.ImmutableStack<XmlNode> GetSpine(XmlNode descendent) {
			return this.GetSpine<XmlElement, XmlNode>(descendent);
		}
		
		public System.Collections.Immutable.ImmutableStack<XmlNode> GetSpine(System.UInt32 identity) {
			return this.GetSpine<XmlElement, XmlNode>(identity);
		}
		
		public XmlNode Find(System.UInt32 identity)
		{
			return this.Find<XmlElement, XmlNode>(identity);
		}
		
		public XmlElement GetParent(XmlNode descendent) {
			return this.GetParent<XmlElement, XmlNode>(descendent);
		}
		
		public ParentedRecursiveType<XmlElement, XmlNode> GetParentedNode(System.UInt32 identity) {
			return this.GetParentedNode<XmlElement, XmlNode>(identity);
		}
		
		IRecursiveParent<XmlNode> IRecursiveParentWithChildReplacement<XmlNode>.ReplaceChild(System.Collections.Immutable.ImmutableStack<XmlNode> oldSpine, System.Collections.Immutable.ImmutableStack<XmlNode> newSpine) {
			var newChildren = this.Children.Replace(oldSpine.Peek(), newSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
		
			var lookupTableLazySentinel = RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.LazySentinel;
			if (newSelf.LookupTable == lookupTableLazySentinel && this.LookupTable != null && this.LookupTable != lookupTableLazySentinel) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.Fixup(this, ImmutableDeque.Create(newSpine), ImmutableDeque.Create(oldSpine));
				RecursiveTypeExtensions.LookupTable<XmlNode, XmlElement>.ValidateInternalIntegrityDebugOnly(newSelf);
			}
		
			return newSelf;
		}
		
		
		internal static XmlElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
				ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
					namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public virtual XmlElementWithContent ToXmlElementWithContent(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			XmlElementWithContent that = this as XmlElementWithContent;
			if (that != null && this.GetType().IsEquivalentTo(typeof(XmlElementWithContent))) {
				if ((!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return XmlElementWithContent.CreateWithIdentity(
				localName: Optional.For(this.LocalName),
				namespaceName: Optional.For(this.NamespaceName),
				children: Optional.For(this.Children),
				identity: this.Identity,
				content: content);
		}
		
		public override XmlElementWithContent ToXmlElementWithContent(
				ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
				ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToXmlElementWithContent(
					namespaceName: Optional.For(namespaceName.GetValueOrDefault(this.NamespaceName)),
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					content: content);
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		System.Collections.Generic.IEnumerable<XmlNode> IRecursiveParent<XmlNode>.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent<IRecursiveType>, IRecursiveType> IRecursiveParent.GetParentedNode(System.UInt32 identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent<IRecursiveType>, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((XmlNode)value);
		}
	}
	
	public partial class XmlElementWithContent : XmlElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlElementWithContent DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String content;
	
		/// <summary>Initializes a new instance of the XmlElementWithContent class.</summary>
		protected XmlElementWithContent(
			System.UInt32 identity,
			System.String localName,
			System.String namespaceName,
			System.Collections.Immutable.ImmutableList<XmlNode> children,
			System.String content,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				localName: localName,
				namespaceName: namespaceName,
				children: children)
		{
			this.content = content;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static XmlElementWithContent Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Content {
			get { return this.content; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlElementWithContent WithLocalName(System.String value) {
			return (XmlElementWithContent)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public new XmlElementWithContent WithNamespaceName(System.String value) {
			return (XmlElementWithContent)base.WithNamespaceName(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new XmlElementWithContent WithChildren(System.Collections.Immutable.ImmutableList<XmlNode> value) {
			return (XmlElementWithContent)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new XmlElementWithContent WithChildren(params XmlNode[] values) {
			return (XmlElementWithContent)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new XmlElementWithContent WithChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return (XmlElementWithContent)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new XmlElementWithContent AddChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return (XmlElementWithContent)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new XmlElementWithContent AddChildren(params XmlNode[] values) {
			return (XmlElementWithContent)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new XmlElementWithContent AddChild(XmlNode value) {
			return (XmlElementWithContent)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren(System.Collections.Generic.IEnumerable<XmlNode> values) {
			return (XmlElementWithContent)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren(params XmlNode[] values) {
			return (XmlElementWithContent)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new XmlElementWithContent RemoveChild(XmlNode value) {
			return (XmlElementWithContent)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new XmlElementWithContent RemoveChildren() {
			return (XmlElementWithContent)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the Content property set to the specified value.</summary>
		public XmlElementWithContent WithContent(System.String value) {
			if (value == this.Content) {
				return this;
			}
		
			return this.With(content: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override XmlNode WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				localName: localName);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override XmlElement WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>)) {
			return this.WithFactory(
				localName: localName,
				namespaceName: namespaceName,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public XmlElementWithContent With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (XmlElementWithContent)this.WithCore(
				localName: localName,
				namespaceName: namespaceName,
				children: children,
				content: content);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual XmlElementWithContent WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.UInt32>);
			return this.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(this.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(this.NamespaceName)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				content: Optional.For(content.GetValueOrDefault(this.Content)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlElementWithContent WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(children.IsDefined && children.Value != this.Children) || 
				(content.IsDefined && content.Value != this.Content)) {
				return new XmlElementWithContent(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					children: children.GetValueOrDefault(this.Children),
					content: content.GetValueOrDefault(this.Content));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlElementWithContent whose fields are initialized with default values.</summary>
		private static XmlElementWithContent GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlElementWithContent(
				default(System.UInt32),
				template.LocalName,
				template.NamespaceName,
				template.Children,
				template.Content,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<XmlNode> Children { get; set; }
	
			internal System.String Content { get; set; }
		}
		
		internal static XmlElementWithContent CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<XmlNode>>),
				ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
					namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public XmlElement ToXmlElement() {
			return XmlElement.CreateWithIdentity(
				localName: Optional.For(this.LocalName),
				namespaceName: Optional.For(this.NamespaceName),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
	}
	
	public partial class XmlAttribute : XmlNode {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly XmlAttribute DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String namespaceName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the XmlAttribute class.</summary>
		protected XmlAttribute(
			System.UInt32 identity,
			System.String localName,
			System.String namespaceName,
			System.String value,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				localName: localName)
		{
			this.namespaceName = namespaceName;
			this.value = value;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static XmlAttribute Create(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String NamespaceName {
			get { return this.namespaceName; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the LocalName property set to the specified value.</summary>
		public new XmlAttribute WithLocalName(System.String value) {
			return (XmlAttribute)base.WithLocalName(value);
		}
		
		/// <summary>Returns a new instance with the NamespaceName property set to the specified value.</summary>
		public XmlAttribute WithNamespaceName(System.String value) {
			if (value == this.NamespaceName) {
				return this;
			}
		
			return this.With(namespaceName: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public XmlAttribute WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override XmlNode WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				localName: localName);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public XmlAttribute With(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (XmlAttribute)this.WithCore(
				localName: localName,
				namespaceName: namespaceName,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual XmlAttribute WithCore(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.UInt32>);
			return this.WithFactory(
				localName: Optional.For(localName.GetValueOrDefault(this.LocalName)),
				namespaceName: Optional.For(namespaceName.GetValueOrDefault(this.NamespaceName)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private XmlAttribute WithFactory(
			ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(localName.IsDefined && localName.Value != this.LocalName) || 
				(namespaceName.IsDefined && namespaceName.Value != this.NamespaceName) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new XmlAttribute(
					identity: identity.GetValueOrDefault(this.Identity),
					localName: localName.GetValueOrDefault(this.LocalName),
					namespaceName: namespaceName.GetValueOrDefault(this.NamespaceName),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated XmlAttribute whose fields are initialized with default values.</summary>
		private static XmlAttribute GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new XmlAttribute(
				default(System.UInt32),
				template.LocalName,
				template.NamespaceName,
				template.Value,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String LocalName { get; set; }
	
			internal System.String NamespaceName { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static XmlAttribute CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> localName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> namespaceName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					localName: Optional.For(localName.GetValueOrDefault(DefaultInstance.LocalName)),
					namespaceName: Optional.For(namespaceName.GetValueOrDefault(DefaultInstance.NamespaceName)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
}


