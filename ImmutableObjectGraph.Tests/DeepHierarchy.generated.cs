// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public partial class A {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly A DefaultInstance = GetDefaultTemplate();
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 field1;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the A class.</summary>
		protected A(
			System.Int32 identity,
			System.Int32 field1,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
			this.field1 = field1;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static A Create(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Field1 {
			get { return this.field1; }
		}
		
		/// <summary>Returns a new instance with the Field1 property set to the specified value.</summary>
		public A WithField1(System.Int32 value) {
			if (value == this.Field1) {
				return this;
			}
		
			return this.With(field1: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public A With(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (A)this.WithCore(
				field1: field1);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual A WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(this.Field1)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private A WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(field1.IsDefined && field1.Value != this.Field1)) {
				return new A(
					identity: identity.GetValueOrDefault(this.Identity),
					field1: field1.GetValueOrDefault(this.Field1));
			} else {
				return this;
			}
		}
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated A whose fields are initialized with default values.</summary>
		private static A GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new A(
				default(System.Int32),
				template.Field1,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Field1 { get; set; }
		}
		
		internal static A CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public virtual B ToB(
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			B that = this as B;
			if (that != null && this.GetType().IsEquivalentTo(typeof(B))) {
				if ((!field2.IsDefined || field2.Value == that.Field2)) {
					return that;
				}
			}
		
			return B.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				identity: this.Identity,
				field2: field2);
		}
		
		public virtual C1 ToC1(
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			C1 that = this as C1;
			if (that != null && this.GetType().IsEquivalentTo(typeof(C1))) {
				if ((!field2.IsDefined || field2.Value == that.Field2) && 
				    (!field3.IsDefined || field3.Value == that.Field3)) {
					return that;
				}
			}
		
			return C1.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				identity: this.Identity,
				field2: field2,
				field3: field3);
		}
		
		public virtual C2 ToC2(
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			C2 that = this as C2;
			if (that != null && this.GetType().IsEquivalentTo(typeof(C2))) {
				if ((!field2.IsDefined || field2.Value == that.Field2) && 
				    (!field3.IsDefined || field3.Value == that.Field3)) {
					return that;
				}
			}
		
			return C2.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				identity: this.Identity,
				field2: field2,
				field3: field3);
		}
	}
	
	public partial class B : A {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly B DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 field2;
	
		/// <summary>Initializes a new instance of the B class.</summary>
		protected B(
			System.Int32 identity,
			System.Int32 field1,
			System.Int32 field2,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				field1: field1)
		{
			this.field2 = field2;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static B Create(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Field2 {
			get { return this.field2; }
		}
		
		/// <summary>Returns a new instance with the Field1 property set to the specified value.</summary>
		public new B WithField1(System.Int32 value) {
			return (B)base.WithField1(value);
		}
		
		/// <summary>Returns a new instance with the Field2 property set to the specified value.</summary>
		public B WithField2(System.Int32 value) {
			if (value == this.Field2) {
				return this;
			}
		
			return this.With(field2: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override A WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				field1: field1);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public B With(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (B)this.WithCore(
				field1: field1,
				field2: field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual B WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(this.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(this.Field2)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private B WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(field1.IsDefined && field1.Value != this.Field1) || 
				(field2.IsDefined && field2.Value != this.Field2)) {
				return new B(
					identity: identity.GetValueOrDefault(this.Identity),
					field1: field1.GetValueOrDefault(this.Field1),
					field2: field2.GetValueOrDefault(this.Field2));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated B whose fields are initialized with default values.</summary>
		private static B GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new B(
				default(System.Int32),
				template.Field1,
				template.Field2,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Field1 { get; set; }
	
			internal System.Int32 Field2 { get; set; }
		}
		
		internal static B CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
					field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public A ToA() {
			return A.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				identity: this.Identity);
		}
		
		public virtual C1 ToC1(
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			C1 that = this as C1;
			if (that != null && this.GetType().IsEquivalentTo(typeof(C1))) {
				if ((!field3.IsDefined || field3.Value == that.Field3)) {
					return that;
				}
			}
		
			return C1.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				field2: Optional.For(this.Field2),
				identity: this.Identity,
				field3: field3);
		}
		
		public override C1 ToC1(
				ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return base.ToC1(
					field2: Optional.For(field2.GetValueOrDefault(this.Field2)),
					field3: field3);
		}
		
		public virtual C2 ToC2(
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			C2 that = this as C2;
			if (that != null && this.GetType().IsEquivalentTo(typeof(C2))) {
				if ((!field3.IsDefined || field3.Value == that.Field3)) {
					return that;
				}
			}
		
			return C2.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				field2: Optional.For(this.Field2),
				identity: this.Identity,
				field3: field3);
		}
		
		public override C2 ToC2(
				ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return base.ToC2(
					field2: Optional.For(field2.GetValueOrDefault(this.Field2)),
					field3: field3);
		}
	}
	
	public partial class C1 : B {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly C1 DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 field3;
	
		/// <summary>Initializes a new instance of the C1 class.</summary>
		protected C1(
			System.Int32 identity,
			System.Int32 field1,
			System.Int32 field2,
			System.Int32 field3,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				field1: field1,
				field2: field2)
		{
			this.field3 = field3;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static C1 Create(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
				field3: Optional.For(field3.GetValueOrDefault(DefaultInstance.Field3)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Field3 {
			get { return this.field3; }
		}
		
		/// <summary>Returns a new instance with the Field1 property set to the specified value.</summary>
		public new C1 WithField1(System.Int32 value) {
			return (C1)base.WithField1(value);
		}
		
		/// <summary>Returns a new instance with the Field2 property set to the specified value.</summary>
		public new C1 WithField2(System.Int32 value) {
			return (C1)base.WithField2(value);
		}
		
		/// <summary>Returns a new instance with the Field3 property set to the specified value.</summary>
		public C1 WithField3(System.Int32 value) {
			if (value == this.Field3) {
				return this;
			}
		
			return this.With(field3: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override A WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				field1: field1);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override B WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				field1: field1,
				field2: field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public C1 With(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (C1)this.WithCore(
				field1: field1,
				field2: field2,
				field3: field3);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual C1 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(this.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(this.Field2)),
				field3: Optional.For(field3.GetValueOrDefault(this.Field3)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private C1 WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(field1.IsDefined && field1.Value != this.Field1) || 
				(field2.IsDefined && field2.Value != this.Field2) || 
				(field3.IsDefined && field3.Value != this.Field3)) {
				return new C1(
					identity: identity.GetValueOrDefault(this.Identity),
					field1: field1.GetValueOrDefault(this.Field1),
					field2: field2.GetValueOrDefault(this.Field2),
					field3: field3.GetValueOrDefault(this.Field3));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated C1 whose fields are initialized with default values.</summary>
		private static C1 GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new C1(
				default(System.Int32),
				template.Field1,
				template.Field2,
				template.Field3,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Field1 { get; set; }
	
			internal System.Int32 Field2 { get; set; }
	
			internal System.Int32 Field3 { get; set; }
		}
		
		internal static C1 CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
					field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
					field3: Optional.For(field3.GetValueOrDefault(DefaultInstance.Field3)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public B ToB() {
			return B.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				field2: Optional.For(this.Field2),
				identity: this.Identity);
		}
	}
	
	public partial class C2 : B {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly C2 DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 field3;
	
		/// <summary>Initializes a new instance of the C2 class.</summary>
		protected C2(
			System.Int32 identity,
			System.Int32 field1,
			System.Int32 field2,
			System.Int32 field3,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				field1: field1,
				field2: field2)
		{
			this.field3 = field3;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static C2 Create(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
				field3: Optional.For(field3.GetValueOrDefault(DefaultInstance.Field3)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Field3 {
			get { return this.field3; }
		}
		
		/// <summary>Returns a new instance with the Field1 property set to the specified value.</summary>
		public new C2 WithField1(System.Int32 value) {
			return (C2)base.WithField1(value);
		}
		
		/// <summary>Returns a new instance with the Field2 property set to the specified value.</summary>
		public new C2 WithField2(System.Int32 value) {
			return (C2)base.WithField2(value);
		}
		
		/// <summary>Returns a new instance with the Field3 property set to the specified value.</summary>
		public C2 WithField3(System.Int32 value) {
			if (value == this.Field3) {
				return this;
			}
		
			return this.With(field3: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override A WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				field1: field1);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override B WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				field1: field1,
				field2: field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public C2 With(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (C2)this.WithCore(
				field1: field1,
				field2: field2,
				field3: field3);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual C2 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				field1: Optional.For(field1.GetValueOrDefault(this.Field1)),
				field2: Optional.For(field2.GetValueOrDefault(this.Field2)),
				field3: Optional.For(field3.GetValueOrDefault(this.Field3)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private C2 WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(field1.IsDefined && field1.Value != this.Field1) || 
				(field2.IsDefined && field2.Value != this.Field2) || 
				(field3.IsDefined && field3.Value != this.Field3)) {
				return new C2(
					identity: identity.GetValueOrDefault(this.Identity),
					field1: field1.GetValueOrDefault(this.Field1),
					field2: field2.GetValueOrDefault(this.Field2),
					field3: field3.GetValueOrDefault(this.Field3));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated C2 whose fields are initialized with default values.</summary>
		private static C2 GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new C2(
				default(System.Int32),
				template.Field1,
				template.Field2,
				template.Field3,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Field1 { get; set; }
	
			internal System.Int32 Field2 { get; set; }
	
			internal System.Int32 Field3 { get; set; }
		}
		
		internal static C2 CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Int32> field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> field3 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					field1: Optional.For(field1.GetValueOrDefault(DefaultInstance.Field1)),
					field2: Optional.For(field2.GetValueOrDefault(DefaultInstance.Field2)),
					field3: Optional.For(field3.GetValueOrDefault(DefaultInstance.Field3)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public B ToB() {
			return B.CreateWithIdentity(
				field1: Optional.For(this.Field1),
				field2: Optional.For(this.Field2),
				identity: this.Identity);
		}
	}
}


