// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests.NonRecursive {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public abstract partial class RootRecursive : IRecursiveType {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		private readonly System.UInt32 identity;
	
		/// <summary>Initializes a new instance of the RootRecursive class.</summary>
		protected RootRecursive(
			System.UInt32 identity,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
		}
	
		protected internal uint Identity {
			get { return (uint)this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.UInt32 NewIdentity() {
			return (System.UInt32)System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual ContainerOfNonRecursiveCollection ToContainerOfNonRecursiveCollection(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>)) {
			ContainerOfNonRecursiveCollection that = this as ContainerOfNonRecursiveCollection;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ContainerOfNonRecursiveCollection))) {
				if ((!metadata.IsDefined || metadata.Value == that.Metadata)) {
					return that;
				}
			}
		
			return ContainerOfNonRecursiveCollection.CreateWithIdentity(
				identity: this.Identity,
				metadata: metadata);
		}
		
		public virtual NonRecursiveElement ToNonRecursiveElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			NonRecursiveElement that = this as NonRecursiveElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(NonRecursiveElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return NonRecursiveElement.CreateWithIdentity(
				identity: this.Identity,
				name: name,
				value: value);
		}
	
		System.UInt32 IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public abstract partial class RecursiveContainer : RootRecursive, System.Collections.Generic.IEnumerable<RootRecursive>, IRecursiveParentWithOrderedChildren, IRecursiveParent<RootRecursive>, IRecursiveParentWithLookupTable<RootRecursive>, IRecursiveParentWithChildReplacement<RootRecursive> {
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<RootRecursive> children;
	
		/// <summary>Initializes a new instance of the RecursiveContainer class.</summary>
		protected RecursiveContainer(
			System.UInt32 identity,
			System.Collections.Immutable.ImmutableList<RootRecursive> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<RootRecursive, System.UInt32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<RootRecursive, System.UInt32>>>),
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity)
		{
			this.children = children;
			var lookupTableInitResult = RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.Initialize(this, lookupTable);
			this.lookupTable = lookupTableInitResult.LookupTable;
			this.inefficiencyLoad = lookupTableInitResult.InefficiencyLoad;
		}
	
		public System.Collections.Immutable.ImmutableList<RootRecursive> Children {
			get { return this.children; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RecursiveContainer WithChildren(params RootRecursive[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RecursiveContainer WithChildren(System.Collections.Generic.IEnumerable<RootRecursive> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RecursiveContainer AddChildren(System.Collections.Generic.IEnumerable<RootRecursive> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RecursiveContainer AddChildren(params RootRecursive[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public RecursiveContainer AddChild(RootRecursive value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RecursiveContainer RemoveChildren(System.Collections.Generic.IEnumerable<RootRecursive> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RecursiveContainer RemoveChildren(params RootRecursive[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RecursiveContainer RemoveChild(RootRecursive value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RecursiveContainer RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RecursiveContainer With(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<RootRecursive>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<RootRecursive>>)) {
			return (RecursiveContainer)this.WithCore(
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract RecursiveContainer WithCore(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<RootRecursive>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<RootRecursive>>));
	
		public System.Collections.Generic.IEnumerator<RootRecursive> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
		
		protected RootRecursive SyncImmediateChildToCurrentVersion(RootRecursive child) {
			RootRecursive currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public RecursiveContainer AddDescendent(RootRecursive value, RecursiveContainer parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (RecursiveContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public RecursiveContainer RemoveDescendent(RootRecursive value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (RecursiveContainer)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((RootRecursive)newParent);
			return (RecursiveContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		/// <summary>Replaces one node with a modified version of itself (same identity) among this node's descendents</summary>
		public RecursiveContainer ReplaceDescendent(RootRecursive updatedNode) {
			var spine = this.GetSpine(updatedNode.Identity);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (RecursiveContainer)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(updatedNode), spineIncludesDeletedElement: false).Peek();
		}
		
		/// <summary>Replaces one node with another node that may have a different identity.</summary>
		public RecursiveContainer ReplaceDescendent(RootRecursive current, RootRecursive replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (RecursiveContainer)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		
		private System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<RootRecursive, System.UInt32>> lookupTable;
		
		private uint inefficiencyLoad;
		
		private System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<RootRecursive, System.UInt32>> LookupTable {
			get {
				if (this.lookupTable == RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.LazySentinel) {
					this.lookupTable = RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.CreateLookupTable(this);
				}
		
				return this.lookupTable;
			}
		}
		
		uint IRecursiveParentWithLookupTable<RootRecursive>.InefficiencyLoad {
			get { return this.inefficiencyLoad; }
		}
		
		System.Collections.Generic.IReadOnlyCollection<RootRecursive> IRecursiveParentWithLookupTable<RootRecursive>.Children {
			get { return this.Children; }
		}
		
		System.Collections.Immutable.ImmutableDictionary<System.UInt32, System.Collections.Generic.KeyValuePair<RootRecursive, System.UInt32>> IRecursiveParentWithLookupTable<RootRecursive>.LookupTable {
			get { return this.LookupTable; }
		}
		
		public System.Collections.Immutable.ImmutableStack<RootRecursive> GetSpine(RootRecursive descendent) {
			return this.GetSpine<RecursiveContainer, RootRecursive>(descendent);
		}
		
		public System.Collections.Immutable.ImmutableStack<RootRecursive> GetSpine(System.UInt32 identity) {
			return this.GetSpine<RecursiveContainer, RootRecursive>(identity);
		}
		
		public RootRecursive Find(System.UInt32 identity)
		{
			return this.Find<RecursiveContainer, RootRecursive>(identity);
		}
		
		public RecursiveContainer GetParent(RootRecursive descendent) {
			return this.GetParent<RecursiveContainer, RootRecursive>(descendent);
		}
		
		public ParentedRecursiveType<RecursiveContainer, RootRecursive> GetParentedNode(System.UInt32 identity) {
			return this.GetParentedNode<RecursiveContainer, RootRecursive>(identity);
		}
		
		IRecursiveParent<RootRecursive> IRecursiveParentWithChildReplacement<RootRecursive>.ReplaceChild(System.Collections.Immutable.ImmutableStack<RootRecursive> oldSpine, System.Collections.Immutable.ImmutableStack<RootRecursive> newSpine) {
			var newChildren = this.Children.Replace(oldSpine.Peek(), newSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
		
			var lookupTableLazySentinel = RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.LazySentinel;
			if (newSelf.LookupTable == lookupTableLazySentinel && this.LookupTable != null && this.LookupTable != lookupTableLazySentinel) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.Fixup(this, ImmutableDeque.Create(newSpine), ImmutableDeque.Create(oldSpine));
				RecursiveTypeExtensions.LookupTable<RootRecursive, RecursiveContainer>.ValidateInternalIntegrityDebugOnly(newSelf);
			}
		
			return newSelf;
		}
		
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		System.Collections.Generic.IEnumerable<RootRecursive> IRecursiveParent<RootRecursive>.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent<IRecursiveType>, IRecursiveType> IRecursiveParent.GetParentedNode(System.UInt32 identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent<IRecursiveType>, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((RootRecursive)value);
		}
	}
	
	public partial class ContainerOfNonRecursiveCollection : RootRecursive {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ContainerOfNonRecursiveCollection DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<NonRecursiveElement> metadata;
	
		/// <summary>Initializes a new instance of the ContainerOfNonRecursiveCollection class.</summary>
		protected ContainerOfNonRecursiveCollection(
			System.UInt32 identity,
			System.Collections.Immutable.ImmutableList<NonRecursiveElement> metadata,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity)
		{
			this.metadata = metadata;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ContainerOfNonRecursiveCollection Create(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Collections.Immutable.ImmutableList<NonRecursiveElement> Metadata {
			get { return this.metadata; }
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ContainerOfNonRecursiveCollection WithMetadata(params NonRecursiveElement[] values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ContainerOfNonRecursiveCollection WithMetadata(System.Collections.Generic.IEnumerable<NonRecursiveElement> values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection AddMetadata(System.Collections.Generic.IEnumerable<NonRecursiveElement> values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection AddMetadata(params NonRecursiveElement[] values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection AddMetadata(NonRecursiveElement value) {
			return this.With(metadata: this.Metadata.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection RemoveMetadata(System.Collections.Generic.IEnumerable<NonRecursiveElement> values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection RemoveMetadata(params NonRecursiveElement[] values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection RemoveMetadata(NonRecursiveElement value) {
			return this.With(metadata: this.Metadata.Remove(value));
		}
		
		/// <summary>Clears all elements from the Metadata collection.</summary>
		public ContainerOfNonRecursiveCollection RemoveMetadata() {
			return this.With(metadata: this.Metadata.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ContainerOfNonRecursiveCollection With(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>)) {
			return (ContainerOfNonRecursiveCollection)this.WithCore(
				metadata: metadata);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ContainerOfNonRecursiveCollection WithCore(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.UInt32>);
			return this.WithFactory(
				metadata: Optional.For(metadata.GetValueOrDefault(this.Metadata)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ContainerOfNonRecursiveCollection WithFactory(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>),
			ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(metadata.IsDefined && metadata.Value != this.Metadata)) {
				return new ContainerOfNonRecursiveCollection(
					identity: identity.GetValueOrDefault(this.Identity),
					metadata: metadata.GetValueOrDefault(this.Metadata));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ContainerOfNonRecursiveCollection whose fields are initialized with default values.</summary>
		private static ContainerOfNonRecursiveCollection GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ContainerOfNonRecursiveCollection(
				default(System.UInt32),
				template.Metadata,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Collections.Immutable.ImmutableList<NonRecursiveElement> Metadata { get; set; }
		}
		
		internal static ContainerOfNonRecursiveCollection CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<NonRecursiveElement>>),
				ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial class NonRecursiveElement : RootRecursive {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly NonRecursiveElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the NonRecursiveElement class.</summary>
		protected NonRecursiveElement(
			System.UInt32 identity,
			System.String name,
			System.String value,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity)
		{
			this.name = name;
			this.value = value;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static NonRecursiveElement Create(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public NonRecursiveElement With(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (NonRecursiveElement)this.WithCore(
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual NonRecursiveElement WithCore(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.UInt32>);
			return this.WithFactory(
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private NonRecursiveElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new NonRecursiveElement(
					identity: identity.GetValueOrDefault(this.Identity),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated NonRecursiveElement whose fields are initialized with default values.</summary>
		private static NonRecursiveElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new NonRecursiveElement(
				default(System.UInt32),
				template.Name,
				template.Value,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static NonRecursiveElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.UInt32> identity = default(ImmutableObjectGraph.Optional<System.UInt32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
}


