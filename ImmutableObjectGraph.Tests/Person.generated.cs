// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph {
	using System.Diagnostics;

	/// <summary>
	/// A wrapper around optional parameters to capture whether they were specified or omitted.
	/// An implicit operator is defined so no one has to explicitly create this struct.
	/// </summary>
	public struct Optional<T> {
		private readonly T value;
		private readonly bool isDefined;

		public Optional(T value) {
			this.isDefined = true;
			this.value = value;
		}

		public bool IsDefined {
			get { return this.isDefined; }
		}

		public T Value {
			get { return this.value; }
		}

		public static implicit operator Optional<T>(T value) {
			return new Optional<T>(value);
		}
	}
	
	public partial class Person {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly Person DefaultInstance = new Person();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 age;
	
		/// <summary>Initializes a new instance of the Person class.</summary>
		private Person()
		{
		}
	
		/// <summary>Initializes a new instance of the Person class.</summary>
		private Person(System.String name, System.Int32 age)
		{
			this.name = name;
			this.age = age;
			this.Validate();
		}
	
		public static Person Default {
			get { return DefaultInstance; }
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public Person WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
	
			return new Person(value, this.Age);
		}
	
		public System.Int32 Age {
			get { return this.age; }
		}
	
		public Person WithAge(System.Int32 value) {
			if (value == this.Age) {
				return this;
			}
	
			return new Person(this.Name, value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public Person With(
			Optional<System.String> name = default(Optional<System.String>), 
			Optional<System.Int32> age = default(Optional<System.Int32>)) {
			return new Person(
					name.IsDefined ? name.Value : this.Name,
					age.IsDefined ? age.Value : this.Age);
		}
	
		public Builder ToBuilder() {
			return new Builder(this);
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private Person immutable;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private System.String name;
	
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private System.Int32 age;
	
			internal Builder(Person immutable) {
				this.immutable = immutable;
	
				this.name = immutable.Name;
				this.age = immutable.Age;
			}
	
			public System.String Name {
				get {
					return this.name;
				}
	
				set {
					if (this.name != value) {
						this.name = value;
						this.immutable = null;
					}
				}
			}
	
			public System.Int32 Age {
				get {
					return this.age;
				}
	
				set {
					if (this.age != value) {
						this.age = value;
						this.immutable = null;
					}
				}
			}
	
			public Person ToImmutable() {
				if (this.immutable == null) {
					this.immutable = Person.Default.With(
						this.name,
						this.age);
				}
	
				return this.immutable;
			}
		}
	}
}

