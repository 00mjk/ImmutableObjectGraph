// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public interface IAbstract1 {
		System.Int32 Abstract1Field1 { get; }
		System.Int32 Abstract1Field2 { get; }
	}
	
	public abstract partial class Abstract1 : IAbstract1 {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 abstract1Field1;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 abstract1Field2;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the Abstract1 class.</summary>
		protected Abstract1(
			System.Int32 identity,
			System.Int32 abstract1Field1,
			System.Int32 abstract1Field2)
		{
			this.identity = identity;
			this.abstract1Field1 = abstract1Field1;
			this.abstract1Field2 = abstract1Field2;
		}
	
		public System.Int32 Abstract1Field1 {
			get { return this.abstract1Field1; }
		}
	
		public System.Int32 Abstract1Field2 {
			get { return this.abstract1Field2; }
		}
		
		/// <summary>Returns a new instance with the Abstract1Field1 property set to the specified value.</summary>
		public Abstract1 WithAbstract1Field1(System.Int32 value) {
			if (value == this.Abstract1Field1) {
				return this;
			}
		
			return this.With(abstract1Field1: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Abstract1Field2 property set to the specified value.</summary>
		public Abstract1 WithAbstract1Field2(System.Int32 value) {
			if (value == this.Abstract1Field2) {
				return this;
			}
		
			return this.With(abstract1Field2: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public Abstract1 With(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (Abstract1)this.WithCore(
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract Abstract1 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>));
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual ConcreteOf2Abstracts ToConcreteOf2Abstracts(
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			ConcreteOf2Abstracts that = this as ConcreteOf2Abstracts;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ConcreteOf2Abstracts))) {
				if ((!abstract2Field1.IsDefined || abstract2Field1.Value == that.Abstract2Field1) && 
				    (!abstract2Field2.IsDefined || abstract2Field2.Value == that.Abstract2Field2) && 
				    (!concreteField1.IsDefined || concreteField1.Value == that.ConcreteField1) && 
				    (!concreteField2.IsDefined || concreteField2.Value == that.ConcreteField2)) {
					return that;
				}
			}
		
			return ConcreteOf2Abstracts.CreateWithIdentity(
				abstract1Field1: Optional.For(this.Abstract1Field1),
				abstract1Field2: Optional.For(this.Abstract1Field2),
				identity: this.Identity,
				abstract2Field1: abstract2Field1,
				abstract2Field2: abstract2Field2,
				concreteField1: concreteField1,
				concreteField2: concreteField2);
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private Abstract1 immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 abstract1Field1;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 abstract1Field2;
		
			internal Builder(Abstract1 immutable) {
				this.immutable = immutable;
		
				this.abstract1Field1 = immutable.Abstract1Field1;
				this.abstract1Field2 = immutable.Abstract1Field2;
			}
		
			public System.Int32 Abstract1Field1 {
				get {
					return this.abstract1Field1;
				}
		
				set {
					this.abstract1Field1 = value;
				}
			}
		
			public System.Int32 Abstract1Field2 {
				get {
					return this.abstract1Field2;
				}
		
				set {
					this.abstract1Field2 = value;
				}
			}
		
			public Abstract1 ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Abstract1Field1),
					ImmutableObjectGraph.Optional.For(this.Abstract1Field2));
			}
		}
	}
	
	public interface IAbstract2 : IAbstract1 {
		System.Int32 Abstract2Field1 { get; }
		System.Int32 Abstract2Field2 { get; }
	}
	
	public abstract partial class Abstract2 : Abstract1, IAbstract2 {
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 abstract2Field1;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 abstract2Field2;
	
		/// <summary>Initializes a new instance of the Abstract2 class.</summary>
		protected Abstract2(
			System.Int32 identity,
			System.Int32 abstract1Field1,
			System.Int32 abstract1Field2,
			System.Int32 abstract2Field1,
			System.Int32 abstract2Field2)
			: base(
				identity: identity,
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2)
		{
			this.abstract2Field1 = abstract2Field1;
			this.abstract2Field2 = abstract2Field2;
		}
	
		public System.Int32 Abstract2Field1 {
			get { return this.abstract2Field1; }
		}
	
		public System.Int32 Abstract2Field2 {
			get { return this.abstract2Field2; }
		}
		
		/// <summary>Returns a new instance with the Abstract1Field1 property set to the specified value.</summary>
		public new Abstract2 WithAbstract1Field1(System.Int32 value) {
			return (Abstract2)base.WithAbstract1Field1(value);
		}
		
		/// <summary>Returns a new instance with the Abstract1Field2 property set to the specified value.</summary>
		public new Abstract2 WithAbstract1Field2(System.Int32 value) {
			return (Abstract2)base.WithAbstract1Field2(value);
		}
		
		/// <summary>Returns a new instance with the Abstract2Field1 property set to the specified value.</summary>
		public Abstract2 WithAbstract2Field1(System.Int32 value) {
			if (value == this.Abstract2Field1) {
				return this;
			}
		
			return this.With(abstract2Field1: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Abstract2Field2 property set to the specified value.</summary>
		public Abstract2 WithAbstract2Field2(System.Int32 value) {
			if (value == this.Abstract2Field2) {
				return this;
			}
		
			return this.With(abstract2Field2: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public Abstract2 With(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (Abstract2)this.WithCore(
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2,
				abstract2Field1: abstract2Field1,
				abstract2Field2: abstract2Field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract Abstract2 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>));
		
		public virtual ConcreteOf2Abstracts ToConcreteOf2Abstracts(
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			ConcreteOf2Abstracts that = this as ConcreteOf2Abstracts;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ConcreteOf2Abstracts))) {
				if ((!concreteField1.IsDefined || concreteField1.Value == that.ConcreteField1) && 
				    (!concreteField2.IsDefined || concreteField2.Value == that.ConcreteField2)) {
					return that;
				}
			}
		
			return ConcreteOf2Abstracts.CreateWithIdentity(
				abstract1Field1: Optional.For(this.Abstract1Field1),
				abstract1Field2: Optional.For(this.Abstract1Field2),
				abstract2Field1: Optional.For(this.Abstract2Field1),
				abstract2Field2: Optional.For(this.Abstract2Field2),
				identity: this.Identity,
				concreteField1: concreteField1,
				concreteField2: concreteField2);
		}
		
		public override ConcreteOf2Abstracts ToConcreteOf2Abstracts(
				ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return base.ToConcreteOf2Abstracts(
					abstract2Field1: Optional.For(abstract2Field1.GetValueOrDefault(this.Abstract2Field1)),
					abstract2Field2: Optional.For(abstract2Field2.GetValueOrDefault(this.Abstract2Field2)),
					concreteField1: concreteField1,
					concreteField2: concreteField2);
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : Abstract1.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private Abstract2 immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 abstract2Field1;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 abstract2Field2;
		
			internal Builder(Abstract2 immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.abstract2Field1 = immutable.Abstract2Field1;
				this.abstract2Field2 = immutable.Abstract2Field2;
			}
		
			public System.Int32 Abstract2Field1 {
				get {
					return this.abstract2Field1;
				}
		
				set {
					this.abstract2Field1 = value;
				}
			}
		
			public System.Int32 Abstract2Field2 {
				get {
					return this.abstract2Field2;
				}
		
				set {
					this.abstract2Field2 = value;
				}
			}
		
			public new Abstract2 ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Abstract1Field1),
					ImmutableObjectGraph.Optional.For(this.Abstract1Field2),
					ImmutableObjectGraph.Optional.For(this.Abstract2Field1),
					ImmutableObjectGraph.Optional.For(this.Abstract2Field2));
			}
		}
	}
	
	public interface IConcreteOf2Abstracts : IAbstract2 {
		System.Int32 ConcreteField1 { get; }
		System.Int32 ConcreteField2 { get; }
	}
	
	public partial class ConcreteOf2Abstracts : Abstract2, IConcreteOf2Abstracts {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ConcreteOf2Abstracts DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 concreteField1;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 concreteField2;
	
		/// <summary>Initializes a new instance of the ConcreteOf2Abstracts class.</summary>
		protected ConcreteOf2Abstracts(
			System.Int32 identity,
			System.Int32 abstract1Field1,
			System.Int32 abstract1Field2,
			System.Int32 abstract2Field1,
			System.Int32 abstract2Field2,
			System.Int32 concreteField1,
			System.Int32 concreteField2)
			: base(
				identity: identity,
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2,
				abstract2Field1: abstract2Field1,
				abstract2Field2: abstract2Field2)
		{
			this.concreteField1 = concreteField1;
			this.concreteField2 = concreteField2;
			this.Validate();
		}
	
		public static ConcreteOf2Abstracts Create(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				abstract1Field1: Optional.For(abstract1Field1.GetValueOrDefault(DefaultInstance.Abstract1Field1)),
				abstract1Field2: Optional.For(abstract1Field2.GetValueOrDefault(DefaultInstance.Abstract1Field2)),
				abstract2Field1: Optional.For(abstract2Field1.GetValueOrDefault(DefaultInstance.Abstract2Field1)),
				abstract2Field2: Optional.For(abstract2Field2.GetValueOrDefault(DefaultInstance.Abstract2Field2)),
				concreteField1: Optional.For(concreteField1.GetValueOrDefault(DefaultInstance.ConcreteField1)),
				concreteField2: Optional.For(concreteField2.GetValueOrDefault(DefaultInstance.ConcreteField2)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 ConcreteField1 {
			get { return this.concreteField1; }
		}
	
		public System.Int32 ConcreteField2 {
			get { return this.concreteField2; }
		}
		
		/// <summary>Returns a new instance with the Abstract1Field1 property set to the specified value.</summary>
		public new ConcreteOf2Abstracts WithAbstract1Field1(System.Int32 value) {
			return (ConcreteOf2Abstracts)base.WithAbstract1Field1(value);
		}
		
		/// <summary>Returns a new instance with the Abstract1Field2 property set to the specified value.</summary>
		public new ConcreteOf2Abstracts WithAbstract1Field2(System.Int32 value) {
			return (ConcreteOf2Abstracts)base.WithAbstract1Field2(value);
		}
		
		/// <summary>Returns a new instance with the Abstract2Field1 property set to the specified value.</summary>
		public new ConcreteOf2Abstracts WithAbstract2Field1(System.Int32 value) {
			return (ConcreteOf2Abstracts)base.WithAbstract2Field1(value);
		}
		
		/// <summary>Returns a new instance with the Abstract2Field2 property set to the specified value.</summary>
		public new ConcreteOf2Abstracts WithAbstract2Field2(System.Int32 value) {
			return (ConcreteOf2Abstracts)base.WithAbstract2Field2(value);
		}
		
		/// <summary>Returns a new instance with the ConcreteField1 property set to the specified value.</summary>
		public ConcreteOf2Abstracts WithConcreteField1(System.Int32 value) {
			if (value == this.ConcreteField1) {
				return this;
			}
		
			return this.With(concreteField1: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ConcreteField2 property set to the specified value.</summary>
		public ConcreteOf2Abstracts WithConcreteField2(System.Int32 value) {
			if (value == this.ConcreteField2) {
				return this;
			}
		
			return this.With(concreteField2: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override Abstract1 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override Abstract2 WithCore(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return this.WithFactory(
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2,
				abstract2Field1: abstract2Field1,
				abstract2Field2: abstract2Field2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ConcreteOf2Abstracts With(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			return (ConcreteOf2Abstracts)this.WithCore(
				abstract1Field1: abstract1Field1,
				abstract1Field2: abstract1Field2,
				abstract2Field1: abstract2Field1,
				abstract2Field2: abstract2Field2,
				concreteField1: concreteField1,
				concreteField2: concreteField2);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ConcreteOf2Abstracts WithCore(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				abstract1Field1: Optional.For(abstract1Field1.GetValueOrDefault(this.Abstract1Field1)),
				abstract1Field2: Optional.For(abstract1Field2.GetValueOrDefault(this.Abstract1Field2)),
				abstract2Field1: Optional.For(abstract2Field1.GetValueOrDefault(this.Abstract2Field1)),
				abstract2Field2: Optional.For(abstract2Field2.GetValueOrDefault(this.Abstract2Field2)),
				concreteField1: Optional.For(concreteField1.GetValueOrDefault(this.ConcreteField1)),
				concreteField2: Optional.For(concreteField2.GetValueOrDefault(this.ConcreteField2)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ConcreteOf2Abstracts WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(abstract1Field1.IsDefined && abstract1Field1.Value != this.Abstract1Field1) || 
				(abstract1Field2.IsDefined && abstract1Field2.Value != this.Abstract1Field2) || 
				(abstract2Field1.IsDefined && abstract2Field1.Value != this.Abstract2Field1) || 
				(abstract2Field2.IsDefined && abstract2Field2.Value != this.Abstract2Field2) || 
				(concreteField1.IsDefined && concreteField1.Value != this.ConcreteField1) || 
				(concreteField2.IsDefined && concreteField2.Value != this.ConcreteField2)) {
				return new ConcreteOf2Abstracts(
					identity: identity.GetValueOrDefault(this.Identity),
					abstract1Field1: abstract1Field1.GetValueOrDefault(this.Abstract1Field1),
					abstract1Field2: abstract1Field2.GetValueOrDefault(this.Abstract1Field2),
					abstract2Field1: abstract2Field1.GetValueOrDefault(this.Abstract2Field1),
					abstract2Field2: abstract2Field2.GetValueOrDefault(this.Abstract2Field2),
					concreteField1: concreteField1.GetValueOrDefault(this.ConcreteField1),
					concreteField2: concreteField2.GetValueOrDefault(this.ConcreteField2));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ConcreteOf2Abstracts whose fields are initialized with default values.</summary>
		private static ConcreteOf2Abstracts GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ConcreteOf2Abstracts(
				default(System.Int32), 
				template.Abstract1Field1, 
				template.Abstract1Field2, 
				template.Abstract2Field1, 
				template.Abstract2Field2, 
				template.ConcreteField1, 
				template.ConcreteField2);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Abstract1Field1 { get; set; }
	
			internal System.Int32 Abstract1Field2 { get; set; }
	
			internal System.Int32 Abstract2Field1 { get; set; }
	
			internal System.Int32 Abstract2Field2 { get; set; }
	
			internal System.Int32 ConcreteField1 { get; set; }
	
			internal System.Int32 ConcreteField2 { get; set; }
		}
		
		internal static ConcreteOf2Abstracts CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.Int32> abstract1Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> abstract1Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> abstract2Field1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> abstract2Field2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> concreteField1 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> concreteField2 = default(ImmutableObjectGraph.Optional<System.Int32>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					abstract1Field1: Optional.For(abstract1Field1.GetValueOrDefault(DefaultInstance.Abstract1Field1)),
					abstract1Field2: Optional.For(abstract1Field2.GetValueOrDefault(DefaultInstance.Abstract1Field2)),
					abstract2Field1: Optional.For(abstract2Field1.GetValueOrDefault(DefaultInstance.Abstract2Field1)),
					abstract2Field2: Optional.For(abstract2Field2.GetValueOrDefault(DefaultInstance.Abstract2Field2)),
					concreteField1: Optional.For(concreteField1.GetValueOrDefault(DefaultInstance.ConcreteField1)),
					concreteField2: Optional.For(concreteField2.GetValueOrDefault(DefaultInstance.ConcreteField2)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : Abstract2.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ConcreteOf2Abstracts immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 concreteField1;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 concreteField2;
		
			internal Builder(ConcreteOf2Abstracts immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.concreteField1 = immutable.ConcreteField1;
				this.concreteField2 = immutable.ConcreteField2;
			}
		
			public System.Int32 ConcreteField1 {
				get {
					return this.concreteField1;
				}
		
				set {
					this.concreteField1 = value;
				}
			}
		
			public System.Int32 ConcreteField2 {
				get {
					return this.concreteField2;
				}
		
				set {
					this.concreteField2 = value;
				}
			}
		
			public new ConcreteOf2Abstracts ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Abstract1Field1),
					ImmutableObjectGraph.Optional.For(this.Abstract1Field2),
					ImmutableObjectGraph.Optional.For(this.Abstract2Field1),
					ImmutableObjectGraph.Optional.For(this.Abstract2Field2),
					ImmutableObjectGraph.Optional.For(this.ConcreteField1),
					ImmutableObjectGraph.Optional.For(this.ConcreteField2));
			}
		}
	}
}


