<#@ template debug="true" language="C#" #>
<#@ Output Extension=".generated.cs" #>
<#
	this.Namespace = "ImmutableObjectGraph.Tests";
#>
<#@ Include File="..\ImmutableObjectGraph\ImmutableObjectGraph.RedNode.tt" #>
<#@ Include File="..\ImmutableObjectGraph\ImmutableObjectGraph.tt" #>
<#+
	// Note that ProjectElementContainer-derived types lack any properties that expose
	// the specific types of children they support. And the Children member that is exposed
	// allows any type of ProjectElement.
	// So an enhancement we should consider is to optionally hide the Children member
	// from the public API and allow more constrained types of children via the public API.

	class ElementLocation {
		int column;
		int line;
		string file;
		string locationString;
	}

	abstract class ProjectElement {
		string condition;
		ElementLocation conditionLocation;

		string label;
		ElementLocation labelLocation;

		ElementLocation location;
	}

	abstract class ProjectElementContainer : ProjectElement {
		ImmutableList<ProjectElement> children;
	}

	class ProjectRootElement : ProjectElementContainer {
		string fullPath;
		Encoding encoding;

		string toolsVersion;
		ElementLocation toolsVersionLocation;
		
		string defaultTargets;
		ElementLocation defaultTargetsLocation;

		string initialTargets;
		ElementLocation initialTargetsLocation;

		bool treatAsLocalProperty;
		ElementLocation treatAsLocalPropertylocation;
	}

	class ProjectPropertyGroupElement : ProjectElementContainer {
	}
	
	class ProjectItemGroupElement : ProjectElementContainer {
	}

	class ProjectChooseElement : ProjectElementContainer {
	}

	class ProjectOtherwiseElement : ProjectElementContainer {
	}

	class ProjectWhenElement : ProjectElementContainer {
	}

	class ProjectPropertyElement : ProjectElement {
		string name;
		string value;
	}

	class ProjectItemElement : ProjectElementContainer {
		string Exclude;
		ElementLocation ExcludeLocation;

		string Include;
		ElementLocation IncludeLocation;

		string ItemType;

		string KeepDuplicates;
		ElementLocation KeepDuplicatesLocation;

		string KeepMetadata;
		ElementLocation KeepMetadataLocation;

		string Remove;
		ElementLocation RemoveLocation;

		string RemoveMetadata;
		ElementLocation RemoveMetadataLocation;
	}

	class ProjectMetadataElement : ProjectElement {
		string name;
		string value;
	}

	class ProjectExtensionsElement : ProjectElement {
		string content;
	}

	class ProjectImportElement : ProjectElement {
		string project;
		ElementLocation projectLocation;
	}

	class ProjectImportGroupElement : ProjectElementContainer {
	}

	class ProjectItemDefinitionElement : ProjectElementContainer {
		string itemType;
	}

	class ProjectItemDefinitionGroupElement : ProjectElementContainer {
	}

	class ProjectOnErrorElement : ProjectElement {
	}

	class ProjectOutputElement : ProjectElement {
		bool isOutputItem;
		bool isOutputProperty;

		string itemType;
		ElementLocation itemTypeLocation;

		string propertyName;
		ElementLocation propertyNameLocation;

		string taskParameter;
		ElementLocation TaskParameterLocation;
	}

	class ProjectTargetElement : ProjectElementContainer {
		string AfterTargets;
		ElementLocation AfterTargetsLocation;

		string BeforeTargets;
		ElementLocation BeforeTargetsLocation;

		string DependsOnTargets;
		ElementLocation DependsOnTargetsLocation;

		string Inputs;
		ElementLocation InputsLocation;

		string KeepDuplicateOutputs;
		ElementLocation KeepDuplicateOutputsLocation;

		string Name;
		ElementLocation NameLocation;

		string Outputs;
		ElementLocation OutputsLocation;

		string Returns;
		ElementLocation ReturnsLocation;
	}

	class ProjectTaskElement : ProjectElementContainer {
		string ContinueOnError;
		ElementLocation ContinueOnErrorLocation;

		string MSBuildArchitecture;
		ElementLocation MSBuildArchitectureLocation;

		string MSBuildRuntime;
		ElementLocation MSBuildRuntimeLocation;

		string Name;
	}

	class ProjectUsingTaskBodyElement : ProjectElement {
		string evaluate;
		ElementLocation evaluateLocation;

		string taskBody;
	}

	class ProjectUsingTaskElement : ProjectElementContainer {
		string Architecture;
		ElementLocation ArchitectureLocation;

		string AssemblyFile;
		ElementLocation AssemblyFileLocation;

		string AssemblyName;
		ElementLocation AssemblyNameLocation;

		string Runtime;
		ElementLocation RuntimeLocation;

		string TaskFactory;
		ElementLocation TaskFactoryLocation;

		string TaskName;
		ElementLocation TaskNameLocation;
	}

	class ProjectUsingTaskParameterElement : ProjectElement {
		string name;

		string output;
		ElementLocation outputLocation;

		string parameterType;
		ElementLocation parameterTypeLocation;

		string required;
		ElementLocation requiredLocation;
	}

	class UsingTaskParameterGroupElement : ProjectElementContainer {
	}
#>
