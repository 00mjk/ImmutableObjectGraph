// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public interface IElementLocation {
		System.Int32 Column { get; }
		System.Int32 Line { get; }
		System.String File { get; }
		System.String LocationString { get; }
	}
	
	public partial class ElementLocation : IElementLocation {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ElementLocation DefaultInstance = GetDefaultTemplate();
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 column;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 line;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String file;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String locationString;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ElementLocation class.</summary>
		protected ElementLocation(
			System.Int32 identity,
			System.Int32 column,
			System.Int32 line,
			System.String file,
			System.String locationString)
		{
			this.identity = identity;
			this.column = column;
			this.line = line;
			this.file = file;
			this.locationString = locationString;
			this.Validate();
		}
	
		public static ElementLocation Create(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				column: Optional.For(column.GetValueOrDefault(DefaultInstance.Column)),
				line: Optional.For(line.GetValueOrDefault(DefaultInstance.Line)),
				file: Optional.For(file.GetValueOrDefault(DefaultInstance.File)),
				locationString: Optional.For(locationString.GetValueOrDefault(DefaultInstance.LocationString)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Column {
			get { return this.column; }
		}
	
		public System.Int32 Line {
			get { return this.line; }
		}
	
		public System.String File {
			get { return this.file; }
		}
	
		public System.String LocationString {
			get { return this.locationString; }
		}
		
		/// <summary>Returns a new instance with the Column property set to the specified value.</summary>
		public ElementLocation WithColumn(System.Int32 value) {
			if (value == this.Column) {
				return this;
			}
		
			return this.With(column: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Line property set to the specified value.</summary>
		public ElementLocation WithLine(System.Int32 value) {
			if (value == this.Line) {
				return this;
			}
		
			return this.With(line: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the File property set to the specified value.</summary>
		public ElementLocation WithFile(System.String value) {
			if (value == this.File) {
				return this;
			}
		
			return this.With(file: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the LocationString property set to the specified value.</summary>
		public ElementLocation WithLocationString(System.String value) {
			if (value == this.LocationString) {
				return this;
			}
		
			return this.With(locationString: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ElementLocation With(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ElementLocation)this.WithCore(
				column: column,
				line: line,
				file: file,
				locationString: locationString);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ElementLocation WithCore(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				column: Optional.For(column.GetValueOrDefault(this.Column)),
				line: Optional.For(line.GetValueOrDefault(this.Line)),
				file: Optional.For(file.GetValueOrDefault(this.File)),
				locationString: Optional.For(locationString.GetValueOrDefault(this.LocationString)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ElementLocation WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(column.IsDefined && column.Value != this.Column) || 
				(line.IsDefined && line.Value != this.Line) || 
				(file.IsDefined && file.Value != this.File) || 
				(locationString.IsDefined && locationString.Value != this.LocationString)) {
				return new ElementLocation(
					identity: identity.GetValueOrDefault(this.Identity),
					column: column.GetValueOrDefault(this.Column),
					line: line.GetValueOrDefault(this.Line),
					file: file.GetValueOrDefault(this.File),
					locationString: locationString.GetValueOrDefault(this.LocationString));
			} else {
				return this;
			}
		}
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ElementLocation whose fields are initialized with default values.</summary>
		private static ElementLocation GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ElementLocation(
				default(System.Int32), 
				template.Column, 
				template.Line, 
				template.File, 
				template.LocationString);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Column { get; set; }
	
			internal System.Int32 Line { get; set; }
	
			internal System.String File { get; set; }
	
			internal System.String LocationString { get; set; }
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ElementLocation immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 column;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 line;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String file;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String locationString;
		
			internal Builder(ElementLocation immutable) {
				this.immutable = immutable;
		
				this.column = immutable.Column;
				this.line = immutable.Line;
				this.file = immutable.File;
				this.locationString = immutable.LocationString;
			}
		
			public System.Int32 Column {
				get {
					return this.column;
				}
		
				set {
					this.column = value;
				}
			}
		
			public System.Int32 Line {
				get {
					return this.line;
				}
		
				set {
					this.line = value;
				}
			}
		
			public System.String File {
				get {
					return this.file;
				}
		
				set {
					this.file = value;
				}
			}
		
			public System.String LocationString {
				get {
					return this.locationString;
				}
		
				set {
					this.locationString = value;
				}
			}
		
			public ElementLocation ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Column),
					ImmutableObjectGraph.Optional.For(this.Line),
					ImmutableObjectGraph.Optional.For(this.File),
					ImmutableObjectGraph.Optional.For(this.LocationString));
			}
		}
	}
	
	public interface IProjectElement {
		System.String Condition { get; }
		ElementLocation ConditionLocation { get; }
		System.String Label { get; }
		ElementLocation LabelLocation { get; }
		ElementLocation Location { get; }
	}
	
	public abstract partial class ProjectElement : IProjectElement, IRecursiveType {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String condition;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation conditionLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String label;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation labelLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation location;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ProjectElement class.</summary>
		protected ProjectElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location)
		{
			this.identity = identity;
			this.condition = condition;
			this.conditionLocation = conditionLocation;
			this.label = label;
			this.labelLocation = labelLocation;
			this.location = location;
		}
	
		public System.String Condition {
			get { return this.condition; }
		}
	
		public ElementLocation ConditionLocation {
			get { return this.conditionLocation; }
		}
	
		public System.String Label {
			get { return this.label; }
		}
	
		public ElementLocation LabelLocation {
			get { return this.labelLocation; }
		}
	
		public ElementLocation Location {
			get { return this.location; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public ProjectElement WithCondition(System.String value) {
			if (value == this.Condition) {
				return this;
			}
		
			return this.With(condition: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public ProjectElement WithConditionLocation(ElementLocation value) {
			if (value == this.ConditionLocation) {
				return this;
			}
		
			return this.With(conditionLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public ProjectElement WithLabel(System.String value) {
			if (value == this.Label) {
				return this;
			}
		
			return this.With(label: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public ProjectElement WithLabelLocation(ElementLocation value) {
			if (value == this.LabelLocation) {
				return this;
			}
		
			return this.With(labelLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public ProjectElement WithLocation(ElementLocation value) {
			if (value == this.Location) {
				return this;
			}
		
			return this.With(location: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>));
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!toolsVersionLocation.IsDefined || toolsVersionLocation.Value == that.ToolsVersionLocation) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!defaultTargetsLocation.IsDefined || defaultTargetsLocation.Value == that.DefaultTargetsLocation) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!initialTargetsLocation.IsDefined || initialTargetsLocation.Value == that.InitialTargetsLocation) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty) && 
				    (!treatAsLocalPropertylocation.IsDefined || treatAsLocalPropertylocation.Value == that.TreatAsLocalPropertylocation)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectItemGroupElement that = this as ProjectItemGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectItemGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectChooseElement that = this as ProjectChooseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectChooseElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectChooseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectOtherwiseElement that = this as ProjectOtherwiseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOtherwiseElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectOtherwiseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectWhenElement that = this as ProjectWhenElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectWhenElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectWhenElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectPropertyElement that = this as ProjectPropertyElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectPropertyElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public virtual ProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectItemElement that = this as ProjectItemElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemElement))) {
				if ((!exclude.IsDefined || exclude.Value == that.Exclude) && 
				    (!excludeLocation.IsDefined || excludeLocation.Value == that.ExcludeLocation) && 
				    (!include.IsDefined || include.Value == that.Include) && 
				    (!includeLocation.IsDefined || includeLocation.Value == that.IncludeLocation) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!keepDuplicates.IsDefined || keepDuplicates.Value == that.KeepDuplicates) && 
				    (!keepDuplicatesLocation.IsDefined || keepDuplicatesLocation.Value == that.KeepDuplicatesLocation) && 
				    (!keepMetadata.IsDefined || keepMetadata.Value == that.KeepMetadata) && 
				    (!keepMetadataLocation.IsDefined || keepMetadataLocation.Value == that.KeepMetadataLocation) && 
				    (!metadata.IsDefined || metadata.Value == that.Metadata) && 
				    (!remove.IsDefined || remove.Value == that.Remove) && 
				    (!removeLocation.IsDefined || removeLocation.Value == that.RemoveLocation) && 
				    (!removeMetadata.IsDefined || removeMetadata.Value == that.RemoveMetadata) && 
				    (!removeMetadataLocation.IsDefined || removeMetadataLocation.Value == that.RemoveMetadataLocation)) {
					return that;
				}
			}
		
			return ProjectItemElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				exclude: exclude,
				excludeLocation: excludeLocation,
				include: include,
				includeLocation: includeLocation,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepDuplicatesLocation: keepDuplicatesLocation,
				keepMetadata: keepMetadata,
				keepMetadataLocation: keepMetadataLocation,
				metadata: metadata,
				remove: remove,
				removeLocation: removeLocation,
				removeMetadata: removeMetadata,
				removeMetadataLocation: removeMetadataLocation);
		}
		
		public virtual ProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectMetadataElement that = this as ProjectMetadataElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectMetadataElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectMetadataElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public virtual ProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectExtensionsElement that = this as ProjectExtensionsElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectExtensionsElement))) {
				if ((!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return ProjectExtensionsElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				content: content);
		}
		
		public virtual ProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectImportElement that = this as ProjectImportElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportElement))) {
				if ((!project.IsDefined || project.Value == that.Project) && 
				    (!projectLocation.IsDefined || projectLocation.Value == that.ProjectLocation)) {
					return that;
				}
			}
		
			return ProjectImportElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				project: project,
				projectLocation: projectLocation);
		}
		
		public virtual ProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectImportGroupElement that = this as ProjectImportGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectImportGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			ProjectItemDefinitionElement that = this as ProjectItemDefinitionElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!metadata.IsDefined || metadata.Value == that.Metadata)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				itemType: itemType,
				metadata: metadata);
		}
		
		public virtual ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectItemDefinitionGroupElement that = this as ProjectItemDefinitionGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectOnErrorElement ToProjectOnErrorElement() {
			ProjectOnErrorElement that = this as ProjectOnErrorElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOnErrorElement))) {
				return that;
			}
		
			return ProjectOnErrorElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity);
		}
		
		public virtual ProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectOutputElement that = this as ProjectOutputElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOutputElement))) {
				if ((!isOutputItem.IsDefined || isOutputItem.Value == that.IsOutputItem) && 
				    (!isOutputProperty.IsDefined || isOutputProperty.Value == that.IsOutputProperty) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!itemTypeLocation.IsDefined || itemTypeLocation.Value == that.ItemTypeLocation) && 
				    (!propertyName.IsDefined || propertyName.Value == that.PropertyName) && 
				    (!propertyNameLocation.IsDefined || propertyNameLocation.Value == that.PropertyNameLocation) && 
				    (!taskParameter.IsDefined || taskParameter.Value == that.TaskParameter) && 
				    (!taskParameterLocation.IsDefined || taskParameterLocation.Value == that.TaskParameterLocation)) {
					return that;
				}
			}
		
			return ProjectOutputElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				isOutputItem: isOutputItem,
				isOutputProperty: isOutputProperty,
				itemType: itemType,
				itemTypeLocation: itemTypeLocation,
				propertyName: propertyName,
				propertyNameLocation: propertyNameLocation,
				taskParameter: taskParameter,
				taskParameterLocation: taskParameterLocation);
		}
		
		public virtual ProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectTargetElement that = this as ProjectTargetElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTargetElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!afterTargets.IsDefined || afterTargets.Value == that.AfterTargets) && 
				    (!afterTargetsLocation.IsDefined || afterTargetsLocation.Value == that.AfterTargetsLocation) && 
				    (!beforeTargets.IsDefined || beforeTargets.Value == that.BeforeTargets) && 
				    (!beforeTargetsLocation.IsDefined || beforeTargetsLocation.Value == that.BeforeTargetsLocation) && 
				    (!dependsOnTargets.IsDefined || dependsOnTargets.Value == that.DependsOnTargets) && 
				    (!dependsOnTargetsLocation.IsDefined || dependsOnTargetsLocation.Value == that.DependsOnTargetsLocation) && 
				    (!inputs.IsDefined || inputs.Value == that.Inputs) && 
				    (!inputsLocation.IsDefined || inputsLocation.Value == that.InputsLocation) && 
				    (!keepDuplicateOutputs.IsDefined || keepDuplicateOutputs.Value == that.KeepDuplicateOutputs) && 
				    (!keepDuplicateOutputsLocation.IsDefined || keepDuplicateOutputsLocation.Value == that.KeepDuplicateOutputsLocation) && 
				    (!name.IsDefined || name.Value == that.Name) && 
				    (!nameLocation.IsDefined || nameLocation.Value == that.NameLocation) && 
				    (!outputs.IsDefined || outputs.Value == that.Outputs) && 
				    (!outputsLocation.IsDefined || outputsLocation.Value == that.OutputsLocation) && 
				    (!returns.IsDefined || returns.Value == that.Returns) && 
				    (!returnsLocation.IsDefined || returnsLocation.Value == that.ReturnsLocation)) {
					return that;
				}
			}
		
			return ProjectTargetElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				afterTargets: afterTargets,
				afterTargetsLocation: afterTargetsLocation,
				beforeTargets: beforeTargets,
				beforeTargetsLocation: beforeTargetsLocation,
				dependsOnTargets: dependsOnTargets,
				dependsOnTargetsLocation: dependsOnTargetsLocation,
				inputs: inputs,
				inputsLocation: inputsLocation,
				keepDuplicateOutputs: keepDuplicateOutputs,
				keepDuplicateOutputsLocation: keepDuplicateOutputsLocation,
				name: name,
				nameLocation: nameLocation,
				outputs: outputs,
				outputsLocation: outputsLocation,
				returns: returns,
				returnsLocation: returnsLocation);
		}
		
		public virtual ProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTaskElement that = this as ProjectTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTaskElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!continueOnError.IsDefined || continueOnError.Value == that.ContinueOnError) && 
				    (!continueOnErrorLocation.IsDefined || continueOnErrorLocation.Value == that.ContinueOnErrorLocation) && 
				    (!mSBuildArchitecture.IsDefined || mSBuildArchitecture.Value == that.MSBuildArchitecture) && 
				    (!mSBuildArchitectureLocation.IsDefined || mSBuildArchitectureLocation.Value == that.MSBuildArchitectureLocation) && 
				    (!mSBuildRuntime.IsDefined || mSBuildRuntime.Value == that.MSBuildRuntime) && 
				    (!mSBuildRuntimeLocation.IsDefined || mSBuildRuntimeLocation.Value == that.MSBuildRuntimeLocation) && 
				    (!name.IsDefined || name.Value == that.Name)) {
					return that;
				}
			}
		
			return ProjectTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				continueOnError: continueOnError,
				continueOnErrorLocation: continueOnErrorLocation,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildArchitectureLocation: mSBuildArchitectureLocation,
				mSBuildRuntime: mSBuildRuntime,
				mSBuildRuntimeLocation: mSBuildRuntimeLocation,
				name: name);
		}
		
		public virtual ProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectUsingTaskBodyElement that = this as ProjectUsingTaskBodyElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskBodyElement))) {
				if ((!evaluate.IsDefined || evaluate.Value == that.Evaluate) && 
				    (!evaluateLocation.IsDefined || evaluateLocation.Value == that.EvaluateLocation) && 
				    (!taskBody.IsDefined || taskBody.Value == that.TaskBody)) {
					return that;
				}
			}
		
			return ProjectUsingTaskBodyElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				evaluate: evaluate,
				evaluateLocation: evaluateLocation,
				taskBody: taskBody);
		}
		
		public virtual ProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectUsingTaskElement that = this as ProjectUsingTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!architecture.IsDefined || architecture.Value == that.Architecture) && 
				    (!architectureLocation.IsDefined || architectureLocation.Value == that.ArchitectureLocation) && 
				    (!assemblyFile.IsDefined || assemblyFile.Value == that.AssemblyFile) && 
				    (!assemblyFileLocation.IsDefined || assemblyFileLocation.Value == that.AssemblyFileLocation) && 
				    (!assemblyName.IsDefined || assemblyName.Value == that.AssemblyName) && 
				    (!assemblyNameLocation.IsDefined || assemblyNameLocation.Value == that.AssemblyNameLocation) && 
				    (!runtime.IsDefined || runtime.Value == that.Runtime) && 
				    (!runtimeLocation.IsDefined || runtimeLocation.Value == that.RuntimeLocation) && 
				    (!taskFactory.IsDefined || taskFactory.Value == that.TaskFactory) && 
				    (!taskFactoryLocation.IsDefined || taskFactoryLocation.Value == that.TaskFactoryLocation) && 
				    (!taskName.IsDefined || taskName.Value == that.TaskName) && 
				    (!taskNameLocation.IsDefined || taskNameLocation.Value == that.TaskNameLocation)) {
					return that;
				}
			}
		
			return ProjectUsingTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				architecture: architecture,
				architectureLocation: architectureLocation,
				assemblyFile: assemblyFile,
				assemblyFileLocation: assemblyFileLocation,
				assemblyName: assemblyName,
				assemblyNameLocation: assemblyNameLocation,
				runtime: runtime,
				runtimeLocation: runtimeLocation,
				taskFactory: taskFactory,
				taskFactoryLocation: taskFactoryLocation,
				taskName: taskName,
				taskNameLocation: taskNameLocation);
		}
		
		public virtual ProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectUsingTaskParameterElement that = this as ProjectUsingTaskParameterElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskParameterElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!output.IsDefined || output.Value == that.Output) && 
				    (!outputLocation.IsDefined || outputLocation.Value == that.OutputLocation) && 
				    (!parameterType.IsDefined || parameterType.Value == that.ParameterType) && 
				    (!parameterTypeLocation.IsDefined || parameterTypeLocation.Value == that.ParameterTypeLocation) && 
				    (!required.IsDefined || required.Value == that.Required) && 
				    (!requiredLocation.IsDefined || requiredLocation.Value == that.RequiredLocation)) {
					return that;
				}
			}
		
			return ProjectUsingTaskParameterElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				name: name,
				output: output,
				outputLocation: outputLocation,
				parameterType: parameterType,
				parameterTypeLocation: parameterTypeLocation,
				required: required,
				requiredLocation: requiredLocation);
		}
		
		public virtual UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			UsingTaskParameterGroupElement that = this as UsingTaskParameterGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(UsingTaskParameterGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return UsingTaskParameterGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String condition;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> conditionLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String label;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> labelLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> location;
		
			internal Builder(ProjectElement immutable) {
				this.immutable = immutable;
		
				this.condition = immutable.Condition;
				this.label = immutable.Label;
			}
		
			public System.String Condition {
				get {
					return this.condition;
				}
		
				set {
					this.condition = value;
				}
			}
		
			public ElementLocation.Builder ConditionLocation {
				get {
					if (!this.conditionLocation.IsDefined) {
						this.conditionLocation = this.immutable.conditionLocation != null ? this.immutable.conditionLocation.ToBuilder() : null;
					}
		
					return this.conditionLocation.Value;
				}
		
				set {
					this.conditionLocation = value;
				}
			}
		
			public System.String Label {
				get {
					return this.label;
				}
		
				set {
					this.label = value;
				}
			}
		
			public ElementLocation.Builder LabelLocation {
				get {
					if (!this.labelLocation.IsDefined) {
						this.labelLocation = this.immutable.labelLocation != null ? this.immutable.labelLocation.ToBuilder() : null;
					}
		
					return this.labelLocation.Value;
				}
		
				set {
					this.labelLocation = value;
				}
			}
		
			public ElementLocation.Builder Location {
				get {
					if (!this.location.IsDefined) {
						this.location = this.immutable.location != null ? this.immutable.location.ToBuilder() : null;
					}
		
					return this.location.Value;
				}
		
				set {
					this.location = value;
				}
			}
		
			public ProjectElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location));
			}
		}
	
		int IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public interface IProjectElementContainer : IProjectElement {
		System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; }
	}
	
	public abstract partial class ProjectElementContainer : ProjectElement, IProjectElementContainer, System.Collections.Generic.IEnumerable<ProjectElement>, IRecursiveParentWithOrderedChildren {
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectElement> children;
	
		/// <summary>Initializes a new instance of the ProjectElementContainer class.</summary>
		protected ProjectElementContainer(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>))
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.children = children;
			this.InitializeLookup(lookupTable);
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectElement> Children {
			get { return this.children; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectElementContainer WithCondition(System.String value) {
			return (ProjectElementContainer)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectElementContainer WithConditionLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectElementContainer WithLabel(System.String value) {
			return (ProjectElementContainer)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectElementContainer WithLabelLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectElementContainer WithLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public ProjectElementContainer WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			if (value == this.Children) {
				return this;
			}
		
			return this.With(children: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ProjectElementContainer AddChild(ProjectElement value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public ProjectElementContainer RemoveChild(ProjectElement value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElementContainer With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectElementContainer)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
	
		public System.Collections.Generic.IEnumerator<ProjectElement> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
		
		protected ProjectElement SyncImmediateChildToCurrentVersion(ProjectElement child) {
			ProjectElement currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public ProjectElementContainer AddDescendent(ProjectElement value, ProjectElementContainer parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public ProjectElementContainer RemoveDescendent(ProjectElement value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (ProjectElementContainer)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((ProjectElement)newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		public ProjectElementContainer ReplaceDescendent(ProjectElement current, ProjectElement replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (ProjectElementContainer)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		private System.Collections.Immutable.ImmutableStack<ProjectElement> ReplaceDescendent(System.Collections.Immutable.ImmutableStack<ProjectElement> spine, System.Collections.Immutable.ImmutableStack<ProjectElement> replacementStackTip, bool spineIncludesDeletedElement) {
			Debug.Assert(this == spine.Peek());
			var remainingSpine = spine.Pop();
			if (remainingSpine.IsEmpty || (spineIncludesDeletedElement && remainingSpine.Pop().IsEmpty)) {
				// This is the instance to be changed.
				return replacementStackTip;
			}
		
			System.Collections.Immutable.ImmutableStack<ProjectElement> newChildSpine;
			var child = remainingSpine.Peek();
			var recursiveChild = child as ProjectElementContainer;
			if (recursiveChild != null) {
				newChildSpine = recursiveChild.ReplaceDescendent(remainingSpine, replacementStackTip, spineIncludesDeletedElement);
			} else {
				Debug.Assert(remainingSpine.Pop().IsEmpty); // we should be at the tail of the stack, since we're at a leaf.
				Debug.Assert(this.Children.Contains(child));
				newChildSpine = replacementStackTip;
			}
		
			var newChildren = this.Children.Replace(child, newChildSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
			if (newSelf.lookupTable == lookupTableLazySentinal && this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = this.FixupLookupTable(ImmutableDeque.Create(newChildSpine), ImmutableDeque.Create(remainingSpine));
				newSelf.ValidateInternalIntegrityDebugOnly();
			}
		
			return newChildSpine.Push(newSelf);
		}
		
		/// <summary>
		/// Produces a fast lookup table based on an existing one, if this node has one, to account for an updated spine among its descendents.
		/// </summary>
		/// <param name="updatedSpine">
		/// The spine of this node's new descendents' instances that are created for this change.
		/// The head is an immediate child of the new instance for this node.
		/// The tail is the node that was added or replaced.
		/// </param>
		/// <param name="oldSpine">
		/// The spine of this node's descendents that have been changed in this delta.
		/// The head is an immediate child of this instance.
		/// The tail is the node that was removed or replaced.
		/// </param>
		/// <returns>An updated lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> FixupLookupTable(ImmutableObjectGraph.ImmutableDeque<ProjectElement> updatedSpine, ImmutableObjectGraph.ImmutableDeque<ProjectElement> oldSpine) {
			if (this.lookupTable == null || this.lookupTable == lookupTableLazySentinal) {
				// We don't already have a lookup table to base this on, so leave it to the new instance to lazily construct.
				return lookupTableLazySentinal;
			}
		
			if ((updatedSpine.IsEmpty && oldSpine.IsEmpty) ||
				(updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead(), oldSpine.PeekHead()))) {
				// No changes were actually made.
				return this.lookupTable;
			}
		
			var lookupTable = this.lookupTable.ToBuilder();
		
			// Classify the kind of change that has just occurred.
			var oldSpineTail = oldSpine.PeekTail();
			var newSpineTail = updatedSpine.PeekTail();
			ChangeKind changeKind;
			bool childrenChanged = false;
			if (updatedSpine.Count == oldSpine.Count) {
				changeKind = ChangeKind.Replaced;
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				var newSpineTailRecursive = newSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null || newSpineTailRecursive != null) {
					// Children have changed if either before or after type didn't have a children property,
					// or if both did, but the children actually changed.
					childrenChanged = oldSpineTailRecursive == null || newSpineTailRecursive == null
						|| !System.Object.ReferenceEquals(oldSpineTailRecursive.Children, newSpineTailRecursive.Children);
				}
			} else if (updatedSpine.Count > oldSpine.Count) {
				changeKind = ChangeKind.Added;
			} else // updatedSpine.Count < oldSpine.Count
			{
				changeKind = ChangeKind.Removed;
			}
		
			// Trim the lookup table of any entries for nodes that have been removed from the tree.
			if (childrenChanged || changeKind == ChangeKind.Removed) {
				// We need to remove all descendents of the old tail node.
				lookupTable.RemoveRange(oldSpineTail.GetSelfAndDescendents().Select(n => n.Identity));
			} else if (changeKind == ChangeKind.Replaced && oldSpineTail.Identity != newSpineTail.Identity) {
				// The identity of the node was changed during the replacement.  We must explicitly remove the old entry
				// from our lookup table in this case.
				lookupTable.Remove(oldSpineTail.Identity);
		
				// We also need to update any immediate children of the old spine tail
				// because the identity of their parent has changed.
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null) {
					foreach (var child in oldSpineTailRecursive) {
						lookupTable[child.Identity] = new System.Collections.Generic.KeyValuePair<ProjectElement, int>(child, newSpineTail.Identity);
					}
				}
			}
		
			// Update our lookup table so that it includes (updated) entries for every member of the spine itself.
			ProjectElement parent = this;
			foreach (var node in updatedSpine) {
				// Remove and add rather than use the Set method, since the old and new node are equal (in identity) therefore the map class will
				// assume no change is relevant and not apply the change.
				lookupTable.Remove(node.Identity);
				lookupTable.Add(node.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, int>(node, parent.Identity));
				parent = node;
			}
		
			// There may be children on the added node that we should include.
			if (childrenChanged || changeKind == ChangeKind.Added) {
				var recursiveParent = parent as ProjectElementContainer;
				if (recursiveParent != null) {
					recursiveParent.ContributeDescendentsToLookupTable(lookupTable);
				}
			}
		
			return lookupTable.ToImmutable();
		}
		
		/// <summary>
		/// Validates this node and all its descendents <em>only in DEBUG builds</em>.
		/// </summary>
		[Conditional("DEBUG")]
		private void ValidateInternalIntegrityDebugOnly() {
			this.ValidateInternalIntegrity();
		}
		
		/// <summary>
		/// Validates this node and all its descendents.
		/// </summary>
		protected internal void ValidateInternalIntegrity() {
			// Each node id appears at most once.
			var observedIdentities = new System.Collections.Generic.HashSet<int>();
			foreach (var node in this.GetSelfAndDescendents()) {
				if (!observedIdentities.Add(node.Identity)) {
					throw new RecursiveChildNotUniqueException(node.Identity);
				}
			}
		
			// The lookup table (if any) accurately describes the contents of this tree.
			if (this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// The table should have one entry for every *descendent* of this node (not this node itself).
				int expectedCount = this.GetSelfAndDescendents().Count() - 1;
				int actualCount = this.lookupTable.Count;
				if (actualCount != expectedCount) {
					throw new System.ApplicationException(string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expected {0} entries in lookup table but found {1}.", expectedCount, actualCount));
				}
		
				this.ValidateLookupTable(this.lookupTable);
			}
		}
		
		/// <summary>
		/// Validates that the contents of a lookup table are valid for all descendent nodes of this node.
		/// </summary>
		/// <param name="lookupTable">The lookup table being validated.</param>
		private void ValidateLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable) {
			const string ErrorString = "Lookup table integrity failure.";
		
			foreach (var child in this.Children) {
				var entry = lookupTable[child.Identity];
				if (!object.ReferenceEquals(entry.Key, child)) {
					throw new System.ApplicationException(ErrorString);
				}
		
				if (entry.Value != this.Identity) {
					throw new System.ApplicationException(ErrorString);
				}
		
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ValidateLookupTable(lookupTable);
				}
			}
		}
		
		private static readonly System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTableLazySentinal = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().Add(default(System.Int32), new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>());
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable;
		
		private int inefficiencyLoad;
		
		/// <summary>
		/// The maximum number of steps allowable for a search to be done among this node's children
		/// before a faster lookup table will be built.
		/// </summary>
		internal const int InefficiencyLoadThreshold = 16;
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> LookupTable {
			get {
				if (this.lookupTable == lookupTableLazySentinal) {
					this.lookupTable = this.CreateLookupTable();
					this.inefficiencyLoad = 1;
				}
		
				return this.lookupTable;
			}
		}
		
		private void InitializeLookup(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> priorLookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>)) {
			this.inefficiencyLoad = 1;
			if (priorLookupTable.IsDefined && priorLookupTable.Value != null) {
				this.lookupTable = priorLookupTable.Value;
			} else {
				if (this.children != null) {
					foreach (var child in this.children)
					{
						var recursiveChild = child as ProjectElementContainer;
						this.inefficiencyLoad += recursiveChild != null ? recursiveChild.inefficiencyLoad : 1;
					}
				}
		
				if (this.inefficiencyLoad > InefficiencyLoadThreshold) {
					this.inefficiencyLoad = 1;
					this.lookupTable = lookupTableLazySentinal;
				}
			}
		
			this.ValidateInternalIntegrityDebugOnly();
		}
		
		/// <summary>
		/// Creates the lookup table that will contain all this node's children.
		/// </summary>
		/// <returns>The lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> CreateLookupTable() {
			var table = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().ToBuilder();
			this.ContributeDescendentsToLookupTable(table);
			return table.ToImmutable();
		}
		
		/// <summary>
		/// Adds this node's children (recursively) to the lookup table.
		/// </summary>
		/// <param name="seedLookupTable">The lookup table to add entries to.</param>
		/// <returns>The new lookup table.</returns>
		private void ContributeDescendentsToLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>.Builder seedLookupTable)
		{
			foreach (var child in this.Children)
			{
				seedLookupTable.Add(child.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>(child, this.Identity));
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ContributeDescendentsToLookupTable(seedLookupTable);
				}
			}
		}
		
		public bool TryFind(System.Int32 identity, out ProjectElement value) {
			if (this.Identity.Equals(identity)) {
				value = this;
				return true;
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child and its descendents.
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						if (recursiveChild.TryFind(identity, out value)) {
							return true;
						}
					} else {
						if (child.Identity.Equals(identity)) {
							value = child;
							return true;
						}
					}
				}
			}
		
			value = null;
			return false;
		}
		
		public ProjectElement Find(System.Int32 identity) {
			ProjectElement result;
			if (this.TryFind(identity, out result)) {
				return result;
			}
		
			throw new System.Collections.Generic.KeyNotFoundException();
		}
		
		public bool TryFindImmediateChild(System.Int32 identity, out ProjectElement value) {
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue) && lookupValue.Value == this.Identity) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						value = child;
						return true;
					}
				}
			}
		
			value = null;
			return false;
		}
		
		/// <summary>Checks whether an object with the specified identity is among this object's descendents.</summary>
		public bool Contains(System.Int32 identity) {
			ProjectElement result;
			return this.TryFind(identity, out result) && result != this;
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ParentedRecursiveType<ProjectElementContainer, ProjectElement> GetParentedNode(System.Int32 identity) {
			if (this.Identity == identity) {
				return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this, null);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					var parentIdentity = lookupValue.Value;
					return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this.LookupTable[identity].Key, (ProjectElementContainer)this.Find(parentIdentity));
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(child, this);
					}
		
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						var childResult = recursiveChild.GetParentedNode(identity);
						if (childResult.Value != null) {
							return childResult;
						}
					} 
				}
			}
		
			return default(ParentedRecursiveType<ProjectElementContainer, ProjectElement>);
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ProjectElementContainer GetParent(ProjectElement descendent) {
			return this.GetParentedNode(descendent.Identity).Parent;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(System.Int32 descendent) {
			var emptySpine = System.Collections.Immutable.ImmutableStack.Create<ProjectElement>();
			if (this.Identity.Equals(descendent)) {
				return emptySpine.Push(this);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent, out lookupValue))
				{
					// Awesome.  We know the node the caller is looking for is a descendent of this node.
					// Now just string together all the nodes that connect this one with the sought one.
					var spine = emptySpine;
					do
					{
						spine = spine.Push(lookupValue.Key);
					}
					while (this.lookupTable.TryGetValue(lookupValue.Value, out lookupValue));
					return spine.Push(this);
				}
			} else {
				// We don't have an efficient lookup table for this node.  Aggressively search every child.
				var spine = emptySpine;
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						spine = recursiveChild.GetSpine(descendent);
					} else if (child.Identity.Equals(descendent)) {
						spine = spine.Push(child);
					}
		
					if (!spine.IsEmpty) {
						return spine.Push(this);
					}
				}
			}
		
			// The descendent is not in this sub-tree.
			return emptySpine;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(ProjectElement descendent) {
			return this.GetSpine(descendent.Identity);
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!toolsVersionLocation.IsDefined || toolsVersionLocation.Value == that.ToolsVersionLocation) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!defaultTargetsLocation.IsDefined || defaultTargetsLocation.Value == that.DefaultTargetsLocation) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!initialTargetsLocation.IsDefined || initialTargetsLocation.Value == that.InitialTargetsLocation) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty) && 
				    (!treatAsLocalPropertylocation.IsDefined || treatAsLocalPropertylocation.Value == that.TreatAsLocalPropertylocation)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public override ProjectRootElement ToProjectRootElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return base.ToProjectRootElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					toolsVersionLocation: toolsVersionLocation,
					defaultTargets: defaultTargets,
					defaultTargetsLocation: defaultTargetsLocation,
					initialTargets: initialTargets,
					initialTargetsLocation: initialTargetsLocation,
					treatAsLocalProperty: treatAsLocalProperty,
					treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				return that;
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectPropertyGroupElement ToProjectPropertyGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectPropertyGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectItemGroupElement ToProjectItemGroupElement() {
			ProjectItemGroupElement that = this as ProjectItemGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemGroupElement))) {
				return that;
			}
		
			return ProjectItemGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectItemGroupElement ToProjectItemGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectItemGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectChooseElement ToProjectChooseElement() {
			ProjectChooseElement that = this as ProjectChooseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectChooseElement))) {
				return that;
			}
		
			return ProjectChooseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectChooseElement ToProjectChooseElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectChooseElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectOtherwiseElement ToProjectOtherwiseElement() {
			ProjectOtherwiseElement that = this as ProjectOtherwiseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOtherwiseElement))) {
				return that;
			}
		
			return ProjectOtherwiseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectOtherwiseElement ToProjectOtherwiseElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectOtherwiseElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectWhenElement ToProjectWhenElement() {
			ProjectWhenElement that = this as ProjectWhenElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectWhenElement))) {
				return that;
			}
		
			return ProjectWhenElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectWhenElement ToProjectWhenElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectWhenElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectImportGroupElement ToProjectImportGroupElement() {
			ProjectImportGroupElement that = this as ProjectImportGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportGroupElement))) {
				return that;
			}
		
			return ProjectImportGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectImportGroupElement ToProjectImportGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectImportGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			ProjectItemDefinitionElement that = this as ProjectItemDefinitionElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionElement))) {
				if ((!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!metadata.IsDefined || metadata.Value == that.Metadata)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				itemType: itemType,
				metadata: metadata);
		}
		
		public override ProjectItemDefinitionElement ToProjectItemDefinitionElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			return base.ToProjectItemDefinitionElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					itemType: itemType,
					metadata: metadata);
		}
		
		public virtual ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			ProjectItemDefinitionGroupElement that = this as ProjectItemDefinitionGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionGroupElement))) {
				return that;
			}
		
			return ProjectItemDefinitionGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectItemDefinitionGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectTargetElement that = this as ProjectTargetElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTargetElement))) {
				if ((!afterTargets.IsDefined || afterTargets.Value == that.AfterTargets) && 
				    (!afterTargetsLocation.IsDefined || afterTargetsLocation.Value == that.AfterTargetsLocation) && 
				    (!beforeTargets.IsDefined || beforeTargets.Value == that.BeforeTargets) && 
				    (!beforeTargetsLocation.IsDefined || beforeTargetsLocation.Value == that.BeforeTargetsLocation) && 
				    (!dependsOnTargets.IsDefined || dependsOnTargets.Value == that.DependsOnTargets) && 
				    (!dependsOnTargetsLocation.IsDefined || dependsOnTargetsLocation.Value == that.DependsOnTargetsLocation) && 
				    (!inputs.IsDefined || inputs.Value == that.Inputs) && 
				    (!inputsLocation.IsDefined || inputsLocation.Value == that.InputsLocation) && 
				    (!keepDuplicateOutputs.IsDefined || keepDuplicateOutputs.Value == that.KeepDuplicateOutputs) && 
				    (!keepDuplicateOutputsLocation.IsDefined || keepDuplicateOutputsLocation.Value == that.KeepDuplicateOutputsLocation) && 
				    (!name.IsDefined || name.Value == that.Name) && 
				    (!nameLocation.IsDefined || nameLocation.Value == that.NameLocation) && 
				    (!outputs.IsDefined || outputs.Value == that.Outputs) && 
				    (!outputsLocation.IsDefined || outputsLocation.Value == that.OutputsLocation) && 
				    (!returns.IsDefined || returns.Value == that.Returns) && 
				    (!returnsLocation.IsDefined || returnsLocation.Value == that.ReturnsLocation)) {
					return that;
				}
			}
		
			return ProjectTargetElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				afterTargets: afterTargets,
				afterTargetsLocation: afterTargetsLocation,
				beforeTargets: beforeTargets,
				beforeTargetsLocation: beforeTargetsLocation,
				dependsOnTargets: dependsOnTargets,
				dependsOnTargetsLocation: dependsOnTargetsLocation,
				inputs: inputs,
				inputsLocation: inputsLocation,
				keepDuplicateOutputs: keepDuplicateOutputs,
				keepDuplicateOutputsLocation: keepDuplicateOutputsLocation,
				name: name,
				nameLocation: nameLocation,
				outputs: outputs,
				outputsLocation: outputsLocation,
				returns: returns,
				returnsLocation: returnsLocation);
		}
		
		public override ProjectTargetElement ToProjectTargetElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return base.ToProjectTargetElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					afterTargets: afterTargets,
					afterTargetsLocation: afterTargetsLocation,
					beforeTargets: beforeTargets,
					beforeTargetsLocation: beforeTargetsLocation,
					dependsOnTargets: dependsOnTargets,
					dependsOnTargetsLocation: dependsOnTargetsLocation,
					inputs: inputs,
					inputsLocation: inputsLocation,
					keepDuplicateOutputs: keepDuplicateOutputs,
					keepDuplicateOutputsLocation: keepDuplicateOutputsLocation,
					name: name,
					nameLocation: nameLocation,
					outputs: outputs,
					outputsLocation: outputsLocation,
					returns: returns,
					returnsLocation: returnsLocation);
		}
		
		public virtual ProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTaskElement that = this as ProjectTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTaskElement))) {
				if ((!continueOnError.IsDefined || continueOnError.Value == that.ContinueOnError) && 
				    (!continueOnErrorLocation.IsDefined || continueOnErrorLocation.Value == that.ContinueOnErrorLocation) && 
				    (!mSBuildArchitecture.IsDefined || mSBuildArchitecture.Value == that.MSBuildArchitecture) && 
				    (!mSBuildArchitectureLocation.IsDefined || mSBuildArchitectureLocation.Value == that.MSBuildArchitectureLocation) && 
				    (!mSBuildRuntime.IsDefined || mSBuildRuntime.Value == that.MSBuildRuntime) && 
				    (!mSBuildRuntimeLocation.IsDefined || mSBuildRuntimeLocation.Value == that.MSBuildRuntimeLocation) && 
				    (!name.IsDefined || name.Value == that.Name)) {
					return that;
				}
			}
		
			return ProjectTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				continueOnError: continueOnError,
				continueOnErrorLocation: continueOnErrorLocation,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildArchitectureLocation: mSBuildArchitectureLocation,
				mSBuildRuntime: mSBuildRuntime,
				mSBuildRuntimeLocation: mSBuildRuntimeLocation,
				name: name);
		}
		
		public override ProjectTaskElement ToProjectTaskElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectTaskElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					continueOnError: continueOnError,
					continueOnErrorLocation: continueOnErrorLocation,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildArchitectureLocation: mSBuildArchitectureLocation,
					mSBuildRuntime: mSBuildRuntime,
					mSBuildRuntimeLocation: mSBuildRuntimeLocation,
					name: name);
		}
		
		public virtual ProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectUsingTaskElement that = this as ProjectUsingTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskElement))) {
				if ((!architecture.IsDefined || architecture.Value == that.Architecture) && 
				    (!architectureLocation.IsDefined || architectureLocation.Value == that.ArchitectureLocation) && 
				    (!assemblyFile.IsDefined || assemblyFile.Value == that.AssemblyFile) && 
				    (!assemblyFileLocation.IsDefined || assemblyFileLocation.Value == that.AssemblyFileLocation) && 
				    (!assemblyName.IsDefined || assemblyName.Value == that.AssemblyName) && 
				    (!assemblyNameLocation.IsDefined || assemblyNameLocation.Value == that.AssemblyNameLocation) && 
				    (!runtime.IsDefined || runtime.Value == that.Runtime) && 
				    (!runtimeLocation.IsDefined || runtimeLocation.Value == that.RuntimeLocation) && 
				    (!taskFactory.IsDefined || taskFactory.Value == that.TaskFactory) && 
				    (!taskFactoryLocation.IsDefined || taskFactoryLocation.Value == that.TaskFactoryLocation) && 
				    (!taskName.IsDefined || taskName.Value == that.TaskName) && 
				    (!taskNameLocation.IsDefined || taskNameLocation.Value == that.TaskNameLocation)) {
					return that;
				}
			}
		
			return ProjectUsingTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				architecture: architecture,
				architectureLocation: architectureLocation,
				assemblyFile: assemblyFile,
				assemblyFileLocation: assemblyFileLocation,
				assemblyName: assemblyName,
				assemblyNameLocation: assemblyNameLocation,
				runtime: runtime,
				runtimeLocation: runtimeLocation,
				taskFactory: taskFactory,
				taskFactoryLocation: taskFactoryLocation,
				taskName: taskName,
				taskNameLocation: taskNameLocation);
		}
		
		public override ProjectUsingTaskElement ToProjectUsingTaskElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return base.ToProjectUsingTaskElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					architecture: architecture,
					architectureLocation: architectureLocation,
					assemblyFile: assemblyFile,
					assemblyFileLocation: assemblyFileLocation,
					assemblyName: assemblyName,
					assemblyNameLocation: assemblyNameLocation,
					runtime: runtime,
					runtimeLocation: runtimeLocation,
					taskFactory: taskFactory,
					taskFactoryLocation: taskFactoryLocation,
					taskName: taskName,
					taskNameLocation: taskNameLocation);
		}
		
		public virtual UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			UsingTaskParameterGroupElement that = this as UsingTaskParameterGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(UsingTaskParameterGroupElement))) {
				return that;
			}
		
			return UsingTaskParameterGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToUsingTaskParameterGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectElementContainer immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>.Builder> children;
		
			internal Builder(ProjectElementContainer immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectElement>.Builder Children {
				get {
					if (!this.children.IsDefined) {
						this.children = this.immutable.children != null ? this.immutable.children.ToBuilder() : null;
					}
		
					return this.children.Value;
				}
		
				set {
					this.children = value;
				}
			}
		
			public new ProjectElementContainer ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children));
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((ProjectElement)value);
		}
	}
	
	public interface IProjectRootElement : IProjectElementContainer {
		System.String FullPath { get; }
		System.Text.Encoding Encoding { get; }
		System.String ToolsVersion { get; }
		ElementLocation ToolsVersionLocation { get; }
		System.String DefaultTargets { get; }
		ElementLocation DefaultTargetsLocation { get; }
		System.String InitialTargets { get; }
		ElementLocation InitialTargetsLocation { get; }
		System.Boolean TreatAsLocalProperty { get; }
		ElementLocation TreatAsLocalPropertylocation { get; }
	}
	
	public partial class ProjectRootElement : ProjectElementContainer, IProjectRootElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectRootElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String fullPath;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Text.Encoding encoding;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String toolsVersion;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation toolsVersionLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String defaultTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation defaultTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String initialTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation initialTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean treatAsLocalProperty;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation treatAsLocalPropertylocation;
	
		/// <summary>Initializes a new instance of the ProjectRootElement class.</summary>
		protected ProjectRootElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String fullPath,
			System.Text.Encoding encoding,
			System.String toolsVersion,
			ElementLocation toolsVersionLocation,
			System.String defaultTargets,
			ElementLocation defaultTargetsLocation,
			System.String initialTargets,
			ElementLocation initialTargetsLocation,
			System.Boolean treatAsLocalProperty,
			ElementLocation treatAsLocalPropertylocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.fullPath = fullPath;
			this.encoding = encoding;
			this.toolsVersion = toolsVersion;
			this.toolsVersionLocation = toolsVersionLocation;
			this.defaultTargets = defaultTargets;
			this.defaultTargetsLocation = defaultTargetsLocation;
			this.initialTargets = initialTargets;
			this.initialTargetsLocation = initialTargetsLocation;
			this.treatAsLocalProperty = treatAsLocalProperty;
			this.treatAsLocalPropertylocation = treatAsLocalPropertylocation;
			this.Validate();
		}
	
		public static ProjectRootElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
				toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(DefaultInstance.ToolsVersionLocation)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
				defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(DefaultInstance.DefaultTargetsLocation)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
				initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(DefaultInstance.InitialTargetsLocation)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
				treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(DefaultInstance.TreatAsLocalPropertylocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String FullPath {
			get { return this.fullPath; }
		}
	
		public System.Text.Encoding Encoding {
			get { return this.encoding; }
		}
	
		public System.String ToolsVersion {
			get { return this.toolsVersion; }
		}
	
		public ElementLocation ToolsVersionLocation {
			get { return this.toolsVersionLocation; }
		}
	
		public System.String DefaultTargets {
			get { return this.defaultTargets; }
		}
	
		public ElementLocation DefaultTargetsLocation {
			get { return this.defaultTargetsLocation; }
		}
	
		public System.String InitialTargets {
			get { return this.initialTargets; }
		}
	
		public ElementLocation InitialTargetsLocation {
			get { return this.initialTargetsLocation; }
		}
	
		public System.Boolean TreatAsLocalProperty {
			get { return this.treatAsLocalProperty; }
		}
	
		public ElementLocation TreatAsLocalPropertylocation {
			get { return this.treatAsLocalPropertylocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectRootElement WithCondition(System.String value) {
			return (ProjectRootElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectRootElement WithConditionLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectRootElement WithLabel(System.String value) {
			return (ProjectRootElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectRootElement WithLabelLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectRootElement WithLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectRootElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectRootElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectRootElement AddChild(ProjectElement value) {
			return (ProjectRootElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectRootElement RemoveChild(ProjectElement value) {
			return (ProjectRootElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren() {
			return (ProjectRootElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the FullPath property set to the specified value.</summary>
		public ProjectRootElement WithFullPath(System.String value) {
			if (value == this.FullPath) {
				return this;
			}
		
			return this.With(fullPath: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Encoding property set to the specified value.</summary>
		public ProjectRootElement WithEncoding(System.Text.Encoding value) {
			if (value == this.Encoding) {
				return this;
			}
		
			return this.With(encoding: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ToolsVersion property set to the specified value.</summary>
		public ProjectRootElement WithToolsVersion(System.String value) {
			if (value == this.ToolsVersion) {
				return this;
			}
		
			return this.With(toolsVersion: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ToolsVersionLocation property set to the specified value.</summary>
		public ProjectRootElement WithToolsVersionLocation(ElementLocation value) {
			if (value == this.ToolsVersionLocation) {
				return this;
			}
		
			return this.With(toolsVersionLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DefaultTargets property set to the specified value.</summary>
		public ProjectRootElement WithDefaultTargets(System.String value) {
			if (value == this.DefaultTargets) {
				return this;
			}
		
			return this.With(defaultTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DefaultTargetsLocation property set to the specified value.</summary>
		public ProjectRootElement WithDefaultTargetsLocation(ElementLocation value) {
			if (value == this.DefaultTargetsLocation) {
				return this;
			}
		
			return this.With(defaultTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the InitialTargets property set to the specified value.</summary>
		public ProjectRootElement WithInitialTargets(System.String value) {
			if (value == this.InitialTargets) {
				return this;
			}
		
			return this.With(initialTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the InitialTargetsLocation property set to the specified value.</summary>
		public ProjectRootElement WithInitialTargetsLocation(ElementLocation value) {
			if (value == this.InitialTargetsLocation) {
				return this;
			}
		
			return this.With(initialTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TreatAsLocalProperty property set to the specified value.</summary>
		public ProjectRootElement WithTreatAsLocalProperty(System.Boolean value) {
			if (value == this.TreatAsLocalProperty) {
				return this;
			}
		
			return this.With(treatAsLocalProperty: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TreatAsLocalPropertylocation property set to the specified value.</summary>
		public ProjectRootElement WithTreatAsLocalPropertylocation(ElementLocation value) {
			if (value == this.TreatAsLocalPropertylocation) {
				return this;
			}
		
			return this.With(treatAsLocalPropertylocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectRootElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectRootElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectRootElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(this.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(this.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(this.ToolsVersion)),
				toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(this.ToolsVersionLocation)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(this.DefaultTargets)),
				defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(this.DefaultTargetsLocation)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(this.InitialTargets)),
				initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(this.InitialTargetsLocation)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty)),
				treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(this.TreatAsLocalPropertylocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectRootElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(fullPath.IsDefined && fullPath.Value != this.FullPath) || 
				(encoding.IsDefined && encoding.Value != this.Encoding) || 
				(toolsVersion.IsDefined && toolsVersion.Value != this.ToolsVersion) || 
				(toolsVersionLocation.IsDefined && toolsVersionLocation.Value != this.ToolsVersionLocation) || 
				(defaultTargets.IsDefined && defaultTargets.Value != this.DefaultTargets) || 
				(defaultTargetsLocation.IsDefined && defaultTargetsLocation.Value != this.DefaultTargetsLocation) || 
				(initialTargets.IsDefined && initialTargets.Value != this.InitialTargets) || 
				(initialTargetsLocation.IsDefined && initialTargetsLocation.Value != this.InitialTargetsLocation) || 
				(treatAsLocalProperty.IsDefined && treatAsLocalProperty.Value != this.TreatAsLocalProperty) || 
				(treatAsLocalPropertylocation.IsDefined && treatAsLocalPropertylocation.Value != this.TreatAsLocalPropertylocation)) {
				return new ProjectRootElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					fullPath: fullPath.GetValueOrDefault(this.FullPath),
					encoding: encoding.GetValueOrDefault(this.Encoding),
					toolsVersion: toolsVersion.GetValueOrDefault(this.ToolsVersion),
					toolsVersionLocation: toolsVersionLocation.GetValueOrDefault(this.ToolsVersionLocation),
					defaultTargets: defaultTargets.GetValueOrDefault(this.DefaultTargets),
					defaultTargetsLocation: defaultTargetsLocation.GetValueOrDefault(this.DefaultTargetsLocation),
					initialTargets: initialTargets.GetValueOrDefault(this.InitialTargets),
					initialTargetsLocation: initialTargetsLocation.GetValueOrDefault(this.InitialTargetsLocation),
					treatAsLocalProperty: treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty),
					treatAsLocalPropertylocation: treatAsLocalPropertylocation.GetValueOrDefault(this.TreatAsLocalPropertylocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectRootElement whose fields are initialized with default values.</summary>
		private static ProjectRootElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectRootElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.FullPath, 
				template.Encoding, 
				template.ToolsVersion, 
				template.ToolsVersionLocation, 
				template.DefaultTargets, 
				template.DefaultTargetsLocation, 
				template.InitialTargets, 
				template.InitialTargetsLocation, 
				template.TreatAsLocalProperty, 
				template.TreatAsLocalPropertylocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String FullPath { get; set; }
	
			internal System.Text.Encoding Encoding { get; set; }
	
			internal System.String ToolsVersion { get; set; }
	
			internal ElementLocation ToolsVersionLocation { get; set; }
	
			internal System.String DefaultTargets { get; set; }
	
			internal ElementLocation DefaultTargetsLocation { get; set; }
	
			internal System.String InitialTargets { get; set; }
	
			internal ElementLocation InitialTargetsLocation { get; set; }
	
			internal System.Boolean TreatAsLocalProperty { get; set; }
	
			internal ElementLocation TreatAsLocalPropertylocation { get; set; }
		}
		
		internal static ProjectRootElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
					encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
					toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
					toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(DefaultInstance.ToolsVersionLocation)),
					defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
					defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(DefaultInstance.DefaultTargetsLocation)),
					initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
					initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(DefaultInstance.InitialTargetsLocation)),
					treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
					treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(DefaultInstance.TreatAsLocalPropertylocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectRootElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String fullPath;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Text.Encoding encoding;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String toolsVersion;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> toolsVersionLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String defaultTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> defaultTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String initialTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> initialTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean treatAsLocalProperty;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> treatAsLocalPropertylocation;
		
			internal Builder(ProjectRootElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.fullPath = immutable.FullPath;
				this.encoding = immutable.Encoding;
				this.toolsVersion = immutable.ToolsVersion;
				this.defaultTargets = immutable.DefaultTargets;
				this.initialTargets = immutable.InitialTargets;
				this.treatAsLocalProperty = immutable.TreatAsLocalProperty;
			}
		
			public System.String FullPath {
				get {
					return this.fullPath;
				}
		
				set {
					this.fullPath = value;
				}
			}
		
			public System.Text.Encoding Encoding {
				get {
					return this.encoding;
				}
		
				set {
					this.encoding = value;
				}
			}
		
			public System.String ToolsVersion {
				get {
					return this.toolsVersion;
				}
		
				set {
					this.toolsVersion = value;
				}
			}
		
			public ElementLocation.Builder ToolsVersionLocation {
				get {
					if (!this.toolsVersionLocation.IsDefined) {
						this.toolsVersionLocation = this.immutable.toolsVersionLocation != null ? this.immutable.toolsVersionLocation.ToBuilder() : null;
					}
		
					return this.toolsVersionLocation.Value;
				}
		
				set {
					this.toolsVersionLocation = value;
				}
			}
		
			public System.String DefaultTargets {
				get {
					return this.defaultTargets;
				}
		
				set {
					this.defaultTargets = value;
				}
			}
		
			public ElementLocation.Builder DefaultTargetsLocation {
				get {
					if (!this.defaultTargetsLocation.IsDefined) {
						this.defaultTargetsLocation = this.immutable.defaultTargetsLocation != null ? this.immutable.defaultTargetsLocation.ToBuilder() : null;
					}
		
					return this.defaultTargetsLocation.Value;
				}
		
				set {
					this.defaultTargetsLocation = value;
				}
			}
		
			public System.String InitialTargets {
				get {
					return this.initialTargets;
				}
		
				set {
					this.initialTargets = value;
				}
			}
		
			public ElementLocation.Builder InitialTargetsLocation {
				get {
					if (!this.initialTargetsLocation.IsDefined) {
						this.initialTargetsLocation = this.immutable.initialTargetsLocation != null ? this.immutable.initialTargetsLocation.ToBuilder() : null;
					}
		
					return this.initialTargetsLocation.Value;
				}
		
				set {
					this.initialTargetsLocation = value;
				}
			}
		
			public System.Boolean TreatAsLocalProperty {
				get {
					return this.treatAsLocalProperty;
				}
		
				set {
					this.treatAsLocalProperty = value;
				}
			}
		
			public ElementLocation.Builder TreatAsLocalPropertylocation {
				get {
					if (!this.treatAsLocalPropertylocation.IsDefined) {
						this.treatAsLocalPropertylocation = this.immutable.treatAsLocalPropertylocation != null ? this.immutable.treatAsLocalPropertylocation.ToBuilder() : null;
					}
		
					return this.treatAsLocalPropertylocation.Value;
				}
		
				set {
					this.treatAsLocalPropertylocation = value;
				}
			}
		
			public new ProjectRootElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var toolsVersionLocation = this.toolsVersionLocation.IsDefined ? (this.toolsVersionLocation.Value != null ? this.toolsVersionLocation.Value.ToImmutable() : null) : this.immutable.ToolsVersionLocation;
				var defaultTargetsLocation = this.defaultTargetsLocation.IsDefined ? (this.defaultTargetsLocation.Value != null ? this.defaultTargetsLocation.Value.ToImmutable() : null) : this.immutable.DefaultTargetsLocation;
				var initialTargetsLocation = this.initialTargetsLocation.IsDefined ? (this.initialTargetsLocation.Value != null ? this.initialTargetsLocation.Value.ToImmutable() : null) : this.immutable.InitialTargetsLocation;
				var treatAsLocalPropertylocation = this.treatAsLocalPropertylocation.IsDefined ? (this.treatAsLocalPropertylocation.Value != null ? this.treatAsLocalPropertylocation.Value.ToImmutable() : null) : this.immutable.TreatAsLocalPropertylocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.FullPath),
					ImmutableObjectGraph.Optional.For(this.Encoding),
					ImmutableObjectGraph.Optional.For(this.ToolsVersion),
					ImmutableObjectGraph.Optional.For(toolsVersionLocation),
					ImmutableObjectGraph.Optional.For(this.DefaultTargets),
					ImmutableObjectGraph.Optional.For(defaultTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.InitialTargets),
					ImmutableObjectGraph.Optional.For(initialTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.TreatAsLocalProperty),
					ImmutableObjectGraph.Optional.For(treatAsLocalPropertylocation));
			}
		}
	}
	
	public interface IProjectPropertyGroupElement : IProjectElementContainer {
	}
	
	public partial class ProjectPropertyGroupElement : ProjectElementContainer, IProjectPropertyGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectPropertyGroupElement class.</summary>
		protected ProjectPropertyGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectPropertyGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithCondition(System.String value) {
			return (ProjectPropertyGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithConditionLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLabel(System.String value) {
			return (ProjectPropertyGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLabelLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectPropertyGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren() {
			return (ProjectPropertyGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectPropertyGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectPropertyGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyGroupElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectPropertyGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectPropertyGroupElement immutable;
		
			internal Builder(ProjectPropertyGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectPropertyGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectItemGroupElement : IProjectElementContainer {
	}
	
	public partial class ProjectItemGroupElement : ProjectElementContainer, IProjectItemGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectItemGroupElement class.</summary>
		protected ProjectItemGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectItemGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectItemGroupElement WithCondition(System.String value) {
			return (ProjectItemGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectItemGroupElement WithConditionLocation(ElementLocation value) {
			return (ProjectItemGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectItemGroupElement WithLabel(System.String value) {
			return (ProjectItemGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectItemGroupElement WithLabelLocation(ElementLocation value) {
			return (ProjectItemGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectItemGroupElement WithLocation(ElementLocation value) {
			return (ProjectItemGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectItemGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectItemGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemGroupElement AddChild(ProjectElement value) {
			return (ProjectItemGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChild(ProjectElement value) {
			return (ProjectItemGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren() {
			return (ProjectItemGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectItemGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectItemGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemGroupElement whose fields are initialized with default values.</summary>
		private static ProjectItemGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectItemGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemGroupElement immutable;
		
			internal Builder(ProjectItemGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectItemGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectChooseElement : IProjectElementContainer {
	}
	
	public partial class ProjectChooseElement : ProjectElementContainer, IProjectChooseElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectChooseElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectChooseElement class.</summary>
		protected ProjectChooseElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectChooseElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectChooseElement WithCondition(System.String value) {
			return (ProjectChooseElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectChooseElement WithConditionLocation(ElementLocation value) {
			return (ProjectChooseElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectChooseElement WithLabel(System.String value) {
			return (ProjectChooseElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectChooseElement WithLabelLocation(ElementLocation value) {
			return (ProjectChooseElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectChooseElement WithLocation(ElementLocation value) {
			return (ProjectChooseElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectChooseElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectChooseElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectChooseElement WithChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectChooseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectChooseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectChooseElement AddChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectChooseElement AddChild(ProjectElement value) {
			return (ProjectChooseElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectChooseElement RemoveChild(ProjectElement value) {
			return (ProjectChooseElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren() {
			return (ProjectChooseElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectChooseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectChooseElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectChooseElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectChooseElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectChooseElement whose fields are initialized with default values.</summary>
		private static ProjectChooseElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectChooseElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectChooseElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectChooseElement immutable;
		
			internal Builder(ProjectChooseElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectChooseElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectOtherwiseElement : IProjectElementContainer {
	}
	
	public partial class ProjectOtherwiseElement : ProjectElementContainer, IProjectOtherwiseElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOtherwiseElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectOtherwiseElement class.</summary>
		protected ProjectOtherwiseElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectOtherwiseElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithCondition(System.String value) {
			return (ProjectOtherwiseElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithConditionLocation(ElementLocation value) {
			return (ProjectOtherwiseElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithLabel(System.String value) {
			return (ProjectOtherwiseElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithLabelLocation(ElementLocation value) {
			return (ProjectOtherwiseElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithLocation(ElementLocation value) {
			return (ProjectOtherwiseElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectOtherwiseElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectOtherwiseElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectOtherwiseElement WithChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectOtherwiseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChild(ProjectElement value) {
			return (ProjectOtherwiseElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChild(ProjectElement value) {
			return (ProjectOtherwiseElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren() {
			return (ProjectOtherwiseElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOtherwiseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectOtherwiseElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOtherwiseElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectOtherwiseElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOtherwiseElement whose fields are initialized with default values.</summary>
		private static ProjectOtherwiseElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOtherwiseElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectOtherwiseElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectOtherwiseElement immutable;
		
			internal Builder(ProjectOtherwiseElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectOtherwiseElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectWhenElement : IProjectElementContainer {
	}
	
	public partial class ProjectWhenElement : ProjectElementContainer, IProjectWhenElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectWhenElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectWhenElement class.</summary>
		protected ProjectWhenElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectWhenElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectWhenElement WithCondition(System.String value) {
			return (ProjectWhenElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectWhenElement WithConditionLocation(ElementLocation value) {
			return (ProjectWhenElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectWhenElement WithLabel(System.String value) {
			return (ProjectWhenElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectWhenElement WithLabelLocation(ElementLocation value) {
			return (ProjectWhenElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectWhenElement WithLocation(ElementLocation value) {
			return (ProjectWhenElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectWhenElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectWhenElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectWhenElement WithChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectWhenElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectWhenElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectWhenElement AddChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectWhenElement AddChild(ProjectElement value) {
			return (ProjectWhenElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectWhenElement RemoveChild(ProjectElement value) {
			return (ProjectWhenElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren() {
			return (ProjectWhenElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectWhenElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectWhenElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectWhenElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectWhenElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectWhenElement whose fields are initialized with default values.</summary>
		private static ProjectWhenElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectWhenElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectWhenElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectWhenElement immutable;
		
			internal Builder(ProjectWhenElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectWhenElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectPropertyElement : IProjectElement {
		System.String Name { get; }
		System.String Value { get; }
	}
	
	public partial class ProjectPropertyElement : ProjectElement, IProjectPropertyElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectPropertyElement class.</summary>
		protected ProjectPropertyElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String name,
			System.String value)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.name = name;
			this.value = value;
			this.Validate();
		}
	
		public static ProjectPropertyElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectPropertyElement WithCondition(System.String value) {
			return (ProjectPropertyElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectPropertyElement WithConditionLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectPropertyElement WithLabel(System.String value) {
			return (ProjectPropertyElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectPropertyElement WithLabelLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectPropertyElement WithLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectPropertyElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public ProjectPropertyElement WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectPropertyElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectPropertyElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectPropertyElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Name, 
				template.Value);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static ProjectPropertyElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectPropertyElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String value;
		
			internal Builder(ProjectPropertyElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.name = immutable.Name;
				this.value = immutable.Value;
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public System.String Value {
				get {
					return this.value;
				}
		
				set {
					this.value = value;
				}
			}
		
			public new ProjectPropertyElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(this.Value));
			}
		}
	}
	
	public interface IProjectItemElement : IProjectElement {
		System.String Exclude { get; }
		ElementLocation ExcludeLocation { get; }
		System.String Include { get; }
		ElementLocation IncludeLocation { get; }
		System.String ItemType { get; }
		System.String KeepDuplicates { get; }
		ElementLocation KeepDuplicatesLocation { get; }
		System.String KeepMetadata { get; }
		ElementLocation KeepMetadataLocation { get; }
		System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; }
		System.String Remove { get; }
		ElementLocation RemoveLocation { get; }
		System.String RemoveMetadata { get; }
		ElementLocation RemoveMetadataLocation { get; }
	}
	
	public partial class ProjectItemElement : ProjectElement, IProjectItemElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String exclude;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation excludeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String include;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation includeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepDuplicates;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation keepDuplicatesLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepMetadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation keepMetadataLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String remove;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation removeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String removeMetadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation removeMetadataLocation;
	
		/// <summary>Initializes a new instance of the ProjectItemElement class.</summary>
		protected ProjectItemElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String exclude,
			ElementLocation excludeLocation,
			System.String include,
			ElementLocation includeLocation,
			System.String itemType,
			System.String keepDuplicates,
			ElementLocation keepDuplicatesLocation,
			System.String keepMetadata,
			ElementLocation keepMetadataLocation,
			System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata,
			System.String remove,
			ElementLocation removeLocation,
			System.String removeMetadata,
			ElementLocation removeMetadataLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.exclude = exclude;
			this.excludeLocation = excludeLocation;
			this.include = include;
			this.includeLocation = includeLocation;
			this.itemType = itemType;
			this.keepDuplicates = keepDuplicates;
			this.keepDuplicatesLocation = keepDuplicatesLocation;
			this.keepMetadata = keepMetadata;
			this.keepMetadataLocation = keepMetadataLocation;
			this.metadata = metadata;
			this.remove = remove;
			this.removeLocation = removeLocation;
			this.removeMetadata = removeMetadata;
			this.removeMetadataLocation = removeMetadataLocation;
			this.Validate();
		}
	
		public static ProjectItemElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
				excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(DefaultInstance.ExcludeLocation)),
				include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
				includeLocation: Optional.For(includeLocation.GetValueOrDefault(DefaultInstance.IncludeLocation)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
				keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(DefaultInstance.KeepDuplicatesLocation)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
				keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(DefaultInstance.KeepMetadataLocation)),
				metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
				remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
				removeLocation: Optional.For(removeLocation.GetValueOrDefault(DefaultInstance.RemoveLocation)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
				removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(DefaultInstance.RemoveMetadataLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Exclude {
			get { return this.exclude; }
		}
	
		public ElementLocation ExcludeLocation {
			get { return this.excludeLocation; }
		}
	
		public System.String Include {
			get { return this.include; }
		}
	
		public ElementLocation IncludeLocation {
			get { return this.includeLocation; }
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public System.String KeepDuplicates {
			get { return this.keepDuplicates; }
		}
	
		public ElementLocation KeepDuplicatesLocation {
			get { return this.keepDuplicatesLocation; }
		}
	
		public System.String KeepMetadata {
			get { return this.keepMetadata; }
		}
	
		public ElementLocation KeepMetadataLocation {
			get { return this.keepMetadataLocation; }
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata {
			get { return this.metadata; }
		}
	
		public System.String Remove {
			get { return this.remove; }
		}
	
		public ElementLocation RemoveLocation {
			get { return this.removeLocation; }
		}
	
		public System.String RemoveMetadata {
			get { return this.removeMetadata; }
		}
	
		public ElementLocation RemoveMetadataLocation {
			get { return this.removeMetadataLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectItemElement WithCondition(System.String value) {
			return (ProjectItemElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectItemElement WithConditionLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectItemElement WithLabel(System.String value) {
			return (ProjectItemElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectItemElement WithLabelLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectItemElement WithLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Exclude property set to the specified value.</summary>
		public ProjectItemElement WithExclude(System.String value) {
			if (value == this.Exclude) {
				return this;
			}
		
			return this.With(exclude: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ExcludeLocation property set to the specified value.</summary>
		public ProjectItemElement WithExcludeLocation(ElementLocation value) {
			if (value == this.ExcludeLocation) {
				return this;
			}
		
			return this.With(excludeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Include property set to the specified value.</summary>
		public ProjectItemElement WithInclude(System.String value) {
			if (value == this.Include) {
				return this;
			}
		
			return this.With(include: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the IncludeLocation property set to the specified value.</summary>
		public ProjectItemElement WithIncludeLocation(ElementLocation value) {
			if (value == this.IncludeLocation) {
				return this;
			}
		
			return this.With(includeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ItemType property set to the specified value.</summary>
		public ProjectItemElement WithItemType(System.String value) {
			if (value == this.ItemType) {
				return this;
			}
		
			return this.With(itemType: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicates property set to the specified value.</summary>
		public ProjectItemElement WithKeepDuplicates(System.String value) {
			if (value == this.KeepDuplicates) {
				return this;
			}
		
			return this.With(keepDuplicates: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicatesLocation property set to the specified value.</summary>
		public ProjectItemElement WithKeepDuplicatesLocation(ElementLocation value) {
			if (value == this.KeepDuplicatesLocation) {
				return this;
			}
		
			return this.With(keepDuplicatesLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepMetadata property set to the specified value.</summary>
		public ProjectItemElement WithKeepMetadata(System.String value) {
			if (value == this.KeepMetadata) {
				return this;
			}
		
			return this.With(keepMetadata: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepMetadataLocation property set to the specified value.</summary>
		public ProjectItemElement WithKeepMetadataLocation(ElementLocation value) {
			if (value == this.KeepMetadataLocation) {
				return this;
			}
		
			return this.With(keepMetadataLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Metadata property set to the specified value.</summary>
		public ProjectItemElement WithMetadata(System.Collections.Immutable.ImmutableList<ProjectMetadataElement> value) {
			if (value == this.Metadata) {
				return this;
			}
		
			return this.With(metadata: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemElement WithMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemElement WithMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Remove(value));
		}
		
		/// <summary>Clears all elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements() {
			return this.With(metadata: this.Metadata.Clear());
		}
		
		
		/// <summary>Returns a new instance with the Remove property set to the specified value.</summary>
		public ProjectItemElement WithRemove(System.String value) {
			if (value == this.Remove) {
				return this;
			}
		
			return this.With(remove: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveLocation property set to the specified value.</summary>
		public ProjectItemElement WithRemoveLocation(ElementLocation value) {
			if (value == this.RemoveLocation) {
				return this;
			}
		
			return this.With(removeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveMetadata property set to the specified value.</summary>
		public ProjectItemElement WithRemoveMetadata(System.String value) {
			if (value == this.RemoveMetadata) {
				return this;
			}
		
			return this.With(removeMetadata: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveMetadataLocation property set to the specified value.</summary>
		public ProjectItemElement WithRemoveMetadataLocation(ElementLocation value) {
			if (value == this.RemoveMetadataLocation) {
				return this;
			}
		
			return this.With(removeMetadataLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectItemElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				exclude: exclude,
				excludeLocation: excludeLocation,
				include: include,
				includeLocation: includeLocation,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepDuplicatesLocation: keepDuplicatesLocation,
				keepMetadata: keepMetadata,
				keepMetadataLocation: keepMetadataLocation,
				metadata: metadata,
				remove: remove,
				removeLocation: removeLocation,
				removeMetadata: removeMetadata,
				removeMetadataLocation: removeMetadataLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				exclude: Optional.For(exclude.GetValueOrDefault(this.Exclude)),
				excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(this.ExcludeLocation)),
				include: Optional.For(include.GetValueOrDefault(this.Include)),
				includeLocation: Optional.For(includeLocation.GetValueOrDefault(this.IncludeLocation)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(this.KeepDuplicates)),
				keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(this.KeepDuplicatesLocation)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(this.KeepMetadata)),
				keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(this.KeepMetadataLocation)),
				metadata: Optional.For(metadata.GetValueOrDefault(this.Metadata)),
				remove: Optional.For(remove.GetValueOrDefault(this.Remove)),
				removeLocation: Optional.For(removeLocation.GetValueOrDefault(this.RemoveLocation)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(this.RemoveMetadata)),
				removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(this.RemoveMetadataLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(exclude.IsDefined && exclude.Value != this.Exclude) || 
				(excludeLocation.IsDefined && excludeLocation.Value != this.ExcludeLocation) || 
				(include.IsDefined && include.Value != this.Include) || 
				(includeLocation.IsDefined && includeLocation.Value != this.IncludeLocation) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(keepDuplicates.IsDefined && keepDuplicates.Value != this.KeepDuplicates) || 
				(keepDuplicatesLocation.IsDefined && keepDuplicatesLocation.Value != this.KeepDuplicatesLocation) || 
				(keepMetadata.IsDefined && keepMetadata.Value != this.KeepMetadata) || 
				(keepMetadataLocation.IsDefined && keepMetadataLocation.Value != this.KeepMetadataLocation) || 
				(metadata.IsDefined && metadata.Value != this.Metadata) || 
				(remove.IsDefined && remove.Value != this.Remove) || 
				(removeLocation.IsDefined && removeLocation.Value != this.RemoveLocation) || 
				(removeMetadata.IsDefined && removeMetadata.Value != this.RemoveMetadata) || 
				(removeMetadataLocation.IsDefined && removeMetadataLocation.Value != this.RemoveMetadataLocation)) {
				return new ProjectItemElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					exclude: exclude.GetValueOrDefault(this.Exclude),
					excludeLocation: excludeLocation.GetValueOrDefault(this.ExcludeLocation),
					include: include.GetValueOrDefault(this.Include),
					includeLocation: includeLocation.GetValueOrDefault(this.IncludeLocation),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					keepDuplicates: keepDuplicates.GetValueOrDefault(this.KeepDuplicates),
					keepDuplicatesLocation: keepDuplicatesLocation.GetValueOrDefault(this.KeepDuplicatesLocation),
					keepMetadata: keepMetadata.GetValueOrDefault(this.KeepMetadata),
					keepMetadataLocation: keepMetadataLocation.GetValueOrDefault(this.KeepMetadataLocation),
					metadata: metadata.GetValueOrDefault(this.Metadata),
					remove: remove.GetValueOrDefault(this.Remove),
					removeLocation: removeLocation.GetValueOrDefault(this.RemoveLocation),
					removeMetadata: removeMetadata.GetValueOrDefault(this.RemoveMetadata),
					removeMetadataLocation: removeMetadataLocation.GetValueOrDefault(this.RemoveMetadataLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemElement whose fields are initialized with default values.</summary>
		private static ProjectItemElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Exclude, 
				template.ExcludeLocation, 
				template.Include, 
				template.IncludeLocation, 
				template.ItemType, 
				template.KeepDuplicates, 
				template.KeepDuplicatesLocation, 
				template.KeepMetadata, 
				template.KeepMetadataLocation, 
				template.Metadata, 
				template.Remove, 
				template.RemoveLocation, 
				template.RemoveMetadata, 
				template.RemoveMetadataLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Exclude { get; set; }
	
			internal ElementLocation ExcludeLocation { get; set; }
	
			internal System.String Include { get; set; }
	
			internal ElementLocation IncludeLocation { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal System.String KeepDuplicates { get; set; }
	
			internal ElementLocation KeepDuplicatesLocation { get; set; }
	
			internal System.String KeepMetadata { get; set; }
	
			internal ElementLocation KeepMetadataLocation { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; set; }
	
			internal System.String Remove { get; set; }
	
			internal ElementLocation RemoveLocation { get; set; }
	
			internal System.String RemoveMetadata { get; set; }
	
			internal ElementLocation RemoveMetadataLocation { get; set; }
		}
		
		internal static ProjectItemElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
				ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
					excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(DefaultInstance.ExcludeLocation)),
					include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
					includeLocation: Optional.For(includeLocation.GetValueOrDefault(DefaultInstance.IncludeLocation)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
					keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(DefaultInstance.KeepDuplicatesLocation)),
					keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
					keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(DefaultInstance.KeepMetadataLocation)),
					metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
					remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
					removeLocation: Optional.For(removeLocation.GetValueOrDefault(DefaultInstance.RemoveLocation)),
					removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
					removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(DefaultInstance.RemoveMetadataLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String exclude;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> excludeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String include;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> includeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String itemType;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String keepDuplicates;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> keepDuplicatesLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String keepMetadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> keepMetadataLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder> metadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String remove;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> removeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String removeMetadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> removeMetadataLocation;
		
			internal Builder(ProjectItemElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.exclude = immutable.Exclude;
				this.include = immutable.Include;
				this.itemType = immutable.ItemType;
				this.keepDuplicates = immutable.KeepDuplicates;
				this.keepMetadata = immutable.KeepMetadata;
				this.remove = immutable.Remove;
				this.removeMetadata = immutable.RemoveMetadata;
			}
		
			public System.String Exclude {
				get {
					return this.exclude;
				}
		
				set {
					this.exclude = value;
				}
			}
		
			public ElementLocation.Builder ExcludeLocation {
				get {
					if (!this.excludeLocation.IsDefined) {
						this.excludeLocation = this.immutable.excludeLocation != null ? this.immutable.excludeLocation.ToBuilder() : null;
					}
		
					return this.excludeLocation.Value;
				}
		
				set {
					this.excludeLocation = value;
				}
			}
		
			public System.String Include {
				get {
					return this.include;
				}
		
				set {
					this.include = value;
				}
			}
		
			public ElementLocation.Builder IncludeLocation {
				get {
					if (!this.includeLocation.IsDefined) {
						this.includeLocation = this.immutable.includeLocation != null ? this.immutable.includeLocation.ToBuilder() : null;
					}
		
					return this.includeLocation.Value;
				}
		
				set {
					this.includeLocation = value;
				}
			}
		
			public System.String ItemType {
				get {
					return this.itemType;
				}
		
				set {
					this.itemType = value;
				}
			}
		
			public System.String KeepDuplicates {
				get {
					return this.keepDuplicates;
				}
		
				set {
					this.keepDuplicates = value;
				}
			}
		
			public ElementLocation.Builder KeepDuplicatesLocation {
				get {
					if (!this.keepDuplicatesLocation.IsDefined) {
						this.keepDuplicatesLocation = this.immutable.keepDuplicatesLocation != null ? this.immutable.keepDuplicatesLocation.ToBuilder() : null;
					}
		
					return this.keepDuplicatesLocation.Value;
				}
		
				set {
					this.keepDuplicatesLocation = value;
				}
			}
		
			public System.String KeepMetadata {
				get {
					return this.keepMetadata;
				}
		
				set {
					this.keepMetadata = value;
				}
			}
		
			public ElementLocation.Builder KeepMetadataLocation {
				get {
					if (!this.keepMetadataLocation.IsDefined) {
						this.keepMetadataLocation = this.immutable.keepMetadataLocation != null ? this.immutable.keepMetadataLocation.ToBuilder() : null;
					}
		
					return this.keepMetadataLocation.Value;
				}
		
				set {
					this.keepMetadataLocation = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder Metadata {
				get {
					if (!this.metadata.IsDefined) {
						this.metadata = this.immutable.metadata != null ? this.immutable.metadata.ToBuilder() : null;
					}
		
					return this.metadata.Value;
				}
		
				set {
					this.metadata = value;
				}
			}
		
			public System.String Remove {
				get {
					return this.remove;
				}
		
				set {
					this.remove = value;
				}
			}
		
			public ElementLocation.Builder RemoveLocation {
				get {
					if (!this.removeLocation.IsDefined) {
						this.removeLocation = this.immutable.removeLocation != null ? this.immutable.removeLocation.ToBuilder() : null;
					}
		
					return this.removeLocation.Value;
				}
		
				set {
					this.removeLocation = value;
				}
			}
		
			public System.String RemoveMetadata {
				get {
					return this.removeMetadata;
				}
		
				set {
					this.removeMetadata = value;
				}
			}
		
			public ElementLocation.Builder RemoveMetadataLocation {
				get {
					if (!this.removeMetadataLocation.IsDefined) {
						this.removeMetadataLocation = this.immutable.removeMetadataLocation != null ? this.immutable.removeMetadataLocation.ToBuilder() : null;
					}
		
					return this.removeMetadataLocation.Value;
				}
		
				set {
					this.removeMetadataLocation = value;
				}
			}
		
			public new ProjectItemElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var excludeLocation = this.excludeLocation.IsDefined ? (this.excludeLocation.Value != null ? this.excludeLocation.Value.ToImmutable() : null) : this.immutable.ExcludeLocation;
				var includeLocation = this.includeLocation.IsDefined ? (this.includeLocation.Value != null ? this.includeLocation.Value.ToImmutable() : null) : this.immutable.IncludeLocation;
				var keepDuplicatesLocation = this.keepDuplicatesLocation.IsDefined ? (this.keepDuplicatesLocation.Value != null ? this.keepDuplicatesLocation.Value.ToImmutable() : null) : this.immutable.KeepDuplicatesLocation;
				var keepMetadataLocation = this.keepMetadataLocation.IsDefined ? (this.keepMetadataLocation.Value != null ? this.keepMetadataLocation.Value.ToImmutable() : null) : this.immutable.KeepMetadataLocation;
				var metadata = this.metadata.IsDefined ? (this.metadata.Value != null ? this.metadata.Value.ToImmutable() : null) : this.immutable.Metadata;
				var removeLocation = this.removeLocation.IsDefined ? (this.removeLocation.Value != null ? this.removeLocation.Value.ToImmutable() : null) : this.immutable.RemoveLocation;
				var removeMetadataLocation = this.removeMetadataLocation.IsDefined ? (this.removeMetadataLocation.Value != null ? this.removeMetadataLocation.Value.ToImmutable() : null) : this.immutable.RemoveMetadataLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Exclude),
					ImmutableObjectGraph.Optional.For(excludeLocation),
					ImmutableObjectGraph.Optional.For(this.Include),
					ImmutableObjectGraph.Optional.For(includeLocation),
					ImmutableObjectGraph.Optional.For(this.ItemType),
					ImmutableObjectGraph.Optional.For(this.KeepDuplicates),
					ImmutableObjectGraph.Optional.For(keepDuplicatesLocation),
					ImmutableObjectGraph.Optional.For(this.KeepMetadata),
					ImmutableObjectGraph.Optional.For(keepMetadataLocation),
					ImmutableObjectGraph.Optional.For(metadata),
					ImmutableObjectGraph.Optional.For(this.Remove),
					ImmutableObjectGraph.Optional.For(removeLocation),
					ImmutableObjectGraph.Optional.For(this.RemoveMetadata),
					ImmutableObjectGraph.Optional.For(removeMetadataLocation));
			}
		}
	}
	
	public interface IProjectMetadataElement : IProjectElement {
		System.String Name { get; }
		System.String Value { get; }
	}
	
	public partial class ProjectMetadataElement : ProjectElement, IProjectMetadataElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectMetadataElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectMetadataElement class.</summary>
		protected ProjectMetadataElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String name,
			System.String value)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.name = name;
			this.value = value;
			this.Validate();
		}
	
		public static ProjectMetadataElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectMetadataElement WithCondition(System.String value) {
			return (ProjectMetadataElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectMetadataElement WithConditionLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectMetadataElement WithLabel(System.String value) {
			return (ProjectMetadataElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectMetadataElement WithLabelLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectMetadataElement WithLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectMetadataElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public ProjectMetadataElement WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectMetadataElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectMetadataElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectMetadataElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectMetadataElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectMetadataElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectMetadataElement whose fields are initialized with default values.</summary>
		private static ProjectMetadataElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectMetadataElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Name, 
				template.Value);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static ProjectMetadataElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectMetadataElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String value;
		
			internal Builder(ProjectMetadataElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.name = immutable.Name;
				this.value = immutable.Value;
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public System.String Value {
				get {
					return this.value;
				}
		
				set {
					this.value = value;
				}
			}
		
			public new ProjectMetadataElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(this.Value));
			}
		}
	}
	
	public interface IProjectExtensionsElement : IProjectElement {
		System.String Content { get; }
	}
	
	public partial class ProjectExtensionsElement : ProjectElement, IProjectExtensionsElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectExtensionsElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String content;
	
		/// <summary>Initializes a new instance of the ProjectExtensionsElement class.</summary>
		protected ProjectExtensionsElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String content)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.content = content;
			this.Validate();
		}
	
		public static ProjectExtensionsElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Content {
			get { return this.content; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectExtensionsElement WithCondition(System.String value) {
			return (ProjectExtensionsElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectExtensionsElement WithConditionLocation(ElementLocation value) {
			return (ProjectExtensionsElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectExtensionsElement WithLabel(System.String value) {
			return (ProjectExtensionsElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectExtensionsElement WithLabelLocation(ElementLocation value) {
			return (ProjectExtensionsElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectExtensionsElement WithLocation(ElementLocation value) {
			return (ProjectExtensionsElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Content property set to the specified value.</summary>
		public ProjectExtensionsElement WithContent(System.String value) {
			if (value == this.Content) {
				return this;
			}
		
			return this.With(content: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectExtensionsElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectExtensionsElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				content: content);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectExtensionsElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				content: Optional.For(content.GetValueOrDefault(this.Content)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectExtensionsElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(content.IsDefined && content.Value != this.Content)) {
				return new ProjectExtensionsElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					content: content.GetValueOrDefault(this.Content));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectExtensionsElement whose fields are initialized with default values.</summary>
		private static ProjectExtensionsElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectExtensionsElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Content);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Content { get; set; }
		}
		
		internal static ProjectExtensionsElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectExtensionsElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String content;
		
			internal Builder(ProjectExtensionsElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.content = immutable.Content;
			}
		
			public System.String Content {
				get {
					return this.content;
				}
		
				set {
					this.content = value;
				}
			}
		
			public new ProjectExtensionsElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Content));
			}
		}
	}
	
	public interface IProjectImportElement : IProjectElement {
		System.String Project { get; }
		ElementLocation ProjectLocation { get; }
	}
	
	public partial class ProjectImportElement : ProjectElement, IProjectImportElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectImportElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String project;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation projectLocation;
	
		/// <summary>Initializes a new instance of the ProjectImportElement class.</summary>
		protected ProjectImportElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String project,
			ElementLocation projectLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.project = project;
			this.projectLocation = projectLocation;
			this.Validate();
		}
	
		public static ProjectImportElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				project: Optional.For(project.GetValueOrDefault(DefaultInstance.Project)),
				projectLocation: Optional.For(projectLocation.GetValueOrDefault(DefaultInstance.ProjectLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Project {
			get { return this.project; }
		}
	
		public ElementLocation ProjectLocation {
			get { return this.projectLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectImportElement WithCondition(System.String value) {
			return (ProjectImportElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectImportElement WithConditionLocation(ElementLocation value) {
			return (ProjectImportElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectImportElement WithLabel(System.String value) {
			return (ProjectImportElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectImportElement WithLabelLocation(ElementLocation value) {
			return (ProjectImportElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectImportElement WithLocation(ElementLocation value) {
			return (ProjectImportElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Project property set to the specified value.</summary>
		public ProjectImportElement WithProject(System.String value) {
			if (value == this.Project) {
				return this;
			}
		
			return this.With(project: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ProjectLocation property set to the specified value.</summary>
		public ProjectImportElement WithProjectLocation(ElementLocation value) {
			if (value == this.ProjectLocation) {
				return this;
			}
		
			return this.With(projectLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectImportElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectImportElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				project: project,
				projectLocation: projectLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectImportElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				project: Optional.For(project.GetValueOrDefault(this.Project)),
				projectLocation: Optional.For(projectLocation.GetValueOrDefault(this.ProjectLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectImportElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(project.IsDefined && project.Value != this.Project) || 
				(projectLocation.IsDefined && projectLocation.Value != this.ProjectLocation)) {
				return new ProjectImportElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					project: project.GetValueOrDefault(this.Project),
					projectLocation: projectLocation.GetValueOrDefault(this.ProjectLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectImportElement whose fields are initialized with default values.</summary>
		private static ProjectImportElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectImportElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Project, 
				template.ProjectLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Project { get; set; }
	
			internal ElementLocation ProjectLocation { get; set; }
		}
		
		internal static ProjectImportElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> projectLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					project: Optional.For(project.GetValueOrDefault(DefaultInstance.Project)),
					projectLocation: Optional.For(projectLocation.GetValueOrDefault(DefaultInstance.ProjectLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectImportElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String project;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> projectLocation;
		
			internal Builder(ProjectImportElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.project = immutable.Project;
			}
		
			public System.String Project {
				get {
					return this.project;
				}
		
				set {
					this.project = value;
				}
			}
		
			public ElementLocation.Builder ProjectLocation {
				get {
					if (!this.projectLocation.IsDefined) {
						this.projectLocation = this.immutable.projectLocation != null ? this.immutable.projectLocation.ToBuilder() : null;
					}
		
					return this.projectLocation.Value;
				}
		
				set {
					this.projectLocation = value;
				}
			}
		
			public new ProjectImportElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var projectLocation = this.projectLocation.IsDefined ? (this.projectLocation.Value != null ? this.projectLocation.Value.ToImmutable() : null) : this.immutable.ProjectLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Project),
					ImmutableObjectGraph.Optional.For(projectLocation));
			}
		}
	}
	
	public interface IProjectImportGroupElement : IProjectElementContainer {
	}
	
	public partial class ProjectImportGroupElement : ProjectElementContainer, IProjectImportGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectImportGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectImportGroupElement class.</summary>
		protected ProjectImportGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectImportGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectImportGroupElement WithCondition(System.String value) {
			return (ProjectImportGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectImportGroupElement WithConditionLocation(ElementLocation value) {
			return (ProjectImportGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectImportGroupElement WithLabel(System.String value) {
			return (ProjectImportGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectImportGroupElement WithLabelLocation(ElementLocation value) {
			return (ProjectImportGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectImportGroupElement WithLocation(ElementLocation value) {
			return (ProjectImportGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectImportGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectImportGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectImportGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectImportGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectImportGroupElement AddChild(ProjectElement value) {
			return (ProjectImportGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChild(ProjectElement value) {
			return (ProjectImportGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren() {
			return (ProjectImportGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectImportGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectImportGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectImportGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectImportGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectImportGroupElement whose fields are initialized with default values.</summary>
		private static ProjectImportGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectImportGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectImportGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectImportGroupElement immutable;
		
			internal Builder(ProjectImportGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectImportGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectItemDefinitionElement : IProjectElementContainer {
		System.String ItemType { get; }
		System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; }
	}
	
	public partial class ProjectItemDefinitionElement : ProjectElementContainer, IProjectItemDefinitionElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemDefinitionElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata;
	
		/// <summary>Initializes a new instance of the ProjectItemDefinitionElement class.</summary>
		protected ProjectItemDefinitionElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String itemType,
			System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.itemType = itemType;
			this.metadata = metadata;
			this.Validate();
		}
	
		public static ProjectItemDefinitionElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata {
			get { return this.metadata; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithCondition(System.String value) {
			return (ProjectItemDefinitionElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithConditionLocation(ElementLocation value) {
			return (ProjectItemDefinitionElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithLabel(System.String value) {
			return (ProjectItemDefinitionElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithLabelLocation(ElementLocation value) {
			return (ProjectItemDefinitionElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithLocation(ElementLocation value) {
			return (ProjectItemDefinitionElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectItemDefinitionElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectItemDefinitionElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChild(ProjectElement value) {
			return (ProjectItemDefinitionElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChild(ProjectElement value) {
			return (ProjectItemDefinitionElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren() {
			return (ProjectItemDefinitionElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the ItemType property set to the specified value.</summary>
		public ProjectItemDefinitionElement WithItemType(System.String value) {
			if (value == this.ItemType) {
				return this;
			}
		
			return this.With(itemType: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Metadata property set to the specified value.</summary>
		public ProjectItemDefinitionElement WithMetadata(System.Collections.Immutable.ImmutableList<ProjectMetadataElement> value) {
			if (value == this.Metadata) {
				return this;
			}
		
			return this.With(metadata: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemDefinitionElement WithMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemDefinitionElement WithMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemDefinitionElement AddMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemDefinitionElement AddMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Metadata collection.</summary>
		public ProjectItemDefinitionElement AddMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemDefinitionElement RemoveMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemDefinitionElement RemoveMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Metadata collection.</summary>
		public ProjectItemDefinitionElement RemoveMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Remove(value));
		}
		
		/// <summary>Clears all elements from the Metadata collection.</summary>
		public ProjectItemDefinitionElement RemoveMetadataElements() {
			return this.With(metadata: this.Metadata.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemDefinitionElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			return (ProjectItemDefinitionElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				itemType: itemType,
				metadata: metadata);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemDefinitionElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				metadata: Optional.For(metadata.GetValueOrDefault(this.Metadata)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemDefinitionElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(metadata.IsDefined && metadata.Value != this.Metadata)) {
				return new ProjectItemDefinitionElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					metadata: metadata.GetValueOrDefault(this.Metadata));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemDefinitionElement whose fields are initialized with default values.</summary>
		private static ProjectItemDefinitionElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemDefinitionElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.ItemType, 
				template.Metadata);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; set; }
		}
		
		internal static ProjectItemDefinitionElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemDefinitionElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String itemType;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder> metadata;
		
			internal Builder(ProjectItemDefinitionElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.itemType = immutable.ItemType;
			}
		
			public System.String ItemType {
				get {
					return this.itemType;
				}
		
				set {
					this.itemType = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder Metadata {
				get {
					if (!this.metadata.IsDefined) {
						this.metadata = this.immutable.metadata != null ? this.immutable.metadata.ToBuilder() : null;
					}
		
					return this.metadata.Value;
				}
		
				set {
					this.metadata = value;
				}
			}
		
			public new ProjectItemDefinitionElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var metadata = this.metadata.IsDefined ? (this.metadata.Value != null ? this.metadata.Value.ToImmutable() : null) : this.immutable.Metadata;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.ItemType),
					ImmutableObjectGraph.Optional.For(metadata));
			}
		}
	}
	
	public interface IProjectItemDefinitionGroupElement : IProjectElementContainer {
	}
	
	public partial class ProjectItemDefinitionGroupElement : ProjectElementContainer, IProjectItemDefinitionGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemDefinitionGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectItemDefinitionGroupElement class.</summary>
		protected ProjectItemDefinitionGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectItemDefinitionGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithCondition(System.String value) {
			return (ProjectItemDefinitionGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithConditionLocation(ElementLocation value) {
			return (ProjectItemDefinitionGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithLabel(System.String value) {
			return (ProjectItemDefinitionGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithLabelLocation(ElementLocation value) {
			return (ProjectItemDefinitionGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithLocation(ElementLocation value) {
			return (ProjectItemDefinitionGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectItemDefinitionGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectItemDefinitionGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChild(ProjectElement value) {
			return (ProjectItemDefinitionGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChild(ProjectElement value) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren() {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemDefinitionGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectItemDefinitionGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemDefinitionGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectItemDefinitionGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemDefinitionGroupElement whose fields are initialized with default values.</summary>
		private static ProjectItemDefinitionGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemDefinitionGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectItemDefinitionGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemDefinitionGroupElement immutable;
		
			internal Builder(ProjectItemDefinitionGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectItemDefinitionGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectOnErrorElement : IProjectElement {
	}
	
	public partial class ProjectOnErrorElement : ProjectElement, IProjectOnErrorElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOnErrorElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectOnErrorElement class.</summary>
		protected ProjectOnErrorElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.Validate();
		}
	
		public static ProjectOnErrorElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectOnErrorElement WithCondition(System.String value) {
			return (ProjectOnErrorElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectOnErrorElement WithConditionLocation(ElementLocation value) {
			return (ProjectOnErrorElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectOnErrorElement WithLabel(System.String value) {
			return (ProjectOnErrorElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectOnErrorElement WithLabelLocation(ElementLocation value) {
			return (ProjectOnErrorElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectOnErrorElement WithLocation(ElementLocation value) {
			return (ProjectOnErrorElement)base.WithLocation(value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOnErrorElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectOnErrorElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOnErrorElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location)) {
				return new ProjectOnErrorElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOnErrorElement whose fields are initialized with default values.</summary>
		private static ProjectOnErrorElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOnErrorElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
		}
		
		internal static ProjectOnErrorElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectOnErrorElement immutable;
		
			internal Builder(ProjectOnErrorElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectOnErrorElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectOutputElement : IProjectElement {
		System.Boolean IsOutputItem { get; }
		System.Boolean IsOutputProperty { get; }
		System.String ItemType { get; }
		ElementLocation ItemTypeLocation { get; }
		System.String PropertyName { get; }
		ElementLocation PropertyNameLocation { get; }
		System.String TaskParameter { get; }
		ElementLocation TaskParameterLocation { get; }
	}
	
	public partial class ProjectOutputElement : ProjectElement, IProjectOutputElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOutputElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean isOutputItem;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean isOutputProperty;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation itemTypeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String propertyName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation propertyNameLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskParameter;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation taskParameterLocation;
	
		/// <summary>Initializes a new instance of the ProjectOutputElement class.</summary>
		protected ProjectOutputElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Boolean isOutputItem,
			System.Boolean isOutputProperty,
			System.String itemType,
			ElementLocation itemTypeLocation,
			System.String propertyName,
			ElementLocation propertyNameLocation,
			System.String taskParameter,
			ElementLocation taskParameterLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.isOutputItem = isOutputItem;
			this.isOutputProperty = isOutputProperty;
			this.itemType = itemType;
			this.itemTypeLocation = itemTypeLocation;
			this.propertyName = propertyName;
			this.propertyNameLocation = propertyNameLocation;
			this.taskParameter = taskParameter;
			this.taskParameterLocation = taskParameterLocation;
			this.Validate();
		}
	
		public static ProjectOutputElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(DefaultInstance.IsOutputItem)),
				isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(DefaultInstance.IsOutputProperty)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				itemTypeLocation: Optional.For(itemTypeLocation.GetValueOrDefault(DefaultInstance.ItemTypeLocation)),
				propertyName: Optional.For(propertyName.GetValueOrDefault(DefaultInstance.PropertyName)),
				propertyNameLocation: Optional.For(propertyNameLocation.GetValueOrDefault(DefaultInstance.PropertyNameLocation)),
				taskParameter: Optional.For(taskParameter.GetValueOrDefault(DefaultInstance.TaskParameter)),
				taskParameterLocation: Optional.For(taskParameterLocation.GetValueOrDefault(DefaultInstance.TaskParameterLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Boolean IsOutputItem {
			get { return this.isOutputItem; }
		}
	
		public System.Boolean IsOutputProperty {
			get { return this.isOutputProperty; }
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public ElementLocation ItemTypeLocation {
			get { return this.itemTypeLocation; }
		}
	
		public System.String PropertyName {
			get { return this.propertyName; }
		}
	
		public ElementLocation PropertyNameLocation {
			get { return this.propertyNameLocation; }
		}
	
		public System.String TaskParameter {
			get { return this.taskParameter; }
		}
	
		public ElementLocation TaskParameterLocation {
			get { return this.taskParameterLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectOutputElement WithCondition(System.String value) {
			return (ProjectOutputElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectOutputElement WithConditionLocation(ElementLocation value) {
			return (ProjectOutputElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectOutputElement WithLabel(System.String value) {
			return (ProjectOutputElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectOutputElement WithLabelLocation(ElementLocation value) {
			return (ProjectOutputElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectOutputElement WithLocation(ElementLocation value) {
			return (ProjectOutputElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the IsOutputItem property set to the specified value.</summary>
		public ProjectOutputElement WithIsOutputItem(System.Boolean value) {
			if (value == this.IsOutputItem) {
				return this;
			}
		
			return this.With(isOutputItem: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the IsOutputProperty property set to the specified value.</summary>
		public ProjectOutputElement WithIsOutputProperty(System.Boolean value) {
			if (value == this.IsOutputProperty) {
				return this;
			}
		
			return this.With(isOutputProperty: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ItemType property set to the specified value.</summary>
		public ProjectOutputElement WithItemType(System.String value) {
			if (value == this.ItemType) {
				return this;
			}
		
			return this.With(itemType: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ItemTypeLocation property set to the specified value.</summary>
		public ProjectOutputElement WithItemTypeLocation(ElementLocation value) {
			if (value == this.ItemTypeLocation) {
				return this;
			}
		
			return this.With(itemTypeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the PropertyName property set to the specified value.</summary>
		public ProjectOutputElement WithPropertyName(System.String value) {
			if (value == this.PropertyName) {
				return this;
			}
		
			return this.With(propertyName: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the PropertyNameLocation property set to the specified value.</summary>
		public ProjectOutputElement WithPropertyNameLocation(ElementLocation value) {
			if (value == this.PropertyNameLocation) {
				return this;
			}
		
			return this.With(propertyNameLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskParameter property set to the specified value.</summary>
		public ProjectOutputElement WithTaskParameter(System.String value) {
			if (value == this.TaskParameter) {
				return this;
			}
		
			return this.With(taskParameter: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskParameterLocation property set to the specified value.</summary>
		public ProjectOutputElement WithTaskParameterLocation(ElementLocation value) {
			if (value == this.TaskParameterLocation) {
				return this;
			}
		
			return this.With(taskParameterLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOutputElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectOutputElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				isOutputItem: isOutputItem,
				isOutputProperty: isOutputProperty,
				itemType: itemType,
				itemTypeLocation: itemTypeLocation,
				propertyName: propertyName,
				propertyNameLocation: propertyNameLocation,
				taskParameter: taskParameter,
				taskParameterLocation: taskParameterLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectOutputElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(this.IsOutputItem)),
				isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(this.IsOutputProperty)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				itemTypeLocation: Optional.For(itemTypeLocation.GetValueOrDefault(this.ItemTypeLocation)),
				propertyName: Optional.For(propertyName.GetValueOrDefault(this.PropertyName)),
				propertyNameLocation: Optional.For(propertyNameLocation.GetValueOrDefault(this.PropertyNameLocation)),
				taskParameter: Optional.For(taskParameter.GetValueOrDefault(this.TaskParameter)),
				taskParameterLocation: Optional.For(taskParameterLocation.GetValueOrDefault(this.TaskParameterLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOutputElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(isOutputItem.IsDefined && isOutputItem.Value != this.IsOutputItem) || 
				(isOutputProperty.IsDefined && isOutputProperty.Value != this.IsOutputProperty) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(itemTypeLocation.IsDefined && itemTypeLocation.Value != this.ItemTypeLocation) || 
				(propertyName.IsDefined && propertyName.Value != this.PropertyName) || 
				(propertyNameLocation.IsDefined && propertyNameLocation.Value != this.PropertyNameLocation) || 
				(taskParameter.IsDefined && taskParameter.Value != this.TaskParameter) || 
				(taskParameterLocation.IsDefined && taskParameterLocation.Value != this.TaskParameterLocation)) {
				return new ProjectOutputElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					isOutputItem: isOutputItem.GetValueOrDefault(this.IsOutputItem),
					isOutputProperty: isOutputProperty.GetValueOrDefault(this.IsOutputProperty),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					itemTypeLocation: itemTypeLocation.GetValueOrDefault(this.ItemTypeLocation),
					propertyName: propertyName.GetValueOrDefault(this.PropertyName),
					propertyNameLocation: propertyNameLocation.GetValueOrDefault(this.PropertyNameLocation),
					taskParameter: taskParameter.GetValueOrDefault(this.TaskParameter),
					taskParameterLocation: taskParameterLocation.GetValueOrDefault(this.TaskParameterLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOutputElement whose fields are initialized with default values.</summary>
		private static ProjectOutputElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOutputElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.IsOutputItem, 
				template.IsOutputProperty, 
				template.ItemType, 
				template.ItemTypeLocation, 
				template.PropertyName, 
				template.PropertyNameLocation, 
				template.TaskParameter, 
				template.TaskParameterLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Boolean IsOutputItem { get; set; }
	
			internal System.Boolean IsOutputProperty { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal ElementLocation ItemTypeLocation { get; set; }
	
			internal System.String PropertyName { get; set; }
	
			internal ElementLocation PropertyNameLocation { get; set; }
	
			internal System.String TaskParameter { get; set; }
	
			internal ElementLocation TaskParameterLocation { get; set; }
		}
		
		internal static ProjectOutputElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> itemTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> propertyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> taskParameterLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(DefaultInstance.IsOutputItem)),
					isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(DefaultInstance.IsOutputProperty)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					itemTypeLocation: Optional.For(itemTypeLocation.GetValueOrDefault(DefaultInstance.ItemTypeLocation)),
					propertyName: Optional.For(propertyName.GetValueOrDefault(DefaultInstance.PropertyName)),
					propertyNameLocation: Optional.For(propertyNameLocation.GetValueOrDefault(DefaultInstance.PropertyNameLocation)),
					taskParameter: Optional.For(taskParameter.GetValueOrDefault(DefaultInstance.TaskParameter)),
					taskParameterLocation: Optional.For(taskParameterLocation.GetValueOrDefault(DefaultInstance.TaskParameterLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectOutputElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean isOutputItem;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean isOutputProperty;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String itemType;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> itemTypeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String propertyName;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> propertyNameLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String taskParameter;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> taskParameterLocation;
		
			internal Builder(ProjectOutputElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.isOutputItem = immutable.IsOutputItem;
				this.isOutputProperty = immutable.IsOutputProperty;
				this.itemType = immutable.ItemType;
				this.propertyName = immutable.PropertyName;
				this.taskParameter = immutable.TaskParameter;
			}
		
			public System.Boolean IsOutputItem {
				get {
					return this.isOutputItem;
				}
		
				set {
					this.isOutputItem = value;
				}
			}
		
			public System.Boolean IsOutputProperty {
				get {
					return this.isOutputProperty;
				}
		
				set {
					this.isOutputProperty = value;
				}
			}
		
			public System.String ItemType {
				get {
					return this.itemType;
				}
		
				set {
					this.itemType = value;
				}
			}
		
			public ElementLocation.Builder ItemTypeLocation {
				get {
					if (!this.itemTypeLocation.IsDefined) {
						this.itemTypeLocation = this.immutable.itemTypeLocation != null ? this.immutable.itemTypeLocation.ToBuilder() : null;
					}
		
					return this.itemTypeLocation.Value;
				}
		
				set {
					this.itemTypeLocation = value;
				}
			}
		
			public System.String PropertyName {
				get {
					return this.propertyName;
				}
		
				set {
					this.propertyName = value;
				}
			}
		
			public ElementLocation.Builder PropertyNameLocation {
				get {
					if (!this.propertyNameLocation.IsDefined) {
						this.propertyNameLocation = this.immutable.propertyNameLocation != null ? this.immutable.propertyNameLocation.ToBuilder() : null;
					}
		
					return this.propertyNameLocation.Value;
				}
		
				set {
					this.propertyNameLocation = value;
				}
			}
		
			public System.String TaskParameter {
				get {
					return this.taskParameter;
				}
		
				set {
					this.taskParameter = value;
				}
			}
		
			public ElementLocation.Builder TaskParameterLocation {
				get {
					if (!this.taskParameterLocation.IsDefined) {
						this.taskParameterLocation = this.immutable.taskParameterLocation != null ? this.immutable.taskParameterLocation.ToBuilder() : null;
					}
		
					return this.taskParameterLocation.Value;
				}
		
				set {
					this.taskParameterLocation = value;
				}
			}
		
			public new ProjectOutputElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var itemTypeLocation = this.itemTypeLocation.IsDefined ? (this.itemTypeLocation.Value != null ? this.itemTypeLocation.Value.ToImmutable() : null) : this.immutable.ItemTypeLocation;
				var propertyNameLocation = this.propertyNameLocation.IsDefined ? (this.propertyNameLocation.Value != null ? this.propertyNameLocation.Value.ToImmutable() : null) : this.immutable.PropertyNameLocation;
				var taskParameterLocation = this.taskParameterLocation.IsDefined ? (this.taskParameterLocation.Value != null ? this.taskParameterLocation.Value.ToImmutable() : null) : this.immutable.TaskParameterLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.IsOutputItem),
					ImmutableObjectGraph.Optional.For(this.IsOutputProperty),
					ImmutableObjectGraph.Optional.For(this.ItemType),
					ImmutableObjectGraph.Optional.For(itemTypeLocation),
					ImmutableObjectGraph.Optional.For(this.PropertyName),
					ImmutableObjectGraph.Optional.For(propertyNameLocation),
					ImmutableObjectGraph.Optional.For(this.TaskParameter),
					ImmutableObjectGraph.Optional.For(taskParameterLocation));
			}
		}
	}
	
	public interface IProjectTargetElement : IProjectElementContainer {
		System.String AfterTargets { get; }
		ElementLocation AfterTargetsLocation { get; }
		System.String BeforeTargets { get; }
		ElementLocation BeforeTargetsLocation { get; }
		System.String DependsOnTargets { get; }
		ElementLocation DependsOnTargetsLocation { get; }
		System.String Inputs { get; }
		ElementLocation InputsLocation { get; }
		System.String KeepDuplicateOutputs { get; }
		ElementLocation KeepDuplicateOutputsLocation { get; }
		System.String Name { get; }
		ElementLocation NameLocation { get; }
		System.String Outputs { get; }
		ElementLocation OutputsLocation { get; }
		System.String Returns { get; }
		ElementLocation ReturnsLocation { get; }
	}
	
	public partial class ProjectTargetElement : ProjectElementContainer, IProjectTargetElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectTargetElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String afterTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation afterTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String beforeTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation beforeTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String dependsOnTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation dependsOnTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String inputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation inputsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepDuplicateOutputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation keepDuplicateOutputsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation nameLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String outputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation outputsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String returns;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation returnsLocation;
	
		/// <summary>Initializes a new instance of the ProjectTargetElement class.</summary>
		protected ProjectTargetElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String afterTargets,
			ElementLocation afterTargetsLocation,
			System.String beforeTargets,
			ElementLocation beforeTargetsLocation,
			System.String dependsOnTargets,
			ElementLocation dependsOnTargetsLocation,
			System.String inputs,
			ElementLocation inputsLocation,
			System.String keepDuplicateOutputs,
			ElementLocation keepDuplicateOutputsLocation,
			System.String name,
			ElementLocation nameLocation,
			System.String outputs,
			ElementLocation outputsLocation,
			System.String returns,
			ElementLocation returnsLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.afterTargets = afterTargets;
			this.afterTargetsLocation = afterTargetsLocation;
			this.beforeTargets = beforeTargets;
			this.beforeTargetsLocation = beforeTargetsLocation;
			this.dependsOnTargets = dependsOnTargets;
			this.dependsOnTargetsLocation = dependsOnTargetsLocation;
			this.inputs = inputs;
			this.inputsLocation = inputsLocation;
			this.keepDuplicateOutputs = keepDuplicateOutputs;
			this.keepDuplicateOutputsLocation = keepDuplicateOutputsLocation;
			this.name = name;
			this.nameLocation = nameLocation;
			this.outputs = outputs;
			this.outputsLocation = outputsLocation;
			this.returns = returns;
			this.returnsLocation = returnsLocation;
			this.Validate();
		}
	
		public static ProjectTargetElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				afterTargets: Optional.For(afterTargets.GetValueOrDefault(DefaultInstance.AfterTargets)),
				afterTargetsLocation: Optional.For(afterTargetsLocation.GetValueOrDefault(DefaultInstance.AfterTargetsLocation)),
				beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(DefaultInstance.BeforeTargets)),
				beforeTargetsLocation: Optional.For(beforeTargetsLocation.GetValueOrDefault(DefaultInstance.BeforeTargetsLocation)),
				dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(DefaultInstance.DependsOnTargets)),
				dependsOnTargetsLocation: Optional.For(dependsOnTargetsLocation.GetValueOrDefault(DefaultInstance.DependsOnTargetsLocation)),
				inputs: Optional.For(inputs.GetValueOrDefault(DefaultInstance.Inputs)),
				inputsLocation: Optional.For(inputsLocation.GetValueOrDefault(DefaultInstance.InputsLocation)),
				keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputs)),
				keepDuplicateOutputsLocation: Optional.For(keepDuplicateOutputsLocation.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputsLocation)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				nameLocation: Optional.For(nameLocation.GetValueOrDefault(DefaultInstance.NameLocation)),
				outputs: Optional.For(outputs.GetValueOrDefault(DefaultInstance.Outputs)),
				outputsLocation: Optional.For(outputsLocation.GetValueOrDefault(DefaultInstance.OutputsLocation)),
				returns: Optional.For(returns.GetValueOrDefault(DefaultInstance.Returns)),
				returnsLocation: Optional.For(returnsLocation.GetValueOrDefault(DefaultInstance.ReturnsLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String AfterTargets {
			get { return this.afterTargets; }
		}
	
		public ElementLocation AfterTargetsLocation {
			get { return this.afterTargetsLocation; }
		}
	
		public System.String BeforeTargets {
			get { return this.beforeTargets; }
		}
	
		public ElementLocation BeforeTargetsLocation {
			get { return this.beforeTargetsLocation; }
		}
	
		public System.String DependsOnTargets {
			get { return this.dependsOnTargets; }
		}
	
		public ElementLocation DependsOnTargetsLocation {
			get { return this.dependsOnTargetsLocation; }
		}
	
		public System.String Inputs {
			get { return this.inputs; }
		}
	
		public ElementLocation InputsLocation {
			get { return this.inputsLocation; }
		}
	
		public System.String KeepDuplicateOutputs {
			get { return this.keepDuplicateOutputs; }
		}
	
		public ElementLocation KeepDuplicateOutputsLocation {
			get { return this.keepDuplicateOutputsLocation; }
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public ElementLocation NameLocation {
			get { return this.nameLocation; }
		}
	
		public System.String Outputs {
			get { return this.outputs; }
		}
	
		public ElementLocation OutputsLocation {
			get { return this.outputsLocation; }
		}
	
		public System.String Returns {
			get { return this.returns; }
		}
	
		public ElementLocation ReturnsLocation {
			get { return this.returnsLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectTargetElement WithCondition(System.String value) {
			return (ProjectTargetElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectTargetElement WithConditionLocation(ElementLocation value) {
			return (ProjectTargetElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectTargetElement WithLabel(System.String value) {
			return (ProjectTargetElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectTargetElement WithLabelLocation(ElementLocation value) {
			return (ProjectTargetElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectTargetElement WithLocation(ElementLocation value) {
			return (ProjectTargetElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectTargetElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectTargetElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTargetElement WithChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTargetElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTargetElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTargetElement AddChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectTargetElement AddChild(ProjectElement value) {
			return (ProjectTargetElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectTargetElement RemoveChild(ProjectElement value) {
			return (ProjectTargetElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren() {
			return (ProjectTargetElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the AfterTargets property set to the specified value.</summary>
		public ProjectTargetElement WithAfterTargets(System.String value) {
			if (value == this.AfterTargets) {
				return this;
			}
		
			return this.With(afterTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the AfterTargetsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithAfterTargetsLocation(ElementLocation value) {
			if (value == this.AfterTargetsLocation) {
				return this;
			}
		
			return this.With(afterTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the BeforeTargets property set to the specified value.</summary>
		public ProjectTargetElement WithBeforeTargets(System.String value) {
			if (value == this.BeforeTargets) {
				return this;
			}
		
			return this.With(beforeTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the BeforeTargetsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithBeforeTargetsLocation(ElementLocation value) {
			if (value == this.BeforeTargetsLocation) {
				return this;
			}
		
			return this.With(beforeTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DependsOnTargets property set to the specified value.</summary>
		public ProjectTargetElement WithDependsOnTargets(System.String value) {
			if (value == this.DependsOnTargets) {
				return this;
			}
		
			return this.With(dependsOnTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DependsOnTargetsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithDependsOnTargetsLocation(ElementLocation value) {
			if (value == this.DependsOnTargetsLocation) {
				return this;
			}
		
			return this.With(dependsOnTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Inputs property set to the specified value.</summary>
		public ProjectTargetElement WithInputs(System.String value) {
			if (value == this.Inputs) {
				return this;
			}
		
			return this.With(inputs: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the InputsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithInputsLocation(ElementLocation value) {
			if (value == this.InputsLocation) {
				return this;
			}
		
			return this.With(inputsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicateOutputs property set to the specified value.</summary>
		public ProjectTargetElement WithKeepDuplicateOutputs(System.String value) {
			if (value == this.KeepDuplicateOutputs) {
				return this;
			}
		
			return this.With(keepDuplicateOutputs: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicateOutputsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithKeepDuplicateOutputsLocation(ElementLocation value) {
			if (value == this.KeepDuplicateOutputsLocation) {
				return this;
			}
		
			return this.With(keepDuplicateOutputsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectTargetElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the NameLocation property set to the specified value.</summary>
		public ProjectTargetElement WithNameLocation(ElementLocation value) {
			if (value == this.NameLocation) {
				return this;
			}
		
			return this.With(nameLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Outputs property set to the specified value.</summary>
		public ProjectTargetElement WithOutputs(System.String value) {
			if (value == this.Outputs) {
				return this;
			}
		
			return this.With(outputs: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the OutputsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithOutputsLocation(ElementLocation value) {
			if (value == this.OutputsLocation) {
				return this;
			}
		
			return this.With(outputsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Returns property set to the specified value.</summary>
		public ProjectTargetElement WithReturns(System.String value) {
			if (value == this.Returns) {
				return this;
			}
		
			return this.With(returns: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ReturnsLocation property set to the specified value.</summary>
		public ProjectTargetElement WithReturnsLocation(ElementLocation value) {
			if (value == this.ReturnsLocation) {
				return this;
			}
		
			return this.With(returnsLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectTargetElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectTargetElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				afterTargets: afterTargets,
				afterTargetsLocation: afterTargetsLocation,
				beforeTargets: beforeTargets,
				beforeTargetsLocation: beforeTargetsLocation,
				dependsOnTargets: dependsOnTargets,
				dependsOnTargetsLocation: dependsOnTargetsLocation,
				inputs: inputs,
				inputsLocation: inputsLocation,
				keepDuplicateOutputs: keepDuplicateOutputs,
				keepDuplicateOutputsLocation: keepDuplicateOutputsLocation,
				name: name,
				nameLocation: nameLocation,
				outputs: outputs,
				outputsLocation: outputsLocation,
				returns: returns,
				returnsLocation: returnsLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectTargetElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				afterTargets: Optional.For(afterTargets.GetValueOrDefault(this.AfterTargets)),
				afterTargetsLocation: Optional.For(afterTargetsLocation.GetValueOrDefault(this.AfterTargetsLocation)),
				beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(this.BeforeTargets)),
				beforeTargetsLocation: Optional.For(beforeTargetsLocation.GetValueOrDefault(this.BeforeTargetsLocation)),
				dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(this.DependsOnTargets)),
				dependsOnTargetsLocation: Optional.For(dependsOnTargetsLocation.GetValueOrDefault(this.DependsOnTargetsLocation)),
				inputs: Optional.For(inputs.GetValueOrDefault(this.Inputs)),
				inputsLocation: Optional.For(inputsLocation.GetValueOrDefault(this.InputsLocation)),
				keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(this.KeepDuplicateOutputs)),
				keepDuplicateOutputsLocation: Optional.For(keepDuplicateOutputsLocation.GetValueOrDefault(this.KeepDuplicateOutputsLocation)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				nameLocation: Optional.For(nameLocation.GetValueOrDefault(this.NameLocation)),
				outputs: Optional.For(outputs.GetValueOrDefault(this.Outputs)),
				outputsLocation: Optional.For(outputsLocation.GetValueOrDefault(this.OutputsLocation)),
				returns: Optional.For(returns.GetValueOrDefault(this.Returns)),
				returnsLocation: Optional.For(returnsLocation.GetValueOrDefault(this.ReturnsLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectTargetElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(afterTargets.IsDefined && afterTargets.Value != this.AfterTargets) || 
				(afterTargetsLocation.IsDefined && afterTargetsLocation.Value != this.AfterTargetsLocation) || 
				(beforeTargets.IsDefined && beforeTargets.Value != this.BeforeTargets) || 
				(beforeTargetsLocation.IsDefined && beforeTargetsLocation.Value != this.BeforeTargetsLocation) || 
				(dependsOnTargets.IsDefined && dependsOnTargets.Value != this.DependsOnTargets) || 
				(dependsOnTargetsLocation.IsDefined && dependsOnTargetsLocation.Value != this.DependsOnTargetsLocation) || 
				(inputs.IsDefined && inputs.Value != this.Inputs) || 
				(inputsLocation.IsDefined && inputsLocation.Value != this.InputsLocation) || 
				(keepDuplicateOutputs.IsDefined && keepDuplicateOutputs.Value != this.KeepDuplicateOutputs) || 
				(keepDuplicateOutputsLocation.IsDefined && keepDuplicateOutputsLocation.Value != this.KeepDuplicateOutputsLocation) || 
				(name.IsDefined && name.Value != this.Name) || 
				(nameLocation.IsDefined && nameLocation.Value != this.NameLocation) || 
				(outputs.IsDefined && outputs.Value != this.Outputs) || 
				(outputsLocation.IsDefined && outputsLocation.Value != this.OutputsLocation) || 
				(returns.IsDefined && returns.Value != this.Returns) || 
				(returnsLocation.IsDefined && returnsLocation.Value != this.ReturnsLocation)) {
				return new ProjectTargetElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					afterTargets: afterTargets.GetValueOrDefault(this.AfterTargets),
					afterTargetsLocation: afterTargetsLocation.GetValueOrDefault(this.AfterTargetsLocation),
					beforeTargets: beforeTargets.GetValueOrDefault(this.BeforeTargets),
					beforeTargetsLocation: beforeTargetsLocation.GetValueOrDefault(this.BeforeTargetsLocation),
					dependsOnTargets: dependsOnTargets.GetValueOrDefault(this.DependsOnTargets),
					dependsOnTargetsLocation: dependsOnTargetsLocation.GetValueOrDefault(this.DependsOnTargetsLocation),
					inputs: inputs.GetValueOrDefault(this.Inputs),
					inputsLocation: inputsLocation.GetValueOrDefault(this.InputsLocation),
					keepDuplicateOutputs: keepDuplicateOutputs.GetValueOrDefault(this.KeepDuplicateOutputs),
					keepDuplicateOutputsLocation: keepDuplicateOutputsLocation.GetValueOrDefault(this.KeepDuplicateOutputsLocation),
					name: name.GetValueOrDefault(this.Name),
					nameLocation: nameLocation.GetValueOrDefault(this.NameLocation),
					outputs: outputs.GetValueOrDefault(this.Outputs),
					outputsLocation: outputsLocation.GetValueOrDefault(this.OutputsLocation),
					returns: returns.GetValueOrDefault(this.Returns),
					returnsLocation: returnsLocation.GetValueOrDefault(this.ReturnsLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectTargetElement whose fields are initialized with default values.</summary>
		private static ProjectTargetElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectTargetElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.AfterTargets, 
				template.AfterTargetsLocation, 
				template.BeforeTargets, 
				template.BeforeTargetsLocation, 
				template.DependsOnTargets, 
				template.DependsOnTargetsLocation, 
				template.Inputs, 
				template.InputsLocation, 
				template.KeepDuplicateOutputs, 
				template.KeepDuplicateOutputsLocation, 
				template.Name, 
				template.NameLocation, 
				template.Outputs, 
				template.OutputsLocation, 
				template.Returns, 
				template.ReturnsLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String AfterTargets { get; set; }
	
			internal ElementLocation AfterTargetsLocation { get; set; }
	
			internal System.String BeforeTargets { get; set; }
	
			internal ElementLocation BeforeTargetsLocation { get; set; }
	
			internal System.String DependsOnTargets { get; set; }
	
			internal ElementLocation DependsOnTargetsLocation { get; set; }
	
			internal System.String Inputs { get; set; }
	
			internal ElementLocation InputsLocation { get; set; }
	
			internal System.String KeepDuplicateOutputs { get; set; }
	
			internal ElementLocation KeepDuplicateOutputsLocation { get; set; }
	
			internal System.String Name { get; set; }
	
			internal ElementLocation NameLocation { get; set; }
	
			internal System.String Outputs { get; set; }
	
			internal ElementLocation OutputsLocation { get; set; }
	
			internal System.String Returns { get; set; }
	
			internal ElementLocation ReturnsLocation { get; set; }
		}
		
		internal static ProjectTargetElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> afterTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> beforeTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> dependsOnTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> inputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepDuplicateOutputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> nameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> outputsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> returnsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					afterTargets: Optional.For(afterTargets.GetValueOrDefault(DefaultInstance.AfterTargets)),
					afterTargetsLocation: Optional.For(afterTargetsLocation.GetValueOrDefault(DefaultInstance.AfterTargetsLocation)),
					beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(DefaultInstance.BeforeTargets)),
					beforeTargetsLocation: Optional.For(beforeTargetsLocation.GetValueOrDefault(DefaultInstance.BeforeTargetsLocation)),
					dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(DefaultInstance.DependsOnTargets)),
					dependsOnTargetsLocation: Optional.For(dependsOnTargetsLocation.GetValueOrDefault(DefaultInstance.DependsOnTargetsLocation)),
					inputs: Optional.For(inputs.GetValueOrDefault(DefaultInstance.Inputs)),
					inputsLocation: Optional.For(inputsLocation.GetValueOrDefault(DefaultInstance.InputsLocation)),
					keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputs)),
					keepDuplicateOutputsLocation: Optional.For(keepDuplicateOutputsLocation.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputsLocation)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					nameLocation: Optional.For(nameLocation.GetValueOrDefault(DefaultInstance.NameLocation)),
					outputs: Optional.For(outputs.GetValueOrDefault(DefaultInstance.Outputs)),
					outputsLocation: Optional.For(outputsLocation.GetValueOrDefault(DefaultInstance.OutputsLocation)),
					returns: Optional.For(returns.GetValueOrDefault(DefaultInstance.Returns)),
					returnsLocation: Optional.For(returnsLocation.GetValueOrDefault(DefaultInstance.ReturnsLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectTargetElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String afterTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> afterTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String beforeTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> beforeTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String dependsOnTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> dependsOnTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String inputs;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> inputsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String keepDuplicateOutputs;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> keepDuplicateOutputsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> nameLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String outputs;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> outputsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String returns;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> returnsLocation;
		
			internal Builder(ProjectTargetElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.afterTargets = immutable.AfterTargets;
				this.beforeTargets = immutable.BeforeTargets;
				this.dependsOnTargets = immutable.DependsOnTargets;
				this.inputs = immutable.Inputs;
				this.keepDuplicateOutputs = immutable.KeepDuplicateOutputs;
				this.name = immutable.Name;
				this.outputs = immutable.Outputs;
				this.returns = immutable.Returns;
			}
		
			public System.String AfterTargets {
				get {
					return this.afterTargets;
				}
		
				set {
					this.afterTargets = value;
				}
			}
		
			public ElementLocation.Builder AfterTargetsLocation {
				get {
					if (!this.afterTargetsLocation.IsDefined) {
						this.afterTargetsLocation = this.immutable.afterTargetsLocation != null ? this.immutable.afterTargetsLocation.ToBuilder() : null;
					}
		
					return this.afterTargetsLocation.Value;
				}
		
				set {
					this.afterTargetsLocation = value;
				}
			}
		
			public System.String BeforeTargets {
				get {
					return this.beforeTargets;
				}
		
				set {
					this.beforeTargets = value;
				}
			}
		
			public ElementLocation.Builder BeforeTargetsLocation {
				get {
					if (!this.beforeTargetsLocation.IsDefined) {
						this.beforeTargetsLocation = this.immutable.beforeTargetsLocation != null ? this.immutable.beforeTargetsLocation.ToBuilder() : null;
					}
		
					return this.beforeTargetsLocation.Value;
				}
		
				set {
					this.beforeTargetsLocation = value;
				}
			}
		
			public System.String DependsOnTargets {
				get {
					return this.dependsOnTargets;
				}
		
				set {
					this.dependsOnTargets = value;
				}
			}
		
			public ElementLocation.Builder DependsOnTargetsLocation {
				get {
					if (!this.dependsOnTargetsLocation.IsDefined) {
						this.dependsOnTargetsLocation = this.immutable.dependsOnTargetsLocation != null ? this.immutable.dependsOnTargetsLocation.ToBuilder() : null;
					}
		
					return this.dependsOnTargetsLocation.Value;
				}
		
				set {
					this.dependsOnTargetsLocation = value;
				}
			}
		
			public System.String Inputs {
				get {
					return this.inputs;
				}
		
				set {
					this.inputs = value;
				}
			}
		
			public ElementLocation.Builder InputsLocation {
				get {
					if (!this.inputsLocation.IsDefined) {
						this.inputsLocation = this.immutable.inputsLocation != null ? this.immutable.inputsLocation.ToBuilder() : null;
					}
		
					return this.inputsLocation.Value;
				}
		
				set {
					this.inputsLocation = value;
				}
			}
		
			public System.String KeepDuplicateOutputs {
				get {
					return this.keepDuplicateOutputs;
				}
		
				set {
					this.keepDuplicateOutputs = value;
				}
			}
		
			public ElementLocation.Builder KeepDuplicateOutputsLocation {
				get {
					if (!this.keepDuplicateOutputsLocation.IsDefined) {
						this.keepDuplicateOutputsLocation = this.immutable.keepDuplicateOutputsLocation != null ? this.immutable.keepDuplicateOutputsLocation.ToBuilder() : null;
					}
		
					return this.keepDuplicateOutputsLocation.Value;
				}
		
				set {
					this.keepDuplicateOutputsLocation = value;
				}
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public ElementLocation.Builder NameLocation {
				get {
					if (!this.nameLocation.IsDefined) {
						this.nameLocation = this.immutable.nameLocation != null ? this.immutable.nameLocation.ToBuilder() : null;
					}
		
					return this.nameLocation.Value;
				}
		
				set {
					this.nameLocation = value;
				}
			}
		
			public System.String Outputs {
				get {
					return this.outputs;
				}
		
				set {
					this.outputs = value;
				}
			}
		
			public ElementLocation.Builder OutputsLocation {
				get {
					if (!this.outputsLocation.IsDefined) {
						this.outputsLocation = this.immutable.outputsLocation != null ? this.immutable.outputsLocation.ToBuilder() : null;
					}
		
					return this.outputsLocation.Value;
				}
		
				set {
					this.outputsLocation = value;
				}
			}
		
			public System.String Returns {
				get {
					return this.returns;
				}
		
				set {
					this.returns = value;
				}
			}
		
			public ElementLocation.Builder ReturnsLocation {
				get {
					if (!this.returnsLocation.IsDefined) {
						this.returnsLocation = this.immutable.returnsLocation != null ? this.immutable.returnsLocation.ToBuilder() : null;
					}
		
					return this.returnsLocation.Value;
				}
		
				set {
					this.returnsLocation = value;
				}
			}
		
			public new ProjectTargetElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var afterTargetsLocation = this.afterTargetsLocation.IsDefined ? (this.afterTargetsLocation.Value != null ? this.afterTargetsLocation.Value.ToImmutable() : null) : this.immutable.AfterTargetsLocation;
				var beforeTargetsLocation = this.beforeTargetsLocation.IsDefined ? (this.beforeTargetsLocation.Value != null ? this.beforeTargetsLocation.Value.ToImmutable() : null) : this.immutable.BeforeTargetsLocation;
				var dependsOnTargetsLocation = this.dependsOnTargetsLocation.IsDefined ? (this.dependsOnTargetsLocation.Value != null ? this.dependsOnTargetsLocation.Value.ToImmutable() : null) : this.immutable.DependsOnTargetsLocation;
				var inputsLocation = this.inputsLocation.IsDefined ? (this.inputsLocation.Value != null ? this.inputsLocation.Value.ToImmutable() : null) : this.immutable.InputsLocation;
				var keepDuplicateOutputsLocation = this.keepDuplicateOutputsLocation.IsDefined ? (this.keepDuplicateOutputsLocation.Value != null ? this.keepDuplicateOutputsLocation.Value.ToImmutable() : null) : this.immutable.KeepDuplicateOutputsLocation;
				var nameLocation = this.nameLocation.IsDefined ? (this.nameLocation.Value != null ? this.nameLocation.Value.ToImmutable() : null) : this.immutable.NameLocation;
				var outputsLocation = this.outputsLocation.IsDefined ? (this.outputsLocation.Value != null ? this.outputsLocation.Value.ToImmutable() : null) : this.immutable.OutputsLocation;
				var returnsLocation = this.returnsLocation.IsDefined ? (this.returnsLocation.Value != null ? this.returnsLocation.Value.ToImmutable() : null) : this.immutable.ReturnsLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.AfterTargets),
					ImmutableObjectGraph.Optional.For(afterTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.BeforeTargets),
					ImmutableObjectGraph.Optional.For(beforeTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.DependsOnTargets),
					ImmutableObjectGraph.Optional.For(dependsOnTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.Inputs),
					ImmutableObjectGraph.Optional.For(inputsLocation),
					ImmutableObjectGraph.Optional.For(this.KeepDuplicateOutputs),
					ImmutableObjectGraph.Optional.For(keepDuplicateOutputsLocation),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(nameLocation),
					ImmutableObjectGraph.Optional.For(this.Outputs),
					ImmutableObjectGraph.Optional.For(outputsLocation),
					ImmutableObjectGraph.Optional.For(this.Returns),
					ImmutableObjectGraph.Optional.For(returnsLocation));
			}
		}
	}
	
	public interface IProjectTaskElement : IProjectElementContainer {
		System.String ContinueOnError { get; }
		ElementLocation ContinueOnErrorLocation { get; }
		System.String MSBuildArchitecture { get; }
		ElementLocation MSBuildArchitectureLocation { get; }
		System.String MSBuildRuntime { get; }
		ElementLocation MSBuildRuntimeLocation { get; }
		System.String Name { get; }
	}
	
	public partial class ProjectTaskElement : ProjectElementContainer, IProjectTaskElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectTaskElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String continueOnError;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation continueOnErrorLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String mSBuildArchitecture;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation mSBuildArchitectureLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String mSBuildRuntime;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation mSBuildRuntimeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		/// <summary>Initializes a new instance of the ProjectTaskElement class.</summary>
		protected ProjectTaskElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String continueOnError,
			ElementLocation continueOnErrorLocation,
			System.String mSBuildArchitecture,
			ElementLocation mSBuildArchitectureLocation,
			System.String mSBuildRuntime,
			ElementLocation mSBuildRuntimeLocation,
			System.String name)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.continueOnError = continueOnError;
			this.continueOnErrorLocation = continueOnErrorLocation;
			this.mSBuildArchitecture = mSBuildArchitecture;
			this.mSBuildArchitectureLocation = mSBuildArchitectureLocation;
			this.mSBuildRuntime = mSBuildRuntime;
			this.mSBuildRuntimeLocation = mSBuildRuntimeLocation;
			this.name = name;
			this.Validate();
		}
	
		public static ProjectTaskElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				continueOnError: Optional.For(continueOnError.GetValueOrDefault(DefaultInstance.ContinueOnError)),
				continueOnErrorLocation: Optional.For(continueOnErrorLocation.GetValueOrDefault(DefaultInstance.ContinueOnErrorLocation)),
				mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(DefaultInstance.MSBuildArchitecture)),
				mSBuildArchitectureLocation: Optional.For(mSBuildArchitectureLocation.GetValueOrDefault(DefaultInstance.MSBuildArchitectureLocation)),
				mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(DefaultInstance.MSBuildRuntime)),
				mSBuildRuntimeLocation: Optional.For(mSBuildRuntimeLocation.GetValueOrDefault(DefaultInstance.MSBuildRuntimeLocation)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String ContinueOnError {
			get { return this.continueOnError; }
		}
	
		public ElementLocation ContinueOnErrorLocation {
			get { return this.continueOnErrorLocation; }
		}
	
		public System.String MSBuildArchitecture {
			get { return this.mSBuildArchitecture; }
		}
	
		public ElementLocation MSBuildArchitectureLocation {
			get { return this.mSBuildArchitectureLocation; }
		}
	
		public System.String MSBuildRuntime {
			get { return this.mSBuildRuntime; }
		}
	
		public ElementLocation MSBuildRuntimeLocation {
			get { return this.mSBuildRuntimeLocation; }
		}
	
		public System.String Name {
			get { return this.name; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectTaskElement WithCondition(System.String value) {
			return (ProjectTaskElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectTaskElement WithConditionLocation(ElementLocation value) {
			return (ProjectTaskElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectTaskElement WithLabel(System.String value) {
			return (ProjectTaskElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectTaskElement WithLabelLocation(ElementLocation value) {
			return (ProjectTaskElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectTaskElement WithLocation(ElementLocation value) {
			return (ProjectTaskElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectTaskElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectTaskElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTaskElement WithChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTaskElement AddChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectTaskElement AddChild(ProjectElement value) {
			return (ProjectTaskElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectTaskElement RemoveChild(ProjectElement value) {
			return (ProjectTaskElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren() {
			return (ProjectTaskElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the ContinueOnError property set to the specified value.</summary>
		public ProjectTaskElement WithContinueOnError(System.String value) {
			if (value == this.ContinueOnError) {
				return this;
			}
		
			return this.With(continueOnError: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ContinueOnErrorLocation property set to the specified value.</summary>
		public ProjectTaskElement WithContinueOnErrorLocation(ElementLocation value) {
			if (value == this.ContinueOnErrorLocation) {
				return this;
			}
		
			return this.With(continueOnErrorLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the MSBuildArchitecture property set to the specified value.</summary>
		public ProjectTaskElement WithMSBuildArchitecture(System.String value) {
			if (value == this.MSBuildArchitecture) {
				return this;
			}
		
			return this.With(mSBuildArchitecture: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the MSBuildArchitectureLocation property set to the specified value.</summary>
		public ProjectTaskElement WithMSBuildArchitectureLocation(ElementLocation value) {
			if (value == this.MSBuildArchitectureLocation) {
				return this;
			}
		
			return this.With(mSBuildArchitectureLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the MSBuildRuntime property set to the specified value.</summary>
		public ProjectTaskElement WithMSBuildRuntime(System.String value) {
			if (value == this.MSBuildRuntime) {
				return this;
			}
		
			return this.With(mSBuildRuntime: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the MSBuildRuntimeLocation property set to the specified value.</summary>
		public ProjectTaskElement WithMSBuildRuntimeLocation(ElementLocation value) {
			if (value == this.MSBuildRuntimeLocation) {
				return this;
			}
		
			return this.With(mSBuildRuntimeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectTaskElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectTaskElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				continueOnError: continueOnError,
				continueOnErrorLocation: continueOnErrorLocation,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildArchitectureLocation: mSBuildArchitectureLocation,
				mSBuildRuntime: mSBuildRuntime,
				mSBuildRuntimeLocation: mSBuildRuntimeLocation,
				name: name);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectTaskElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				continueOnError: Optional.For(continueOnError.GetValueOrDefault(this.ContinueOnError)),
				continueOnErrorLocation: Optional.For(continueOnErrorLocation.GetValueOrDefault(this.ContinueOnErrorLocation)),
				mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(this.MSBuildArchitecture)),
				mSBuildArchitectureLocation: Optional.For(mSBuildArchitectureLocation.GetValueOrDefault(this.MSBuildArchitectureLocation)),
				mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(this.MSBuildRuntime)),
				mSBuildRuntimeLocation: Optional.For(mSBuildRuntimeLocation.GetValueOrDefault(this.MSBuildRuntimeLocation)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectTaskElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(continueOnError.IsDefined && continueOnError.Value != this.ContinueOnError) || 
				(continueOnErrorLocation.IsDefined && continueOnErrorLocation.Value != this.ContinueOnErrorLocation) || 
				(mSBuildArchitecture.IsDefined && mSBuildArchitecture.Value != this.MSBuildArchitecture) || 
				(mSBuildArchitectureLocation.IsDefined && mSBuildArchitectureLocation.Value != this.MSBuildArchitectureLocation) || 
				(mSBuildRuntime.IsDefined && mSBuildRuntime.Value != this.MSBuildRuntime) || 
				(mSBuildRuntimeLocation.IsDefined && mSBuildRuntimeLocation.Value != this.MSBuildRuntimeLocation) || 
				(name.IsDefined && name.Value != this.Name)) {
				return new ProjectTaskElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					continueOnError: continueOnError.GetValueOrDefault(this.ContinueOnError),
					continueOnErrorLocation: continueOnErrorLocation.GetValueOrDefault(this.ContinueOnErrorLocation),
					mSBuildArchitecture: mSBuildArchitecture.GetValueOrDefault(this.MSBuildArchitecture),
					mSBuildArchitectureLocation: mSBuildArchitectureLocation.GetValueOrDefault(this.MSBuildArchitectureLocation),
					mSBuildRuntime: mSBuildRuntime.GetValueOrDefault(this.MSBuildRuntime),
					mSBuildRuntimeLocation: mSBuildRuntimeLocation.GetValueOrDefault(this.MSBuildRuntimeLocation),
					name: name.GetValueOrDefault(this.Name));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectTaskElement whose fields are initialized with default values.</summary>
		private static ProjectTaskElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectTaskElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.ContinueOnError, 
				template.ContinueOnErrorLocation, 
				template.MSBuildArchitecture, 
				template.MSBuildArchitectureLocation, 
				template.MSBuildRuntime, 
				template.MSBuildRuntimeLocation, 
				template.Name);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String ContinueOnError { get; set; }
	
			internal ElementLocation ContinueOnErrorLocation { get; set; }
	
			internal System.String MSBuildArchitecture { get; set; }
	
			internal ElementLocation MSBuildArchitectureLocation { get; set; }
	
			internal System.String MSBuildRuntime { get; set; }
	
			internal ElementLocation MSBuildRuntimeLocation { get; set; }
	
			internal System.String Name { get; set; }
		}
		
		internal static ProjectTaskElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> continueOnErrorLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> mSBuildArchitectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> mSBuildRuntimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					continueOnError: Optional.For(continueOnError.GetValueOrDefault(DefaultInstance.ContinueOnError)),
					continueOnErrorLocation: Optional.For(continueOnErrorLocation.GetValueOrDefault(DefaultInstance.ContinueOnErrorLocation)),
					mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(DefaultInstance.MSBuildArchitecture)),
					mSBuildArchitectureLocation: Optional.For(mSBuildArchitectureLocation.GetValueOrDefault(DefaultInstance.MSBuildArchitectureLocation)),
					mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(DefaultInstance.MSBuildRuntime)),
					mSBuildRuntimeLocation: Optional.For(mSBuildRuntimeLocation.GetValueOrDefault(DefaultInstance.MSBuildRuntimeLocation)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectTaskElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String continueOnError;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> continueOnErrorLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String mSBuildArchitecture;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> mSBuildArchitectureLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String mSBuildRuntime;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> mSBuildRuntimeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			internal Builder(ProjectTaskElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.continueOnError = immutable.ContinueOnError;
				this.mSBuildArchitecture = immutable.MSBuildArchitecture;
				this.mSBuildRuntime = immutable.MSBuildRuntime;
				this.name = immutable.Name;
			}
		
			public System.String ContinueOnError {
				get {
					return this.continueOnError;
				}
		
				set {
					this.continueOnError = value;
				}
			}
		
			public ElementLocation.Builder ContinueOnErrorLocation {
				get {
					if (!this.continueOnErrorLocation.IsDefined) {
						this.continueOnErrorLocation = this.immutable.continueOnErrorLocation != null ? this.immutable.continueOnErrorLocation.ToBuilder() : null;
					}
		
					return this.continueOnErrorLocation.Value;
				}
		
				set {
					this.continueOnErrorLocation = value;
				}
			}
		
			public System.String MSBuildArchitecture {
				get {
					return this.mSBuildArchitecture;
				}
		
				set {
					this.mSBuildArchitecture = value;
				}
			}
		
			public ElementLocation.Builder MSBuildArchitectureLocation {
				get {
					if (!this.mSBuildArchitectureLocation.IsDefined) {
						this.mSBuildArchitectureLocation = this.immutable.mSBuildArchitectureLocation != null ? this.immutable.mSBuildArchitectureLocation.ToBuilder() : null;
					}
		
					return this.mSBuildArchitectureLocation.Value;
				}
		
				set {
					this.mSBuildArchitectureLocation = value;
				}
			}
		
			public System.String MSBuildRuntime {
				get {
					return this.mSBuildRuntime;
				}
		
				set {
					this.mSBuildRuntime = value;
				}
			}
		
			public ElementLocation.Builder MSBuildRuntimeLocation {
				get {
					if (!this.mSBuildRuntimeLocation.IsDefined) {
						this.mSBuildRuntimeLocation = this.immutable.mSBuildRuntimeLocation != null ? this.immutable.mSBuildRuntimeLocation.ToBuilder() : null;
					}
		
					return this.mSBuildRuntimeLocation.Value;
				}
		
				set {
					this.mSBuildRuntimeLocation = value;
				}
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public new ProjectTaskElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var continueOnErrorLocation = this.continueOnErrorLocation.IsDefined ? (this.continueOnErrorLocation.Value != null ? this.continueOnErrorLocation.Value.ToImmutable() : null) : this.immutable.ContinueOnErrorLocation;
				var mSBuildArchitectureLocation = this.mSBuildArchitectureLocation.IsDefined ? (this.mSBuildArchitectureLocation.Value != null ? this.mSBuildArchitectureLocation.Value.ToImmutable() : null) : this.immutable.MSBuildArchitectureLocation;
				var mSBuildRuntimeLocation = this.mSBuildRuntimeLocation.IsDefined ? (this.mSBuildRuntimeLocation.Value != null ? this.mSBuildRuntimeLocation.Value.ToImmutable() : null) : this.immutable.MSBuildRuntimeLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.ContinueOnError),
					ImmutableObjectGraph.Optional.For(continueOnErrorLocation),
					ImmutableObjectGraph.Optional.For(this.MSBuildArchitecture),
					ImmutableObjectGraph.Optional.For(mSBuildArchitectureLocation),
					ImmutableObjectGraph.Optional.For(this.MSBuildRuntime),
					ImmutableObjectGraph.Optional.For(mSBuildRuntimeLocation),
					ImmutableObjectGraph.Optional.For(this.Name));
			}
		}
	}
	
	public interface IProjectUsingTaskBodyElement : IProjectElement {
		System.String Evaluate { get; }
		ElementLocation EvaluateLocation { get; }
		System.String TaskBody { get; }
	}
	
	public partial class ProjectUsingTaskBodyElement : ProjectElement, IProjectUsingTaskBodyElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskBodyElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String evaluate;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation evaluateLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskBody;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskBodyElement class.</summary>
		protected ProjectUsingTaskBodyElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String evaluate,
			ElementLocation evaluateLocation,
			System.String taskBody)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.evaluate = evaluate;
			this.evaluateLocation = evaluateLocation;
			this.taskBody = taskBody;
			this.Validate();
		}
	
		public static ProjectUsingTaskBodyElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				evaluate: Optional.For(evaluate.GetValueOrDefault(DefaultInstance.Evaluate)),
				evaluateLocation: Optional.For(evaluateLocation.GetValueOrDefault(DefaultInstance.EvaluateLocation)),
				taskBody: Optional.For(taskBody.GetValueOrDefault(DefaultInstance.TaskBody)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Evaluate {
			get { return this.evaluate; }
		}
	
		public ElementLocation EvaluateLocation {
			get { return this.evaluateLocation; }
		}
	
		public System.String TaskBody {
			get { return this.taskBody; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectUsingTaskBodyElement WithCondition(System.String value) {
			return (ProjectUsingTaskBodyElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectUsingTaskBodyElement WithConditionLocation(ElementLocation value) {
			return (ProjectUsingTaskBodyElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectUsingTaskBodyElement WithLabel(System.String value) {
			return (ProjectUsingTaskBodyElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectUsingTaskBodyElement WithLabelLocation(ElementLocation value) {
			return (ProjectUsingTaskBodyElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectUsingTaskBodyElement WithLocation(ElementLocation value) {
			return (ProjectUsingTaskBodyElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Evaluate property set to the specified value.</summary>
		public ProjectUsingTaskBodyElement WithEvaluate(System.String value) {
			if (value == this.Evaluate) {
				return this;
			}
		
			return this.With(evaluate: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the EvaluateLocation property set to the specified value.</summary>
		public ProjectUsingTaskBodyElement WithEvaluateLocation(ElementLocation value) {
			if (value == this.EvaluateLocation) {
				return this;
			}
		
			return this.With(evaluateLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskBody property set to the specified value.</summary>
		public ProjectUsingTaskBodyElement WithTaskBody(System.String value) {
			if (value == this.TaskBody) {
				return this;
			}
		
			return this.With(taskBody: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskBodyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectUsingTaskBodyElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				evaluate: evaluate,
				evaluateLocation: evaluateLocation,
				taskBody: taskBody);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskBodyElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				evaluate: Optional.For(evaluate.GetValueOrDefault(this.Evaluate)),
				evaluateLocation: Optional.For(evaluateLocation.GetValueOrDefault(this.EvaluateLocation)),
				taskBody: Optional.For(taskBody.GetValueOrDefault(this.TaskBody)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskBodyElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(evaluate.IsDefined && evaluate.Value != this.Evaluate) || 
				(evaluateLocation.IsDefined && evaluateLocation.Value != this.EvaluateLocation) || 
				(taskBody.IsDefined && taskBody.Value != this.TaskBody)) {
				return new ProjectUsingTaskBodyElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					evaluate: evaluate.GetValueOrDefault(this.Evaluate),
					evaluateLocation: evaluateLocation.GetValueOrDefault(this.EvaluateLocation),
					taskBody: taskBody.GetValueOrDefault(this.TaskBody));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskBodyElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskBodyElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskBodyElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Evaluate, 
				template.EvaluateLocation, 
				template.TaskBody);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Evaluate { get; set; }
	
			internal ElementLocation EvaluateLocation { get; set; }
	
			internal System.String TaskBody { get; set; }
		}
		
		internal static ProjectUsingTaskBodyElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> evaluateLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					evaluate: Optional.For(evaluate.GetValueOrDefault(DefaultInstance.Evaluate)),
					evaluateLocation: Optional.For(evaluateLocation.GetValueOrDefault(DefaultInstance.EvaluateLocation)),
					taskBody: Optional.For(taskBody.GetValueOrDefault(DefaultInstance.TaskBody)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectUsingTaskBodyElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String evaluate;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> evaluateLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String taskBody;
		
			internal Builder(ProjectUsingTaskBodyElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.evaluate = immutable.Evaluate;
				this.taskBody = immutable.TaskBody;
			}
		
			public System.String Evaluate {
				get {
					return this.evaluate;
				}
		
				set {
					this.evaluate = value;
				}
			}
		
			public ElementLocation.Builder EvaluateLocation {
				get {
					if (!this.evaluateLocation.IsDefined) {
						this.evaluateLocation = this.immutable.evaluateLocation != null ? this.immutable.evaluateLocation.ToBuilder() : null;
					}
		
					return this.evaluateLocation.Value;
				}
		
				set {
					this.evaluateLocation = value;
				}
			}
		
			public System.String TaskBody {
				get {
					return this.taskBody;
				}
		
				set {
					this.taskBody = value;
				}
			}
		
			public new ProjectUsingTaskBodyElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var evaluateLocation = this.evaluateLocation.IsDefined ? (this.evaluateLocation.Value != null ? this.evaluateLocation.Value.ToImmutable() : null) : this.immutable.EvaluateLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Evaluate),
					ImmutableObjectGraph.Optional.For(evaluateLocation),
					ImmutableObjectGraph.Optional.For(this.TaskBody));
			}
		}
	}
	
	public interface IProjectUsingTaskElement : IProjectElementContainer {
		System.String Architecture { get; }
		ElementLocation ArchitectureLocation { get; }
		System.String AssemblyFile { get; }
		ElementLocation AssemblyFileLocation { get; }
		System.String AssemblyName { get; }
		ElementLocation AssemblyNameLocation { get; }
		System.String Runtime { get; }
		ElementLocation RuntimeLocation { get; }
		System.String TaskFactory { get; }
		ElementLocation TaskFactoryLocation { get; }
		System.String TaskName { get; }
		ElementLocation TaskNameLocation { get; }
	}
	
	public partial class ProjectUsingTaskElement : ProjectElementContainer, IProjectUsingTaskElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String architecture;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation architectureLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String assemblyFile;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation assemblyFileLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String assemblyName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation assemblyNameLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String runtime;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation runtimeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskFactory;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation taskFactoryLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation taskNameLocation;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskElement class.</summary>
		protected ProjectUsingTaskElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String architecture,
			ElementLocation architectureLocation,
			System.String assemblyFile,
			ElementLocation assemblyFileLocation,
			System.String assemblyName,
			ElementLocation assemblyNameLocation,
			System.String runtime,
			ElementLocation runtimeLocation,
			System.String taskFactory,
			ElementLocation taskFactoryLocation,
			System.String taskName,
			ElementLocation taskNameLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.architecture = architecture;
			this.architectureLocation = architectureLocation;
			this.assemblyFile = assemblyFile;
			this.assemblyFileLocation = assemblyFileLocation;
			this.assemblyName = assemblyName;
			this.assemblyNameLocation = assemblyNameLocation;
			this.runtime = runtime;
			this.runtimeLocation = runtimeLocation;
			this.taskFactory = taskFactory;
			this.taskFactoryLocation = taskFactoryLocation;
			this.taskName = taskName;
			this.taskNameLocation = taskNameLocation;
			this.Validate();
		}
	
		public static ProjectUsingTaskElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				architecture: Optional.For(architecture.GetValueOrDefault(DefaultInstance.Architecture)),
				architectureLocation: Optional.For(architectureLocation.GetValueOrDefault(DefaultInstance.ArchitectureLocation)),
				assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(DefaultInstance.AssemblyFile)),
				assemblyFileLocation: Optional.For(assemblyFileLocation.GetValueOrDefault(DefaultInstance.AssemblyFileLocation)),
				assemblyName: Optional.For(assemblyName.GetValueOrDefault(DefaultInstance.AssemblyName)),
				assemblyNameLocation: Optional.For(assemblyNameLocation.GetValueOrDefault(DefaultInstance.AssemblyNameLocation)),
				runtime: Optional.For(runtime.GetValueOrDefault(DefaultInstance.Runtime)),
				runtimeLocation: Optional.For(runtimeLocation.GetValueOrDefault(DefaultInstance.RuntimeLocation)),
				taskFactory: Optional.For(taskFactory.GetValueOrDefault(DefaultInstance.TaskFactory)),
				taskFactoryLocation: Optional.For(taskFactoryLocation.GetValueOrDefault(DefaultInstance.TaskFactoryLocation)),
				taskName: Optional.For(taskName.GetValueOrDefault(DefaultInstance.TaskName)),
				taskNameLocation: Optional.For(taskNameLocation.GetValueOrDefault(DefaultInstance.TaskNameLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Architecture {
			get { return this.architecture; }
		}
	
		public ElementLocation ArchitectureLocation {
			get { return this.architectureLocation; }
		}
	
		public System.String AssemblyFile {
			get { return this.assemblyFile; }
		}
	
		public ElementLocation AssemblyFileLocation {
			get { return this.assemblyFileLocation; }
		}
	
		public System.String AssemblyName {
			get { return this.assemblyName; }
		}
	
		public ElementLocation AssemblyNameLocation {
			get { return this.assemblyNameLocation; }
		}
	
		public System.String Runtime {
			get { return this.runtime; }
		}
	
		public ElementLocation RuntimeLocation {
			get { return this.runtimeLocation; }
		}
	
		public System.String TaskFactory {
			get { return this.taskFactory; }
		}
	
		public ElementLocation TaskFactoryLocation {
			get { return this.taskFactoryLocation; }
		}
	
		public System.String TaskName {
			get { return this.taskName; }
		}
	
		public ElementLocation TaskNameLocation {
			get { return this.taskNameLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithCondition(System.String value) {
			return (ProjectUsingTaskElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithConditionLocation(ElementLocation value) {
			return (ProjectUsingTaskElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithLabel(System.String value) {
			return (ProjectUsingTaskElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithLabelLocation(ElementLocation value) {
			return (ProjectUsingTaskElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithLocation(ElementLocation value) {
			return (ProjectUsingTaskElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectUsingTaskElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectUsingTaskElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectUsingTaskElement WithChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectUsingTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChild(ProjectElement value) {
			return (ProjectUsingTaskElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChild(ProjectElement value) {
			return (ProjectUsingTaskElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren() {
			return (ProjectUsingTaskElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the Architecture property set to the specified value.</summary>
		public ProjectUsingTaskElement WithArchitecture(System.String value) {
			if (value == this.Architecture) {
				return this;
			}
		
			return this.With(architecture: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ArchitectureLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithArchitectureLocation(ElementLocation value) {
			if (value == this.ArchitectureLocation) {
				return this;
			}
		
			return this.With(architectureLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the AssemblyFile property set to the specified value.</summary>
		public ProjectUsingTaskElement WithAssemblyFile(System.String value) {
			if (value == this.AssemblyFile) {
				return this;
			}
		
			return this.With(assemblyFile: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the AssemblyFileLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithAssemblyFileLocation(ElementLocation value) {
			if (value == this.AssemblyFileLocation) {
				return this;
			}
		
			return this.With(assemblyFileLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the AssemblyName property set to the specified value.</summary>
		public ProjectUsingTaskElement WithAssemblyName(System.String value) {
			if (value == this.AssemblyName) {
				return this;
			}
		
			return this.With(assemblyName: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the AssemblyNameLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithAssemblyNameLocation(ElementLocation value) {
			if (value == this.AssemblyNameLocation) {
				return this;
			}
		
			return this.With(assemblyNameLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Runtime property set to the specified value.</summary>
		public ProjectUsingTaskElement WithRuntime(System.String value) {
			if (value == this.Runtime) {
				return this;
			}
		
			return this.With(runtime: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RuntimeLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithRuntimeLocation(ElementLocation value) {
			if (value == this.RuntimeLocation) {
				return this;
			}
		
			return this.With(runtimeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskFactory property set to the specified value.</summary>
		public ProjectUsingTaskElement WithTaskFactory(System.String value) {
			if (value == this.TaskFactory) {
				return this;
			}
		
			return this.With(taskFactory: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskFactoryLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithTaskFactoryLocation(ElementLocation value) {
			if (value == this.TaskFactoryLocation) {
				return this;
			}
		
			return this.With(taskFactoryLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskName property set to the specified value.</summary>
		public ProjectUsingTaskElement WithTaskName(System.String value) {
			if (value == this.TaskName) {
				return this;
			}
		
			return this.With(taskName: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TaskNameLocation property set to the specified value.</summary>
		public ProjectUsingTaskElement WithTaskNameLocation(ElementLocation value) {
			if (value == this.TaskNameLocation) {
				return this;
			}
		
			return this.With(taskNameLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectUsingTaskElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				architecture: architecture,
				architectureLocation: architectureLocation,
				assemblyFile: assemblyFile,
				assemblyFileLocation: assemblyFileLocation,
				assemblyName: assemblyName,
				assemblyNameLocation: assemblyNameLocation,
				runtime: runtime,
				runtimeLocation: runtimeLocation,
				taskFactory: taskFactory,
				taskFactoryLocation: taskFactoryLocation,
				taskName: taskName,
				taskNameLocation: taskNameLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				architecture: Optional.For(architecture.GetValueOrDefault(this.Architecture)),
				architectureLocation: Optional.For(architectureLocation.GetValueOrDefault(this.ArchitectureLocation)),
				assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(this.AssemblyFile)),
				assemblyFileLocation: Optional.For(assemblyFileLocation.GetValueOrDefault(this.AssemblyFileLocation)),
				assemblyName: Optional.For(assemblyName.GetValueOrDefault(this.AssemblyName)),
				assemblyNameLocation: Optional.For(assemblyNameLocation.GetValueOrDefault(this.AssemblyNameLocation)),
				runtime: Optional.For(runtime.GetValueOrDefault(this.Runtime)),
				runtimeLocation: Optional.For(runtimeLocation.GetValueOrDefault(this.RuntimeLocation)),
				taskFactory: Optional.For(taskFactory.GetValueOrDefault(this.TaskFactory)),
				taskFactoryLocation: Optional.For(taskFactoryLocation.GetValueOrDefault(this.TaskFactoryLocation)),
				taskName: Optional.For(taskName.GetValueOrDefault(this.TaskName)),
				taskNameLocation: Optional.For(taskNameLocation.GetValueOrDefault(this.TaskNameLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(architecture.IsDefined && architecture.Value != this.Architecture) || 
				(architectureLocation.IsDefined && architectureLocation.Value != this.ArchitectureLocation) || 
				(assemblyFile.IsDefined && assemblyFile.Value != this.AssemblyFile) || 
				(assemblyFileLocation.IsDefined && assemblyFileLocation.Value != this.AssemblyFileLocation) || 
				(assemblyName.IsDefined && assemblyName.Value != this.AssemblyName) || 
				(assemblyNameLocation.IsDefined && assemblyNameLocation.Value != this.AssemblyNameLocation) || 
				(runtime.IsDefined && runtime.Value != this.Runtime) || 
				(runtimeLocation.IsDefined && runtimeLocation.Value != this.RuntimeLocation) || 
				(taskFactory.IsDefined && taskFactory.Value != this.TaskFactory) || 
				(taskFactoryLocation.IsDefined && taskFactoryLocation.Value != this.TaskFactoryLocation) || 
				(taskName.IsDefined && taskName.Value != this.TaskName) || 
				(taskNameLocation.IsDefined && taskNameLocation.Value != this.TaskNameLocation)) {
				return new ProjectUsingTaskElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					architecture: architecture.GetValueOrDefault(this.Architecture),
					architectureLocation: architectureLocation.GetValueOrDefault(this.ArchitectureLocation),
					assemblyFile: assemblyFile.GetValueOrDefault(this.AssemblyFile),
					assemblyFileLocation: assemblyFileLocation.GetValueOrDefault(this.AssemblyFileLocation),
					assemblyName: assemblyName.GetValueOrDefault(this.AssemblyName),
					assemblyNameLocation: assemblyNameLocation.GetValueOrDefault(this.AssemblyNameLocation),
					runtime: runtime.GetValueOrDefault(this.Runtime),
					runtimeLocation: runtimeLocation.GetValueOrDefault(this.RuntimeLocation),
					taskFactory: taskFactory.GetValueOrDefault(this.TaskFactory),
					taskFactoryLocation: taskFactoryLocation.GetValueOrDefault(this.TaskFactoryLocation),
					taskName: taskName.GetValueOrDefault(this.TaskName),
					taskNameLocation: taskNameLocation.GetValueOrDefault(this.TaskNameLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.Architecture, 
				template.ArchitectureLocation, 
				template.AssemblyFile, 
				template.AssemblyFileLocation, 
				template.AssemblyName, 
				template.AssemblyNameLocation, 
				template.Runtime, 
				template.RuntimeLocation, 
				template.TaskFactory, 
				template.TaskFactoryLocation, 
				template.TaskName, 
				template.TaskNameLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String Architecture { get; set; }
	
			internal ElementLocation ArchitectureLocation { get; set; }
	
			internal System.String AssemblyFile { get; set; }
	
			internal ElementLocation AssemblyFileLocation { get; set; }
	
			internal System.String AssemblyName { get; set; }
	
			internal ElementLocation AssemblyNameLocation { get; set; }
	
			internal System.String Runtime { get; set; }
	
			internal ElementLocation RuntimeLocation { get; set; }
	
			internal System.String TaskFactory { get; set; }
	
			internal ElementLocation TaskFactoryLocation { get; set; }
	
			internal System.String TaskName { get; set; }
	
			internal ElementLocation TaskNameLocation { get; set; }
		}
		
		internal static ProjectUsingTaskElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> architectureLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> assemblyFileLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> assemblyNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> runtimeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> taskFactoryLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> taskNameLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					architecture: Optional.For(architecture.GetValueOrDefault(DefaultInstance.Architecture)),
					architectureLocation: Optional.For(architectureLocation.GetValueOrDefault(DefaultInstance.ArchitectureLocation)),
					assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(DefaultInstance.AssemblyFile)),
					assemblyFileLocation: Optional.For(assemblyFileLocation.GetValueOrDefault(DefaultInstance.AssemblyFileLocation)),
					assemblyName: Optional.For(assemblyName.GetValueOrDefault(DefaultInstance.AssemblyName)),
					assemblyNameLocation: Optional.For(assemblyNameLocation.GetValueOrDefault(DefaultInstance.AssemblyNameLocation)),
					runtime: Optional.For(runtime.GetValueOrDefault(DefaultInstance.Runtime)),
					runtimeLocation: Optional.For(runtimeLocation.GetValueOrDefault(DefaultInstance.RuntimeLocation)),
					taskFactory: Optional.For(taskFactory.GetValueOrDefault(DefaultInstance.TaskFactory)),
					taskFactoryLocation: Optional.For(taskFactoryLocation.GetValueOrDefault(DefaultInstance.TaskFactoryLocation)),
					taskName: Optional.For(taskName.GetValueOrDefault(DefaultInstance.TaskName)),
					taskNameLocation: Optional.For(taskNameLocation.GetValueOrDefault(DefaultInstance.TaskNameLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectUsingTaskElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String architecture;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> architectureLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String assemblyFile;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> assemblyFileLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String assemblyName;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> assemblyNameLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String runtime;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> runtimeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String taskFactory;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> taskFactoryLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String taskName;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> taskNameLocation;
		
			internal Builder(ProjectUsingTaskElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.architecture = immutable.Architecture;
				this.assemblyFile = immutable.AssemblyFile;
				this.assemblyName = immutable.AssemblyName;
				this.runtime = immutable.Runtime;
				this.taskFactory = immutable.TaskFactory;
				this.taskName = immutable.TaskName;
			}
		
			public System.String Architecture {
				get {
					return this.architecture;
				}
		
				set {
					this.architecture = value;
				}
			}
		
			public ElementLocation.Builder ArchitectureLocation {
				get {
					if (!this.architectureLocation.IsDefined) {
						this.architectureLocation = this.immutable.architectureLocation != null ? this.immutable.architectureLocation.ToBuilder() : null;
					}
		
					return this.architectureLocation.Value;
				}
		
				set {
					this.architectureLocation = value;
				}
			}
		
			public System.String AssemblyFile {
				get {
					return this.assemblyFile;
				}
		
				set {
					this.assemblyFile = value;
				}
			}
		
			public ElementLocation.Builder AssemblyFileLocation {
				get {
					if (!this.assemblyFileLocation.IsDefined) {
						this.assemblyFileLocation = this.immutable.assemblyFileLocation != null ? this.immutable.assemblyFileLocation.ToBuilder() : null;
					}
		
					return this.assemblyFileLocation.Value;
				}
		
				set {
					this.assemblyFileLocation = value;
				}
			}
		
			public System.String AssemblyName {
				get {
					return this.assemblyName;
				}
		
				set {
					this.assemblyName = value;
				}
			}
		
			public ElementLocation.Builder AssemblyNameLocation {
				get {
					if (!this.assemblyNameLocation.IsDefined) {
						this.assemblyNameLocation = this.immutable.assemblyNameLocation != null ? this.immutable.assemblyNameLocation.ToBuilder() : null;
					}
		
					return this.assemblyNameLocation.Value;
				}
		
				set {
					this.assemblyNameLocation = value;
				}
			}
		
			public System.String Runtime {
				get {
					return this.runtime;
				}
		
				set {
					this.runtime = value;
				}
			}
		
			public ElementLocation.Builder RuntimeLocation {
				get {
					if (!this.runtimeLocation.IsDefined) {
						this.runtimeLocation = this.immutable.runtimeLocation != null ? this.immutable.runtimeLocation.ToBuilder() : null;
					}
		
					return this.runtimeLocation.Value;
				}
		
				set {
					this.runtimeLocation = value;
				}
			}
		
			public System.String TaskFactory {
				get {
					return this.taskFactory;
				}
		
				set {
					this.taskFactory = value;
				}
			}
		
			public ElementLocation.Builder TaskFactoryLocation {
				get {
					if (!this.taskFactoryLocation.IsDefined) {
						this.taskFactoryLocation = this.immutable.taskFactoryLocation != null ? this.immutable.taskFactoryLocation.ToBuilder() : null;
					}
		
					return this.taskFactoryLocation.Value;
				}
		
				set {
					this.taskFactoryLocation = value;
				}
			}
		
			public System.String TaskName {
				get {
					return this.taskName;
				}
		
				set {
					this.taskName = value;
				}
			}
		
			public ElementLocation.Builder TaskNameLocation {
				get {
					if (!this.taskNameLocation.IsDefined) {
						this.taskNameLocation = this.immutable.taskNameLocation != null ? this.immutable.taskNameLocation.ToBuilder() : null;
					}
		
					return this.taskNameLocation.Value;
				}
		
				set {
					this.taskNameLocation = value;
				}
			}
		
			public new ProjectUsingTaskElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var architectureLocation = this.architectureLocation.IsDefined ? (this.architectureLocation.Value != null ? this.architectureLocation.Value.ToImmutable() : null) : this.immutable.ArchitectureLocation;
				var assemblyFileLocation = this.assemblyFileLocation.IsDefined ? (this.assemblyFileLocation.Value != null ? this.assemblyFileLocation.Value.ToImmutable() : null) : this.immutable.AssemblyFileLocation;
				var assemblyNameLocation = this.assemblyNameLocation.IsDefined ? (this.assemblyNameLocation.Value != null ? this.assemblyNameLocation.Value.ToImmutable() : null) : this.immutable.AssemblyNameLocation;
				var runtimeLocation = this.runtimeLocation.IsDefined ? (this.runtimeLocation.Value != null ? this.runtimeLocation.Value.ToImmutable() : null) : this.immutable.RuntimeLocation;
				var taskFactoryLocation = this.taskFactoryLocation.IsDefined ? (this.taskFactoryLocation.Value != null ? this.taskFactoryLocation.Value.ToImmutable() : null) : this.immutable.TaskFactoryLocation;
				var taskNameLocation = this.taskNameLocation.IsDefined ? (this.taskNameLocation.Value != null ? this.taskNameLocation.Value.ToImmutable() : null) : this.immutable.TaskNameLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.Architecture),
					ImmutableObjectGraph.Optional.For(architectureLocation),
					ImmutableObjectGraph.Optional.For(this.AssemblyFile),
					ImmutableObjectGraph.Optional.For(assemblyFileLocation),
					ImmutableObjectGraph.Optional.For(this.AssemblyName),
					ImmutableObjectGraph.Optional.For(assemblyNameLocation),
					ImmutableObjectGraph.Optional.For(this.Runtime),
					ImmutableObjectGraph.Optional.For(runtimeLocation),
					ImmutableObjectGraph.Optional.For(this.TaskFactory),
					ImmutableObjectGraph.Optional.For(taskFactoryLocation),
					ImmutableObjectGraph.Optional.For(this.TaskName),
					ImmutableObjectGraph.Optional.For(taskNameLocation));
			}
		}
	}
	
	public interface IProjectUsingTaskParameterElement : IProjectElement {
		System.String Name { get; }
		System.String Output { get; }
		ElementLocation OutputLocation { get; }
		System.String ParameterType { get; }
		ElementLocation ParameterTypeLocation { get; }
		System.String Required { get; }
		ElementLocation RequiredLocation { get; }
	}
	
	public partial class ProjectUsingTaskParameterElement : ProjectElement, IProjectUsingTaskParameterElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskParameterElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String output;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation outputLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String parameterType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation parameterTypeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String required;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation requiredLocation;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskParameterElement class.</summary>
		protected ProjectUsingTaskParameterElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String name,
			System.String output,
			ElementLocation outputLocation,
			System.String parameterType,
			ElementLocation parameterTypeLocation,
			System.String required,
			ElementLocation requiredLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.name = name;
			this.output = output;
			this.outputLocation = outputLocation;
			this.parameterType = parameterType;
			this.parameterTypeLocation = parameterTypeLocation;
			this.required = required;
			this.requiredLocation = requiredLocation;
			this.Validate();
		}
	
		public static ProjectUsingTaskParameterElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				output: Optional.For(output.GetValueOrDefault(DefaultInstance.Output)),
				outputLocation: Optional.For(outputLocation.GetValueOrDefault(DefaultInstance.OutputLocation)),
				parameterType: Optional.For(parameterType.GetValueOrDefault(DefaultInstance.ParameterType)),
				parameterTypeLocation: Optional.For(parameterTypeLocation.GetValueOrDefault(DefaultInstance.ParameterTypeLocation)),
				required: Optional.For(required.GetValueOrDefault(DefaultInstance.Required)),
				requiredLocation: Optional.For(requiredLocation.GetValueOrDefault(DefaultInstance.RequiredLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Output {
			get { return this.output; }
		}
	
		public ElementLocation OutputLocation {
			get { return this.outputLocation; }
		}
	
		public System.String ParameterType {
			get { return this.parameterType; }
		}
	
		public ElementLocation ParameterTypeLocation {
			get { return this.parameterTypeLocation; }
		}
	
		public System.String Required {
			get { return this.required; }
		}
	
		public ElementLocation RequiredLocation {
			get { return this.requiredLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectUsingTaskParameterElement WithCondition(System.String value) {
			return (ProjectUsingTaskParameterElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectUsingTaskParameterElement WithConditionLocation(ElementLocation value) {
			return (ProjectUsingTaskParameterElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectUsingTaskParameterElement WithLabel(System.String value) {
			return (ProjectUsingTaskParameterElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectUsingTaskParameterElement WithLabelLocation(ElementLocation value) {
			return (ProjectUsingTaskParameterElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectUsingTaskParameterElement WithLocation(ElementLocation value) {
			return (ProjectUsingTaskParameterElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Output property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithOutput(System.String value) {
			if (value == this.Output) {
				return this;
			}
		
			return this.With(output: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the OutputLocation property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithOutputLocation(ElementLocation value) {
			if (value == this.OutputLocation) {
				return this;
			}
		
			return this.With(outputLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ParameterType property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithParameterType(System.String value) {
			if (value == this.ParameterType) {
				return this;
			}
		
			return this.With(parameterType: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ParameterTypeLocation property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithParameterTypeLocation(ElementLocation value) {
			if (value == this.ParameterTypeLocation) {
				return this;
			}
		
			return this.With(parameterTypeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Required property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithRequired(System.String value) {
			if (value == this.Required) {
				return this;
			}
		
			return this.With(required: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RequiredLocation property set to the specified value.</summary>
		public ProjectUsingTaskParameterElement WithRequiredLocation(ElementLocation value) {
			if (value == this.RequiredLocation) {
				return this;
			}
		
			return this.With(requiredLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskParameterElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectUsingTaskParameterElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				name: name,
				output: output,
				outputLocation: outputLocation,
				parameterType: parameterType,
				parameterTypeLocation: parameterTypeLocation,
				required: required,
				requiredLocation: requiredLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskParameterElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				output: Optional.For(output.GetValueOrDefault(this.Output)),
				outputLocation: Optional.For(outputLocation.GetValueOrDefault(this.OutputLocation)),
				parameterType: Optional.For(parameterType.GetValueOrDefault(this.ParameterType)),
				parameterTypeLocation: Optional.For(parameterTypeLocation.GetValueOrDefault(this.ParameterTypeLocation)),
				required: Optional.For(required.GetValueOrDefault(this.Required)),
				requiredLocation: Optional.For(requiredLocation.GetValueOrDefault(this.RequiredLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskParameterElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(name.IsDefined && name.Value != this.Name) || 
				(output.IsDefined && output.Value != this.Output) || 
				(outputLocation.IsDefined && outputLocation.Value != this.OutputLocation) || 
				(parameterType.IsDefined && parameterType.Value != this.ParameterType) || 
				(parameterTypeLocation.IsDefined && parameterTypeLocation.Value != this.ParameterTypeLocation) || 
				(required.IsDefined && required.Value != this.Required) || 
				(requiredLocation.IsDefined && requiredLocation.Value != this.RequiredLocation)) {
				return new ProjectUsingTaskParameterElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					name: name.GetValueOrDefault(this.Name),
					output: output.GetValueOrDefault(this.Output),
					outputLocation: outputLocation.GetValueOrDefault(this.OutputLocation),
					parameterType: parameterType.GetValueOrDefault(this.ParameterType),
					parameterTypeLocation: parameterTypeLocation.GetValueOrDefault(this.ParameterTypeLocation),
					required: required.GetValueOrDefault(this.Required),
					requiredLocation: requiredLocation.GetValueOrDefault(this.RequiredLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskParameterElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskParameterElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskParameterElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Name, 
				template.Output, 
				template.OutputLocation, 
				template.ParameterType, 
				template.ParameterTypeLocation, 
				template.Required, 
				template.RequiredLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Output { get; set; }
	
			internal ElementLocation OutputLocation { get; set; }
	
			internal System.String ParameterType { get; set; }
	
			internal ElementLocation ParameterTypeLocation { get; set; }
	
			internal System.String Required { get; set; }
	
			internal ElementLocation RequiredLocation { get; set; }
		}
		
		internal static ProjectUsingTaskParameterElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> outputLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> parameterTypeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> requiredLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					output: Optional.For(output.GetValueOrDefault(DefaultInstance.Output)),
					outputLocation: Optional.For(outputLocation.GetValueOrDefault(DefaultInstance.OutputLocation)),
					parameterType: Optional.For(parameterType.GetValueOrDefault(DefaultInstance.ParameterType)),
					parameterTypeLocation: Optional.For(parameterTypeLocation.GetValueOrDefault(DefaultInstance.ParameterTypeLocation)),
					required: Optional.For(required.GetValueOrDefault(DefaultInstance.Required)),
					requiredLocation: Optional.For(requiredLocation.GetValueOrDefault(DefaultInstance.RequiredLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectUsingTaskParameterElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String output;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> outputLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String parameterType;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> parameterTypeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String required;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> requiredLocation;
		
			internal Builder(ProjectUsingTaskParameterElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.name = immutable.Name;
				this.output = immutable.Output;
				this.parameterType = immutable.ParameterType;
				this.required = immutable.Required;
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public System.String Output {
				get {
					return this.output;
				}
		
				set {
					this.output = value;
				}
			}
		
			public ElementLocation.Builder OutputLocation {
				get {
					if (!this.outputLocation.IsDefined) {
						this.outputLocation = this.immutable.outputLocation != null ? this.immutable.outputLocation.ToBuilder() : null;
					}
		
					return this.outputLocation.Value;
				}
		
				set {
					this.outputLocation = value;
				}
			}
		
			public System.String ParameterType {
				get {
					return this.parameterType;
				}
		
				set {
					this.parameterType = value;
				}
			}
		
			public ElementLocation.Builder ParameterTypeLocation {
				get {
					if (!this.parameterTypeLocation.IsDefined) {
						this.parameterTypeLocation = this.immutable.parameterTypeLocation != null ? this.immutable.parameterTypeLocation.ToBuilder() : null;
					}
		
					return this.parameterTypeLocation.Value;
				}
		
				set {
					this.parameterTypeLocation = value;
				}
			}
		
			public System.String Required {
				get {
					return this.required;
				}
		
				set {
					this.required = value;
				}
			}
		
			public ElementLocation.Builder RequiredLocation {
				get {
					if (!this.requiredLocation.IsDefined) {
						this.requiredLocation = this.immutable.requiredLocation != null ? this.immutable.requiredLocation.ToBuilder() : null;
					}
		
					return this.requiredLocation.Value;
				}
		
				set {
					this.requiredLocation = value;
				}
			}
		
			public new ProjectUsingTaskParameterElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var outputLocation = this.outputLocation.IsDefined ? (this.outputLocation.Value != null ? this.outputLocation.Value.ToImmutable() : null) : this.immutable.OutputLocation;
				var parameterTypeLocation = this.parameterTypeLocation.IsDefined ? (this.parameterTypeLocation.Value != null ? this.parameterTypeLocation.Value.ToImmutable() : null) : this.immutable.ParameterTypeLocation;
				var requiredLocation = this.requiredLocation.IsDefined ? (this.requiredLocation.Value != null ? this.requiredLocation.Value.ToImmutable() : null) : this.immutable.RequiredLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(this.Output),
					ImmutableObjectGraph.Optional.For(outputLocation),
					ImmutableObjectGraph.Optional.For(this.ParameterType),
					ImmutableObjectGraph.Optional.For(parameterTypeLocation),
					ImmutableObjectGraph.Optional.For(this.Required),
					ImmutableObjectGraph.Optional.For(requiredLocation));
			}
		}
	}
	
	public interface IUsingTaskParameterGroupElement : IProjectElementContainer {
	}
	
	public partial class UsingTaskParameterGroupElement : ProjectElementContainer, IUsingTaskParameterGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly UsingTaskParameterGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the UsingTaskParameterGroupElement class.</summary>
		protected UsingTaskParameterGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static UsingTaskParameterGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithCondition(System.String value) {
			return (UsingTaskParameterGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithConditionLocation(ElementLocation value) {
			return (UsingTaskParameterGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithLabel(System.String value) {
			return (UsingTaskParameterGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithLabelLocation(ElementLocation value) {
			return (UsingTaskParameterGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithLocation(ElementLocation value) {
			return (UsingTaskParameterGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new UsingTaskParameterGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (UsingTaskParameterGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new UsingTaskParameterGroupElement WithChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new UsingTaskParameterGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChild(ProjectElement value) {
			return (UsingTaskParameterGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChild(ProjectElement value) {
			return (UsingTaskParameterGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren() {
			return (UsingTaskParameterGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public UsingTaskParameterGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (UsingTaskParameterGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private UsingTaskParameterGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new UsingTaskParameterGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated UsingTaskParameterGroupElement whose fields are initialized with default values.</summary>
		private static UsingTaskParameterGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new UsingTaskParameterGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static UsingTaskParameterGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private UsingTaskParameterGroupElement immutable;
		
			internal Builder(UsingTaskParameterGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new UsingTaskParameterGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
}


