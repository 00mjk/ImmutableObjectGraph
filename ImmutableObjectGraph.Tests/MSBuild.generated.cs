// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public interface IElementLocation {
		System.Int32 Column { get; }
		System.Int32 Line { get; }
		System.String File { get; }
		System.String LocationString { get; }
	}
	
	public partial class ElementLocation : IElementLocation {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ElementLocation DefaultInstance = GetDefaultTemplate();
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 column;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Int32 line;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String file;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String locationString;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ElementLocation class.</summary>
		protected ElementLocation(
			System.Int32 identity,
			System.Int32 column,
			System.Int32 line,
			System.String file,
			System.String locationString)
		{
			this.identity = identity;
			this.column = column;
			this.line = line;
			this.file = file;
			this.locationString = locationString;
			this.Validate();
		}
	
		public static ElementLocation Create(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				column: Optional.For(column.GetValueOrDefault(DefaultInstance.Column)),
				line: Optional.For(line.GetValueOrDefault(DefaultInstance.Line)),
				file: Optional.For(file.GetValueOrDefault(DefaultInstance.File)),
				locationString: Optional.For(locationString.GetValueOrDefault(DefaultInstance.LocationString)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Int32 Column {
			get { return this.column; }
		}
	
		public System.Int32 Line {
			get { return this.line; }
		}
	
		public System.String File {
			get { return this.file; }
		}
	
		public System.String LocationString {
			get { return this.locationString; }
		}
		
		/// <summary>Returns a new instance with the Column property set to the specified value.</summary>
		public ElementLocation WithColumn(System.Int32 value) {
			if (value == this.Column) {
				return this;
			}
		
			return this.With(column: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Line property set to the specified value.</summary>
		public ElementLocation WithLine(System.Int32 value) {
			if (value == this.Line) {
				return this;
			}
		
			return this.With(line: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the File property set to the specified value.</summary>
		public ElementLocation WithFile(System.String value) {
			if (value == this.File) {
				return this;
			}
		
			return this.With(file: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the LocationString property set to the specified value.</summary>
		public ElementLocation WithLocationString(System.String value) {
			if (value == this.LocationString) {
				return this;
			}
		
			return this.With(locationString: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ElementLocation With(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ElementLocation)this.WithCore(
				column: column,
				line: line,
				file: file,
				locationString: locationString);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ElementLocation WithCore(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				column: Optional.For(column.GetValueOrDefault(this.Column)),
				line: Optional.For(line.GetValueOrDefault(this.Line)),
				file: Optional.For(file.GetValueOrDefault(this.File)),
				locationString: Optional.For(locationString.GetValueOrDefault(this.LocationString)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ElementLocation WithFactory(
			ImmutableObjectGraph.Optional<System.Int32> column = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.Int32> line = default(ImmutableObjectGraph.Optional<System.Int32>),
			ImmutableObjectGraph.Optional<System.String> file = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> locationString = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(column.IsDefined && column.Value != this.Column) || 
				(line.IsDefined && line.Value != this.Line) || 
				(file.IsDefined && file.Value != this.File) || 
				(locationString.IsDefined && locationString.Value != this.LocationString)) {
				return new ElementLocation(
					identity: identity.GetValueOrDefault(this.Identity),
					column: column.GetValueOrDefault(this.Column),
					line: line.GetValueOrDefault(this.Line),
					file: file.GetValueOrDefault(this.File),
					locationString: locationString.GetValueOrDefault(this.LocationString));
			} else {
				return this;
			}
		}
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ElementLocation whose fields are initialized with default values.</summary>
		private static ElementLocation GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ElementLocation(
				default(System.Int32), 
				template.Column, 
				template.Line, 
				template.File, 
				template.LocationString);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.Int32 Column { get; set; }
	
			internal System.Int32 Line { get; set; }
	
			internal System.String File { get; set; }
	
			internal System.String LocationString { get; set; }
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ElementLocation immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 column;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Int32 line;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String file;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String locationString;
		
			internal Builder(ElementLocation immutable) {
				this.immutable = immutable;
		
				this.column = immutable.Column;
				this.line = immutable.Line;
				this.file = immutable.File;
				this.locationString = immutable.LocationString;
			}
		
			public System.Int32 Column {
				get {
					return this.column;
				}
		
				set {
					this.column = value;
				}
			}
		
			public System.Int32 Line {
				get {
					return this.line;
				}
		
				set {
					this.line = value;
				}
			}
		
			public System.String File {
				get {
					return this.file;
				}
		
				set {
					this.file = value;
				}
			}
		
			public System.String LocationString {
				get {
					return this.locationString;
				}
		
				set {
					this.locationString = value;
				}
			}
		
			public ElementLocation ToImmutable() {
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Column),
					ImmutableObjectGraph.Optional.For(this.Line),
					ImmutableObjectGraph.Optional.For(this.File),
					ImmutableObjectGraph.Optional.For(this.LocationString));
			}
		}
	}
	
	public interface IProjectElement {
		System.String Condition { get; }
		ElementLocation ConditionLocation { get; }
		System.String Label { get; }
		ElementLocation LabelLocation { get; }
		ElementLocation Location { get; }
	}
	
	public abstract partial class ProjectElement : IProjectElement, IRecursiveType {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String condition;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation conditionLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String label;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation labelLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation location;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ProjectElement class.</summary>
		protected ProjectElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location)
		{
			this.identity = identity;
			this.condition = condition;
			this.conditionLocation = conditionLocation;
			this.label = label;
			this.labelLocation = labelLocation;
			this.location = location;
		}
	
		public System.String Condition {
			get { return this.condition; }
		}
	
		public ElementLocation ConditionLocation {
			get { return this.conditionLocation; }
		}
	
		public System.String Label {
			get { return this.label; }
		}
	
		public ElementLocation LabelLocation {
			get { return this.labelLocation; }
		}
	
		public ElementLocation Location {
			get { return this.location; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public ProjectElement WithCondition(System.String value) {
			if (value == this.Condition) {
				return this;
			}
		
			return this.With(condition: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public ProjectElement WithConditionLocation(ElementLocation value) {
			if (value == this.ConditionLocation) {
				return this;
			}
		
			return this.With(conditionLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public ProjectElement WithLabel(System.String value) {
			if (value == this.Label) {
				return this;
			}
		
			return this.With(label: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public ProjectElement WithLabelLocation(ElementLocation value) {
			if (value == this.LabelLocation) {
				return this;
			}
		
			return this.With(labelLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public ProjectElement WithLocation(ElementLocation value) {
			if (value == this.Location) {
				return this;
			}
		
			return this.With(location: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>));
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!toolsVersionLocation.IsDefined || toolsVersionLocation.Value == that.ToolsVersionLocation) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!defaultTargetsLocation.IsDefined || defaultTargetsLocation.Value == that.DefaultTargetsLocation) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!initialTargetsLocation.IsDefined || initialTargetsLocation.Value == that.InitialTargetsLocation) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty) && 
				    (!treatAsLocalPropertylocation.IsDefined || treatAsLocalPropertylocation.Value == that.TreatAsLocalPropertylocation)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectPropertyElement that = this as ProjectPropertyElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectPropertyElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public virtual ProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectItemElement that = this as ProjectItemElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemElement))) {
				if ((!exclude.IsDefined || exclude.Value == that.Exclude) && 
				    (!excludeLocation.IsDefined || excludeLocation.Value == that.ExcludeLocation) && 
				    (!include.IsDefined || include.Value == that.Include) && 
				    (!includeLocation.IsDefined || includeLocation.Value == that.IncludeLocation) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!keepDuplicates.IsDefined || keepDuplicates.Value == that.KeepDuplicates) && 
				    (!keepDuplicatesLocation.IsDefined || keepDuplicatesLocation.Value == that.KeepDuplicatesLocation) && 
				    (!keepMetadata.IsDefined || keepMetadata.Value == that.KeepMetadata) && 
				    (!keepMetadataLocation.IsDefined || keepMetadataLocation.Value == that.KeepMetadataLocation) && 
				    (!metadata.IsDefined || metadata.Value == that.Metadata) && 
				    (!remove.IsDefined || remove.Value == that.Remove) && 
				    (!removeLocation.IsDefined || removeLocation.Value == that.RemoveLocation) && 
				    (!removeMetadata.IsDefined || removeMetadata.Value == that.RemoveMetadata) && 
				    (!removeMetadataLocation.IsDefined || removeMetadataLocation.Value == that.RemoveMetadataLocation)) {
					return that;
				}
			}
		
			return ProjectItemElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				exclude: exclude,
				excludeLocation: excludeLocation,
				include: include,
				includeLocation: includeLocation,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepDuplicatesLocation: keepDuplicatesLocation,
				keepMetadata: keepMetadata,
				keepMetadataLocation: keepMetadataLocation,
				metadata: metadata,
				remove: remove,
				removeLocation: removeLocation,
				removeMetadata: removeMetadata,
				removeMetadataLocation: removeMetadataLocation);
		}
		
		public virtual ProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectMetadataElement that = this as ProjectMetadataElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectMetadataElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectMetadataElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public Builder ToBuilder() {
			return new Builder(this);
		}
		
		public partial class Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String condition;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> conditionLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String label;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> labelLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> location;
		
			internal Builder(ProjectElement immutable) {
				this.immutable = immutable;
		
				this.condition = immutable.Condition;
				this.label = immutable.Label;
			}
		
			public System.String Condition {
				get {
					return this.condition;
				}
		
				set {
					this.condition = value;
				}
			}
		
			public ElementLocation.Builder ConditionLocation {
				get {
					if (!this.conditionLocation.IsDefined) {
						this.conditionLocation = this.immutable.conditionLocation != null ? this.immutable.conditionLocation.ToBuilder() : null;
					}
		
					return this.conditionLocation.Value;
				}
		
				set {
					this.conditionLocation = value;
				}
			}
		
			public System.String Label {
				get {
					return this.label;
				}
		
				set {
					this.label = value;
				}
			}
		
			public ElementLocation.Builder LabelLocation {
				get {
					if (!this.labelLocation.IsDefined) {
						this.labelLocation = this.immutable.labelLocation != null ? this.immutable.labelLocation.ToBuilder() : null;
					}
		
					return this.labelLocation.Value;
				}
		
				set {
					this.labelLocation = value;
				}
			}
		
			public ElementLocation.Builder Location {
				get {
					if (!this.location.IsDefined) {
						this.location = this.immutable.location != null ? this.immutable.location.ToBuilder() : null;
					}
		
					return this.location.Value;
				}
		
				set {
					this.location = value;
				}
			}
		
			public ProjectElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location));
			}
		}
	
		int IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public interface IProjectElementContainer : IProjectElement {
		System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; }
	}
	
	public abstract partial class ProjectElementContainer : ProjectElement, IProjectElementContainer, System.Collections.Generic.IEnumerable<ProjectElement>, IRecursiveParentWithOrderedChildren {
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectElement> children;
	
		/// <summary>Initializes a new instance of the ProjectElementContainer class.</summary>
		protected ProjectElementContainer(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>))
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.children = children;
			this.InitializeLookup(lookupTable);
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectElement> Children {
			get { return this.children; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectElementContainer WithCondition(System.String value) {
			return (ProjectElementContainer)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectElementContainer WithConditionLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectElementContainer WithLabel(System.String value) {
			return (ProjectElementContainer)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectElementContainer WithLabelLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectElementContainer WithLocation(ElementLocation value) {
			return (ProjectElementContainer)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public ProjectElementContainer WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			if (value == this.Children) {
				return this;
			}
		
			return this.With(children: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ProjectElementContainer AddChild(ProjectElement value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public ProjectElementContainer RemoveChild(ProjectElement value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElementContainer With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectElementContainer)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
	
		public System.Collections.Generic.IEnumerator<ProjectElement> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
		
		protected ProjectElement SyncImmediateChildToCurrentVersion(ProjectElement child) {
			ProjectElement currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public ProjectElementContainer AddDescendent(ProjectElement value, ProjectElementContainer parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public ProjectElementContainer RemoveDescendent(ProjectElement value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (ProjectElementContainer)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((ProjectElement)newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		public ProjectElementContainer ReplaceDescendent(ProjectElement current, ProjectElement replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (ProjectElementContainer)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		private System.Collections.Immutable.ImmutableStack<ProjectElement> ReplaceDescendent(System.Collections.Immutable.ImmutableStack<ProjectElement> spine, System.Collections.Immutable.ImmutableStack<ProjectElement> replacementStackTip, bool spineIncludesDeletedElement) {
			Debug.Assert(this == spine.Peek());
			var remainingSpine = spine.Pop();
			if (remainingSpine.IsEmpty || (spineIncludesDeletedElement && remainingSpine.Pop().IsEmpty)) {
				// This is the instance to be changed.
				return replacementStackTip;
			}
		
			System.Collections.Immutable.ImmutableStack<ProjectElement> newChildSpine;
			var child = remainingSpine.Peek();
			var recursiveChild = child as ProjectElementContainer;
			if (recursiveChild != null) {
				newChildSpine = recursiveChild.ReplaceDescendent(remainingSpine, replacementStackTip, spineIncludesDeletedElement);
			} else {
				Debug.Assert(remainingSpine.Pop().IsEmpty); // we should be at the tail of the stack, since we're at a leaf.
				Debug.Assert(this.Children.Contains(child));
				newChildSpine = replacementStackTip;
			}
		
			var newChildren = this.Children.Replace(child, newChildSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
			if (newSelf.lookupTable == lookupTableLazySentinal && this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = this.FixupLookupTable(ImmutableDeque.Create(newChildSpine), ImmutableDeque.Create(remainingSpine));
				newSelf.ValidateInternalIntegrityDebugOnly();
			}
		
			return newChildSpine.Push(newSelf);
		}
		
		/// <summary>
		/// Produces a fast lookup table based on an existing one, if this node has one, to account for an updated spine among its descendents.
		/// </summary>
		/// <param name="updatedSpine">
		/// The spine of this node's new descendents' instances that are created for this change.
		/// The head is an immediate child of the new instance for this node.
		/// The tail is the node that was added or replaced.
		/// </param>
		/// <param name="oldSpine">
		/// The spine of this node's descendents that have been changed in this delta.
		/// The head is an immediate child of this instance.
		/// The tail is the node that was removed or replaced.
		/// </param>
		/// <returns>An updated lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> FixupLookupTable(ImmutableObjectGraph.ImmutableDeque<ProjectElement> updatedSpine, ImmutableObjectGraph.ImmutableDeque<ProjectElement> oldSpine) {
			if (this.lookupTable == null || this.lookupTable == lookupTableLazySentinal) {
				// We don't already have a lookup table to base this on, so leave it to the new instance to lazily construct.
				return lookupTableLazySentinal;
			}
		
			if ((updatedSpine.IsEmpty && oldSpine.IsEmpty) ||
				(updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead(), oldSpine.PeekHead()))) {
				// No changes were actually made.
				return this.lookupTable;
			}
		
			var lookupTable = this.lookupTable.ToBuilder();
		
			// Classify the kind of change that has just occurred.
			var oldSpineTail = oldSpine.PeekTail();
			var newSpineTail = updatedSpine.PeekTail();
			ChangeKind changeKind;
			bool childrenChanged = false;
			if (updatedSpine.Count == oldSpine.Count) {
				changeKind = ChangeKind.Replaced;
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				var newSpineTailRecursive = newSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null || newSpineTailRecursive != null) {
					// Children have changed if either before or after type didn't have a children property,
					// or if both did, but the children actually changed.
					childrenChanged = oldSpineTailRecursive == null || newSpineTailRecursive == null
						|| !System.Object.ReferenceEquals(oldSpineTailRecursive.Children, newSpineTailRecursive.Children);
				}
			} else if (updatedSpine.Count > oldSpine.Count) {
				changeKind = ChangeKind.Added;
			} else // updatedSpine.Count < oldSpine.Count
			{
				changeKind = ChangeKind.Removed;
			}
		
			// Trim the lookup table of any entries for nodes that have been removed from the tree.
			if (childrenChanged || changeKind == ChangeKind.Removed) {
				// We need to remove all descendents of the old tail node.
				lookupTable.RemoveRange(oldSpineTail.GetSelfAndDescendents().Select(n => n.Identity));
			} else if (changeKind == ChangeKind.Replaced && oldSpineTail.Identity != newSpineTail.Identity) {
				// The identity of the node was changed during the replacement.  We must explicitly remove the old entry
				// from our lookup table in this case.
				lookupTable.Remove(oldSpineTail.Identity);
		
				// We also need to update any immediate children of the old spine tail
				// because the identity of their parent has changed.
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null) {
					foreach (var child in oldSpineTailRecursive) {
						lookupTable[child.Identity] = new System.Collections.Generic.KeyValuePair<ProjectElement, int>(child, newSpineTail.Identity);
					}
				}
			}
		
			// Update our lookup table so that it includes (updated) entries for every member of the spine itself.
			ProjectElement parent = this;
			foreach (var node in updatedSpine) {
				// Remove and add rather than use the Set method, since the old and new node are equal (in identity) therefore the map class will
				// assume no change is relevant and not apply the change.
				lookupTable.Remove(node.Identity);
				lookupTable.Add(node.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, int>(node, parent.Identity));
				parent = node;
			}
		
			// There may be children on the added node that we should include.
			if (childrenChanged || changeKind == ChangeKind.Added) {
				var recursiveParent = parent as ProjectElementContainer;
				if (recursiveParent != null) {
					recursiveParent.ContributeDescendentsToLookupTable(lookupTable);
				}
			}
		
			return lookupTable.ToImmutable();
		}
		
		/// <summary>
		/// Validates this node and all its descendents <em>only in DEBUG builds</em>.
		/// </summary>
		[Conditional("DEBUG")]
		private void ValidateInternalIntegrityDebugOnly() {
			this.ValidateInternalIntegrity();
		}
		
		/// <summary>
		/// Validates this node and all its descendents.
		/// </summary>
		protected internal void ValidateInternalIntegrity() {
			// Each node id appears at most once.
			var observedIdentities = new System.Collections.Generic.HashSet<int>();
			foreach (var node in this.GetSelfAndDescendents()) {
				if (!observedIdentities.Add(node.Identity)) {
					throw new RecursiveChildNotUniqueException(node.Identity);
				}
			}
		
			// The lookup table (if any) accurately describes the contents of this tree.
			if (this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// The table should have one entry for every *descendent* of this node (not this node itself).
				int expectedCount = this.GetSelfAndDescendents().Count() - 1;
				int actualCount = this.lookupTable.Count;
				if (actualCount != expectedCount) {
					throw new System.ApplicationException(string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expected {0} entries in lookup table but found {1}.", expectedCount, actualCount));
				}
		
				this.ValidateLookupTable(this.lookupTable);
			}
		}
		
		/// <summary>
		/// Validates that the contents of a lookup table are valid for all descendent nodes of this node.
		/// </summary>
		/// <param name="lookupTable">The lookup table being validated.</param>
		private void ValidateLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable) {
			const string ErrorString = "Lookup table integrity failure.";
		
			foreach (var child in this.Children) {
				var entry = lookupTable[child.Identity];
				if (!object.ReferenceEquals(entry.Key, child)) {
					throw new System.ApplicationException(ErrorString);
				}
		
				if (entry.Value != this.Identity) {
					throw new System.ApplicationException(ErrorString);
				}
		
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ValidateLookupTable(lookupTable);
				}
			}
		}
		
		private static readonly System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTableLazySentinal = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().Add(default(System.Int32), new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>());
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable;
		
		private int inefficiencyLoad;
		
		/// <summary>
		/// The maximum number of steps allowable for a search to be done among this node's children
		/// before a faster lookup table will be built.
		/// </summary>
		internal const int InefficiencyLoadThreshold = 16;
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> LookupTable {
			get {
				if (this.lookupTable == lookupTableLazySentinal) {
					this.lookupTable = this.CreateLookupTable();
					this.inefficiencyLoad = 1;
				}
		
				return this.lookupTable;
			}
		}
		
		private void InitializeLookup(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> priorLookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>)) {
			this.inefficiencyLoad = 1;
			if (priorLookupTable.IsDefined && priorLookupTable.Value != null) {
				this.lookupTable = priorLookupTable.Value;
			} else {
				if (this.children != null) {
					foreach (var child in this.children)
					{
						var recursiveChild = child as ProjectElementContainer;
						this.inefficiencyLoad += recursiveChild != null ? recursiveChild.inefficiencyLoad : 1;
					}
				}
		
				if (this.inefficiencyLoad > InefficiencyLoadThreshold) {
					this.inefficiencyLoad = 1;
					this.lookupTable = lookupTableLazySentinal;
				}
			}
		
			this.ValidateInternalIntegrityDebugOnly();
		}
		
		/// <summary>
		/// Creates the lookup table that will contain all this node's children.
		/// </summary>
		/// <returns>The lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> CreateLookupTable() {
			var table = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().ToBuilder();
			this.ContributeDescendentsToLookupTable(table);
			return table.ToImmutable();
		}
		
		/// <summary>
		/// Adds this node's children (recursively) to the lookup table.
		/// </summary>
		/// <param name="seedLookupTable">The lookup table to add entries to.</param>
		/// <returns>The new lookup table.</returns>
		private void ContributeDescendentsToLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>.Builder seedLookupTable)
		{
			foreach (var child in this.Children)
			{
				seedLookupTable.Add(child.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>(child, this.Identity));
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ContributeDescendentsToLookupTable(seedLookupTable);
				}
			}
		}
		
		public bool TryFind(System.Int32 identity, out ProjectElement value) {
			if (this.Identity.Equals(identity)) {
				value = this;
				return true;
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child and its descendents.
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						if (recursiveChild.TryFind(identity, out value)) {
							return true;
						}
					} else {
						if (child.Identity.Equals(identity)) {
							value = child;
							return true;
						}
					}
				}
			}
		
			value = null;
			return false;
		}
		
		public ProjectElement Find(System.Int32 identity) {
			ProjectElement result;
			if (this.TryFind(identity, out result)) {
				return result;
			}
		
			throw new System.Collections.Generic.KeyNotFoundException();
		}
		
		public bool TryFindImmediateChild(System.Int32 identity, out ProjectElement value) {
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue) && lookupValue.Value == this.Identity) {
					value = lookupValue.Key;
					return true;
				}
			} else {
				// No lookup table means we have to exhaustively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						value = child;
						return true;
					}
				}
			}
		
			value = null;
			return false;
		}
		
		/// <summary>Checks whether an object with the specified identity is among this object's descendents.</summary>
		public bool Contains(System.Int32 identity) {
			ProjectElement result;
			return this.TryFind(identity, out result) && result != this;
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ParentedRecursiveType<ProjectElementContainer, ProjectElement> GetParentedNode(System.Int32 identity) {
			if (this.Identity == identity) {
				return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this, null);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					var parentIdentity = lookupValue.Value;
					return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this.LookupTable[identity].Key, (ProjectElementContainer)this.Find(parentIdentity));
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(child, this);
					}
		
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						var childResult = recursiveChild.GetParentedNode(identity);
						if (childResult.Value != null) {
							return childResult;
						}
					} 
				}
			}
		
			return default(ParentedRecursiveType<ProjectElementContainer, ProjectElement>);
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ProjectElementContainer GetParent(ProjectElement descendent) {
			return this.GetParentedNode(descendent.Identity).Parent;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(System.Int32 descendent) {
			var emptySpine = System.Collections.Immutable.ImmutableStack.Create<ProjectElement>();
			if (this.Identity.Equals(descendent)) {
				return emptySpine.Push(this);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent, out lookupValue))
				{
					// Awesome.  We know the node the caller is looking for is a descendent of this node.
					// Now just string together all the nodes that connect this one with the sought one.
					var spine = emptySpine;
					do
					{
						spine = spine.Push(lookupValue.Key);
					}
					while (this.lookupTable.TryGetValue(lookupValue.Value, out lookupValue));
					return spine.Push(this);
				}
			} else {
				// We don't have an efficient lookup table for this node.  Aggressively search every child.
				var spine = emptySpine;
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						spine = recursiveChild.GetSpine(descendent);
					} else if (child.Identity.Equals(descendent)) {
						spine = spine.Push(child);
					}
		
					if (!spine.IsEmpty) {
						return spine.Push(this);
					}
				}
			}
		
			// The descendent is not in this sub-tree.
			return emptySpine;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(ProjectElement descendent) {
			return this.GetSpine(descendent.Identity);
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!toolsVersionLocation.IsDefined || toolsVersionLocation.Value == that.ToolsVersionLocation) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!defaultTargetsLocation.IsDefined || defaultTargetsLocation.Value == that.DefaultTargetsLocation) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!initialTargetsLocation.IsDefined || initialTargetsLocation.Value == that.InitialTargetsLocation) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty) && 
				    (!treatAsLocalPropertylocation.IsDefined || treatAsLocalPropertylocation.Value == that.TreatAsLocalPropertylocation)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public override ProjectRootElement ToProjectRootElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return base.ToProjectRootElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					toolsVersionLocation: toolsVersionLocation,
					defaultTargets: defaultTargets,
					defaultTargetsLocation: defaultTargetsLocation,
					initialTargets: initialTargets,
					initialTargetsLocation: initialTargetsLocation,
					treatAsLocalProperty: treatAsLocalProperty,
					treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				return that;
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				conditionLocation: Optional.For(this.ConditionLocation),
				label: Optional.For(this.Label),
				labelLocation: Optional.For(this.LabelLocation),
				location: Optional.For(this.Location),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectPropertyGroupElement ToProjectPropertyGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectPropertyGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectElementContainer immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>.Builder> children;
		
			internal Builder(ProjectElementContainer immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectElement>.Builder Children {
				get {
					if (!this.children.IsDefined) {
						this.children = this.immutable.children != null ? this.immutable.children.ToBuilder() : null;
					}
		
					return this.children.Value;
				}
		
				set {
					this.children = value;
				}
			}
		
			public new ProjectElementContainer ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children));
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((ProjectElement)value);
		}
	}
	
	public interface IProjectRootElement : IProjectElementContainer {
		System.String FullPath { get; }
		System.Text.Encoding Encoding { get; }
		System.String ToolsVersion { get; }
		ElementLocation ToolsVersionLocation { get; }
		System.String DefaultTargets { get; }
		ElementLocation DefaultTargetsLocation { get; }
		System.String InitialTargets { get; }
		ElementLocation InitialTargetsLocation { get; }
		System.Boolean TreatAsLocalProperty { get; }
		ElementLocation TreatAsLocalPropertylocation { get; }
	}
	
	public partial class ProjectRootElement : ProjectElementContainer, IProjectRootElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectRootElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String fullPath;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Text.Encoding encoding;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String toolsVersion;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation toolsVersionLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String defaultTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation defaultTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String initialTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation initialTargetsLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean treatAsLocalProperty;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation treatAsLocalPropertylocation;
	
		/// <summary>Initializes a new instance of the ProjectRootElement class.</summary>
		protected ProjectRootElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String fullPath,
			System.Text.Encoding encoding,
			System.String toolsVersion,
			ElementLocation toolsVersionLocation,
			System.String defaultTargets,
			ElementLocation defaultTargetsLocation,
			System.String initialTargets,
			ElementLocation initialTargetsLocation,
			System.Boolean treatAsLocalProperty,
			ElementLocation treatAsLocalPropertylocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.fullPath = fullPath;
			this.encoding = encoding;
			this.toolsVersion = toolsVersion;
			this.toolsVersionLocation = toolsVersionLocation;
			this.defaultTargets = defaultTargets;
			this.defaultTargetsLocation = defaultTargetsLocation;
			this.initialTargets = initialTargets;
			this.initialTargetsLocation = initialTargetsLocation;
			this.treatAsLocalProperty = treatAsLocalProperty;
			this.treatAsLocalPropertylocation = treatAsLocalPropertylocation;
			this.Validate();
		}
	
		public static ProjectRootElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
				toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(DefaultInstance.ToolsVersionLocation)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
				defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(DefaultInstance.DefaultTargetsLocation)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
				initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(DefaultInstance.InitialTargetsLocation)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
				treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(DefaultInstance.TreatAsLocalPropertylocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String FullPath {
			get { return this.fullPath; }
		}
	
		public System.Text.Encoding Encoding {
			get { return this.encoding; }
		}
	
		public System.String ToolsVersion {
			get { return this.toolsVersion; }
		}
	
		public ElementLocation ToolsVersionLocation {
			get { return this.toolsVersionLocation; }
		}
	
		public System.String DefaultTargets {
			get { return this.defaultTargets; }
		}
	
		public ElementLocation DefaultTargetsLocation {
			get { return this.defaultTargetsLocation; }
		}
	
		public System.String InitialTargets {
			get { return this.initialTargets; }
		}
	
		public ElementLocation InitialTargetsLocation {
			get { return this.initialTargetsLocation; }
		}
	
		public System.Boolean TreatAsLocalProperty {
			get { return this.treatAsLocalProperty; }
		}
	
		public ElementLocation TreatAsLocalPropertylocation {
			get { return this.treatAsLocalPropertylocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectRootElement WithCondition(System.String value) {
			return (ProjectRootElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectRootElement WithConditionLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectRootElement WithLabel(System.String value) {
			return (ProjectRootElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectRootElement WithLabelLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectRootElement WithLocation(ElementLocation value) {
			return (ProjectRootElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectRootElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectRootElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectRootElement AddChild(ProjectElement value) {
			return (ProjectRootElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectRootElement RemoveChild(ProjectElement value) {
			return (ProjectRootElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren() {
			return (ProjectRootElement)base.RemoveChildren();
		}
		
		
		/// <summary>Returns a new instance with the FullPath property set to the specified value.</summary>
		public ProjectRootElement WithFullPath(System.String value) {
			if (value == this.FullPath) {
				return this;
			}
		
			return this.With(fullPath: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Encoding property set to the specified value.</summary>
		public ProjectRootElement WithEncoding(System.Text.Encoding value) {
			if (value == this.Encoding) {
				return this;
			}
		
			return this.With(encoding: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ToolsVersion property set to the specified value.</summary>
		public ProjectRootElement WithToolsVersion(System.String value) {
			if (value == this.ToolsVersion) {
				return this;
			}
		
			return this.With(toolsVersion: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ToolsVersionLocation property set to the specified value.</summary>
		public ProjectRootElement WithToolsVersionLocation(ElementLocation value) {
			if (value == this.ToolsVersionLocation) {
				return this;
			}
		
			return this.With(toolsVersionLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DefaultTargets property set to the specified value.</summary>
		public ProjectRootElement WithDefaultTargets(System.String value) {
			if (value == this.DefaultTargets) {
				return this;
			}
		
			return this.With(defaultTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the DefaultTargetsLocation property set to the specified value.</summary>
		public ProjectRootElement WithDefaultTargetsLocation(ElementLocation value) {
			if (value == this.DefaultTargetsLocation) {
				return this;
			}
		
			return this.With(defaultTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the InitialTargets property set to the specified value.</summary>
		public ProjectRootElement WithInitialTargets(System.String value) {
			if (value == this.InitialTargets) {
				return this;
			}
		
			return this.With(initialTargets: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the InitialTargetsLocation property set to the specified value.</summary>
		public ProjectRootElement WithInitialTargetsLocation(ElementLocation value) {
			if (value == this.InitialTargetsLocation) {
				return this;
			}
		
			return this.With(initialTargetsLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TreatAsLocalProperty property set to the specified value.</summary>
		public ProjectRootElement WithTreatAsLocalProperty(System.Boolean value) {
			if (value == this.TreatAsLocalProperty) {
				return this;
			}
		
			return this.With(treatAsLocalProperty: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the TreatAsLocalPropertylocation property set to the specified value.</summary>
		public ProjectRootElement WithTreatAsLocalPropertylocation(ElementLocation value) {
			if (value == this.TreatAsLocalPropertylocation) {
				return this;
			}
		
			return this.With(treatAsLocalPropertylocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectRootElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectRootElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				toolsVersionLocation: toolsVersionLocation,
				defaultTargets: defaultTargets,
				defaultTargetsLocation: defaultTargetsLocation,
				initialTargets: initialTargets,
				initialTargetsLocation: initialTargetsLocation,
				treatAsLocalProperty: treatAsLocalProperty,
				treatAsLocalPropertylocation: treatAsLocalPropertylocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectRootElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(this.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(this.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(this.ToolsVersion)),
				toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(this.ToolsVersionLocation)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(this.DefaultTargets)),
				defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(this.DefaultTargetsLocation)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(this.InitialTargets)),
				initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(this.InitialTargetsLocation)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty)),
				treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(this.TreatAsLocalPropertylocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectRootElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children) || 
				(fullPath.IsDefined && fullPath.Value != this.FullPath) || 
				(encoding.IsDefined && encoding.Value != this.Encoding) || 
				(toolsVersion.IsDefined && toolsVersion.Value != this.ToolsVersion) || 
				(toolsVersionLocation.IsDefined && toolsVersionLocation.Value != this.ToolsVersionLocation) || 
				(defaultTargets.IsDefined && defaultTargets.Value != this.DefaultTargets) || 
				(defaultTargetsLocation.IsDefined && defaultTargetsLocation.Value != this.DefaultTargetsLocation) || 
				(initialTargets.IsDefined && initialTargets.Value != this.InitialTargets) || 
				(initialTargetsLocation.IsDefined && initialTargetsLocation.Value != this.InitialTargetsLocation) || 
				(treatAsLocalProperty.IsDefined && treatAsLocalProperty.Value != this.TreatAsLocalProperty) || 
				(treatAsLocalPropertylocation.IsDefined && treatAsLocalPropertylocation.Value != this.TreatAsLocalPropertylocation)) {
				return new ProjectRootElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children),
					fullPath: fullPath.GetValueOrDefault(this.FullPath),
					encoding: encoding.GetValueOrDefault(this.Encoding),
					toolsVersion: toolsVersion.GetValueOrDefault(this.ToolsVersion),
					toolsVersionLocation: toolsVersionLocation.GetValueOrDefault(this.ToolsVersionLocation),
					defaultTargets: defaultTargets.GetValueOrDefault(this.DefaultTargets),
					defaultTargetsLocation: defaultTargetsLocation.GetValueOrDefault(this.DefaultTargetsLocation),
					initialTargets: initialTargets.GetValueOrDefault(this.InitialTargets),
					initialTargetsLocation: initialTargetsLocation.GetValueOrDefault(this.InitialTargetsLocation),
					treatAsLocalProperty: treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty),
					treatAsLocalPropertylocation: treatAsLocalPropertylocation.GetValueOrDefault(this.TreatAsLocalPropertylocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectRootElement whose fields are initialized with default values.</summary>
		private static ProjectRootElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectRootElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children, 
				template.FullPath, 
				template.Encoding, 
				template.ToolsVersion, 
				template.ToolsVersionLocation, 
				template.DefaultTargets, 
				template.DefaultTargetsLocation, 
				template.InitialTargets, 
				template.InitialTargetsLocation, 
				template.TreatAsLocalProperty, 
				template.TreatAsLocalPropertylocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String FullPath { get; set; }
	
			internal System.Text.Encoding Encoding { get; set; }
	
			internal System.String ToolsVersion { get; set; }
	
			internal ElementLocation ToolsVersionLocation { get; set; }
	
			internal System.String DefaultTargets { get; set; }
	
			internal ElementLocation DefaultTargetsLocation { get; set; }
	
			internal System.String InitialTargets { get; set; }
	
			internal ElementLocation InitialTargetsLocation { get; set; }
	
			internal System.Boolean TreatAsLocalProperty { get; set; }
	
			internal ElementLocation TreatAsLocalPropertylocation { get; set; }
		}
		
		internal static ProjectRootElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> toolsVersionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> defaultTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> initialTargetsLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<ElementLocation> treatAsLocalPropertylocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
					encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
					toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
					toolsVersionLocation: Optional.For(toolsVersionLocation.GetValueOrDefault(DefaultInstance.ToolsVersionLocation)),
					defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
					defaultTargetsLocation: Optional.For(defaultTargetsLocation.GetValueOrDefault(DefaultInstance.DefaultTargetsLocation)),
					initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
					initialTargetsLocation: Optional.For(initialTargetsLocation.GetValueOrDefault(DefaultInstance.InitialTargetsLocation)),
					treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
					treatAsLocalPropertylocation: Optional.For(treatAsLocalPropertylocation.GetValueOrDefault(DefaultInstance.TreatAsLocalPropertylocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectRootElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String fullPath;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Text.Encoding encoding;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String toolsVersion;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> toolsVersionLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String defaultTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> defaultTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String initialTargets;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> initialTargetsLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.Boolean treatAsLocalProperty;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> treatAsLocalPropertylocation;
		
			internal Builder(ProjectRootElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.fullPath = immutable.FullPath;
				this.encoding = immutable.Encoding;
				this.toolsVersion = immutable.ToolsVersion;
				this.defaultTargets = immutable.DefaultTargets;
				this.initialTargets = immutable.InitialTargets;
				this.treatAsLocalProperty = immutable.TreatAsLocalProperty;
			}
		
			public System.String FullPath {
				get {
					return this.fullPath;
				}
		
				set {
					this.fullPath = value;
				}
			}
		
			public System.Text.Encoding Encoding {
				get {
					return this.encoding;
				}
		
				set {
					this.encoding = value;
				}
			}
		
			public System.String ToolsVersion {
				get {
					return this.toolsVersion;
				}
		
				set {
					this.toolsVersion = value;
				}
			}
		
			public ElementLocation.Builder ToolsVersionLocation {
				get {
					if (!this.toolsVersionLocation.IsDefined) {
						this.toolsVersionLocation = this.immutable.toolsVersionLocation != null ? this.immutable.toolsVersionLocation.ToBuilder() : null;
					}
		
					return this.toolsVersionLocation.Value;
				}
		
				set {
					this.toolsVersionLocation = value;
				}
			}
		
			public System.String DefaultTargets {
				get {
					return this.defaultTargets;
				}
		
				set {
					this.defaultTargets = value;
				}
			}
		
			public ElementLocation.Builder DefaultTargetsLocation {
				get {
					if (!this.defaultTargetsLocation.IsDefined) {
						this.defaultTargetsLocation = this.immutable.defaultTargetsLocation != null ? this.immutable.defaultTargetsLocation.ToBuilder() : null;
					}
		
					return this.defaultTargetsLocation.Value;
				}
		
				set {
					this.defaultTargetsLocation = value;
				}
			}
		
			public System.String InitialTargets {
				get {
					return this.initialTargets;
				}
		
				set {
					this.initialTargets = value;
				}
			}
		
			public ElementLocation.Builder InitialTargetsLocation {
				get {
					if (!this.initialTargetsLocation.IsDefined) {
						this.initialTargetsLocation = this.immutable.initialTargetsLocation != null ? this.immutable.initialTargetsLocation.ToBuilder() : null;
					}
		
					return this.initialTargetsLocation.Value;
				}
		
				set {
					this.initialTargetsLocation = value;
				}
			}
		
			public System.Boolean TreatAsLocalProperty {
				get {
					return this.treatAsLocalProperty;
				}
		
				set {
					this.treatAsLocalProperty = value;
				}
			}
		
			public ElementLocation.Builder TreatAsLocalPropertylocation {
				get {
					if (!this.treatAsLocalPropertylocation.IsDefined) {
						this.treatAsLocalPropertylocation = this.immutable.treatAsLocalPropertylocation != null ? this.immutable.treatAsLocalPropertylocation.ToBuilder() : null;
					}
		
					return this.treatAsLocalPropertylocation.Value;
				}
		
				set {
					this.treatAsLocalPropertylocation = value;
				}
			}
		
			public new ProjectRootElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				var toolsVersionLocation = this.toolsVersionLocation.IsDefined ? (this.toolsVersionLocation.Value != null ? this.toolsVersionLocation.Value.ToImmutable() : null) : this.immutable.ToolsVersionLocation;
				var defaultTargetsLocation = this.defaultTargetsLocation.IsDefined ? (this.defaultTargetsLocation.Value != null ? this.defaultTargetsLocation.Value.ToImmutable() : null) : this.immutable.DefaultTargetsLocation;
				var initialTargetsLocation = this.initialTargetsLocation.IsDefined ? (this.initialTargetsLocation.Value != null ? this.initialTargetsLocation.Value.ToImmutable() : null) : this.immutable.InitialTargetsLocation;
				var treatAsLocalPropertylocation = this.treatAsLocalPropertylocation.IsDefined ? (this.treatAsLocalPropertylocation.Value != null ? this.treatAsLocalPropertylocation.Value.ToImmutable() : null) : this.immutable.TreatAsLocalPropertylocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(children),
					ImmutableObjectGraph.Optional.For(this.FullPath),
					ImmutableObjectGraph.Optional.For(this.Encoding),
					ImmutableObjectGraph.Optional.For(this.ToolsVersion),
					ImmutableObjectGraph.Optional.For(toolsVersionLocation),
					ImmutableObjectGraph.Optional.For(this.DefaultTargets),
					ImmutableObjectGraph.Optional.For(defaultTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.InitialTargets),
					ImmutableObjectGraph.Optional.For(initialTargetsLocation),
					ImmutableObjectGraph.Optional.For(this.TreatAsLocalProperty),
					ImmutableObjectGraph.Optional.For(treatAsLocalPropertylocation));
			}
		}
	}
	
	public interface IProjectPropertyGroupElement : IProjectElementContainer {
	}
	
	public partial class ProjectPropertyGroupElement : ProjectElementContainer, IProjectPropertyGroupElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectPropertyGroupElement class.</summary>
		protected ProjectPropertyGroupElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.Collections.Immutable.ImmutableList<ProjectElement> children)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children)
		{
			this.Validate();
		}
	
		public static ProjectPropertyGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance;
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithCondition(System.String value) {
			return (ProjectPropertyGroupElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithConditionLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLabel(System.String value) {
			return (ProjectPropertyGroupElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLabelLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithLocation(ElementLocation value) {
			return (ProjectPropertyGroupElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Children property set to the specified value.</summary>
		public new ProjectPropertyGroupElement WithChildren(System.Collections.Immutable.ImmutableList<ProjectElement> value) {
			return (ProjectPropertyGroupElement)base.WithChildren(value);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren() {
			return (ProjectPropertyGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectPropertyGroupElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectPropertyGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyGroupElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyGroupElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Children);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		internal static ProjectPropertyGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElementContainer.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectPropertyGroupElement immutable;
		
			internal Builder(ProjectPropertyGroupElement immutable) : base(immutable) {
				this.immutable = immutable;
		
			}
		
			public new ProjectPropertyGroupElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var children = this.children.IsDefined ? (this.children.Value != null ? this.children.Value.ToImmutable() : null) : this.immutable.Children;
				return this.immutable = this.immutable;
			}
		}
	}
	
	public interface IProjectPropertyElement : IProjectElement {
		System.String Name { get; }
		System.String Value { get; }
	}
	
	public partial class ProjectPropertyElement : ProjectElement, IProjectPropertyElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectPropertyElement class.</summary>
		protected ProjectPropertyElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String name,
			System.String value)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.name = name;
			this.value = value;
			this.Validate();
		}
	
		public static ProjectPropertyElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectPropertyElement WithCondition(System.String value) {
			return (ProjectPropertyElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectPropertyElement WithConditionLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectPropertyElement WithLabel(System.String value) {
			return (ProjectPropertyElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectPropertyElement WithLabelLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectPropertyElement WithLocation(ElementLocation value) {
			return (ProjectPropertyElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectPropertyElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public ProjectPropertyElement WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectPropertyElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectPropertyElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectPropertyElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Name, 
				template.Value);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static ProjectPropertyElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectPropertyElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String value;
		
			internal Builder(ProjectPropertyElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.name = immutable.Name;
				this.value = immutable.Value;
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public System.String Value {
				get {
					return this.value;
				}
		
				set {
					this.value = value;
				}
			}
		
			public new ProjectPropertyElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(this.Value));
			}
		}
	}
	
	public interface IProjectItemElement : IProjectElement {
		System.String Exclude { get; }
		ElementLocation ExcludeLocation { get; }
		System.String Include { get; }
		ElementLocation IncludeLocation { get; }
		System.String ItemType { get; }
		System.String KeepDuplicates { get; }
		ElementLocation KeepDuplicatesLocation { get; }
		System.String KeepMetadata { get; }
		ElementLocation KeepMetadataLocation { get; }
		System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; }
		System.String Remove { get; }
		ElementLocation RemoveLocation { get; }
		System.String RemoveMetadata { get; }
		ElementLocation RemoveMetadataLocation { get; }
	}
	
	public partial class ProjectItemElement : ProjectElement, IProjectItemElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String exclude;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation excludeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String include;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation includeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepDuplicates;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation keepDuplicatesLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepMetadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation keepMetadataLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String remove;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation removeLocation;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String removeMetadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly ElementLocation removeMetadataLocation;
	
		/// <summary>Initializes a new instance of the ProjectItemElement class.</summary>
		protected ProjectItemElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String exclude,
			ElementLocation excludeLocation,
			System.String include,
			ElementLocation includeLocation,
			System.String itemType,
			System.String keepDuplicates,
			ElementLocation keepDuplicatesLocation,
			System.String keepMetadata,
			ElementLocation keepMetadataLocation,
			System.Collections.Immutable.ImmutableList<ProjectMetadataElement> metadata,
			System.String remove,
			ElementLocation removeLocation,
			System.String removeMetadata,
			ElementLocation removeMetadataLocation)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.exclude = exclude;
			this.excludeLocation = excludeLocation;
			this.include = include;
			this.includeLocation = includeLocation;
			this.itemType = itemType;
			this.keepDuplicates = keepDuplicates;
			this.keepDuplicatesLocation = keepDuplicatesLocation;
			this.keepMetadata = keepMetadata;
			this.keepMetadataLocation = keepMetadataLocation;
			this.metadata = metadata;
			this.remove = remove;
			this.removeLocation = removeLocation;
			this.removeMetadata = removeMetadata;
			this.removeMetadataLocation = removeMetadataLocation;
			this.Validate();
		}
	
		public static ProjectItemElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
				excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(DefaultInstance.ExcludeLocation)),
				include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
				includeLocation: Optional.For(includeLocation.GetValueOrDefault(DefaultInstance.IncludeLocation)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
				keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(DefaultInstance.KeepDuplicatesLocation)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
				keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(DefaultInstance.KeepMetadataLocation)),
				metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
				remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
				removeLocation: Optional.For(removeLocation.GetValueOrDefault(DefaultInstance.RemoveLocation)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
				removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(DefaultInstance.RemoveMetadataLocation)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Exclude {
			get { return this.exclude; }
		}
	
		public ElementLocation ExcludeLocation {
			get { return this.excludeLocation; }
		}
	
		public System.String Include {
			get { return this.include; }
		}
	
		public ElementLocation IncludeLocation {
			get { return this.includeLocation; }
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public System.String KeepDuplicates {
			get { return this.keepDuplicates; }
		}
	
		public ElementLocation KeepDuplicatesLocation {
			get { return this.keepDuplicatesLocation; }
		}
	
		public System.String KeepMetadata {
			get { return this.keepMetadata; }
		}
	
		public ElementLocation KeepMetadataLocation {
			get { return this.keepMetadataLocation; }
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata {
			get { return this.metadata; }
		}
	
		public System.String Remove {
			get { return this.remove; }
		}
	
		public ElementLocation RemoveLocation {
			get { return this.removeLocation; }
		}
	
		public System.String RemoveMetadata {
			get { return this.removeMetadata; }
		}
	
		public ElementLocation RemoveMetadataLocation {
			get { return this.removeMetadataLocation; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectItemElement WithCondition(System.String value) {
			return (ProjectItemElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectItemElement WithConditionLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectItemElement WithLabel(System.String value) {
			return (ProjectItemElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectItemElement WithLabelLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectItemElement WithLocation(ElementLocation value) {
			return (ProjectItemElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Exclude property set to the specified value.</summary>
		public ProjectItemElement WithExclude(System.String value) {
			if (value == this.Exclude) {
				return this;
			}
		
			return this.With(exclude: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ExcludeLocation property set to the specified value.</summary>
		public ProjectItemElement WithExcludeLocation(ElementLocation value) {
			if (value == this.ExcludeLocation) {
				return this;
			}
		
			return this.With(excludeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Include property set to the specified value.</summary>
		public ProjectItemElement WithInclude(System.String value) {
			if (value == this.Include) {
				return this;
			}
		
			return this.With(include: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the IncludeLocation property set to the specified value.</summary>
		public ProjectItemElement WithIncludeLocation(ElementLocation value) {
			if (value == this.IncludeLocation) {
				return this;
			}
		
			return this.With(includeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the ItemType property set to the specified value.</summary>
		public ProjectItemElement WithItemType(System.String value) {
			if (value == this.ItemType) {
				return this;
			}
		
			return this.With(itemType: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicates property set to the specified value.</summary>
		public ProjectItemElement WithKeepDuplicates(System.String value) {
			if (value == this.KeepDuplicates) {
				return this;
			}
		
			return this.With(keepDuplicates: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepDuplicatesLocation property set to the specified value.</summary>
		public ProjectItemElement WithKeepDuplicatesLocation(ElementLocation value) {
			if (value == this.KeepDuplicatesLocation) {
				return this;
			}
		
			return this.With(keepDuplicatesLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepMetadata property set to the specified value.</summary>
		public ProjectItemElement WithKeepMetadata(System.String value) {
			if (value == this.KeepMetadata) {
				return this;
			}
		
			return this.With(keepMetadata: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the KeepMetadataLocation property set to the specified value.</summary>
		public ProjectItemElement WithKeepMetadataLocation(ElementLocation value) {
			if (value == this.KeepMetadataLocation) {
				return this;
			}
		
			return this.With(keepMetadataLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Metadata property set to the specified value.</summary>
		public ProjectItemElement WithMetadata(System.Collections.Immutable.ImmutableList<ProjectMetadataElement> value) {
			if (value == this.Metadata) {
				return this;
			}
		
			return this.With(metadata: Optional.For(value));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemElement WithMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Metadata collection with the specified collection.</summary>
		public ProjectItemElement WithMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Metadata collection.</summary>
		public ProjectItemElement AddMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements(System.Collections.Generic.IEnumerable<ProjectMetadataElement> values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements(params ProjectMetadataElement[] values) {
			return this.With(metadata: this.Metadata.RemoveRange(values));
		}
		
		/// <summary>Removes the specified element from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElement(ProjectMetadataElement value) {
			return this.With(metadata: this.Metadata.Remove(value));
		}
		
		/// <summary>Clears all elements from the Metadata collection.</summary>
		public ProjectItemElement RemoveMetadataElements() {
			return this.With(metadata: this.Metadata.Clear());
		}
		
		
		/// <summary>Returns a new instance with the Remove property set to the specified value.</summary>
		public ProjectItemElement WithRemove(System.String value) {
			if (value == this.Remove) {
				return this;
			}
		
			return this.With(remove: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveLocation property set to the specified value.</summary>
		public ProjectItemElement WithRemoveLocation(ElementLocation value) {
			if (value == this.RemoveLocation) {
				return this;
			}
		
			return this.With(removeLocation: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveMetadata property set to the specified value.</summary>
		public ProjectItemElement WithRemoveMetadata(System.String value) {
			if (value == this.RemoveMetadata) {
				return this;
			}
		
			return this.With(removeMetadata: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the RemoveMetadataLocation property set to the specified value.</summary>
		public ProjectItemElement WithRemoveMetadataLocation(ElementLocation value) {
			if (value == this.RemoveMetadataLocation) {
				return this;
			}
		
			return this.With(removeMetadataLocation: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return (ProjectItemElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				exclude: exclude,
				excludeLocation: excludeLocation,
				include: include,
				includeLocation: includeLocation,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepDuplicatesLocation: keepDuplicatesLocation,
				keepMetadata: keepMetadata,
				keepMetadataLocation: keepMetadataLocation,
				metadata: metadata,
				remove: remove,
				removeLocation: removeLocation,
				removeMetadata: removeMetadata,
				removeMetadataLocation: removeMetadataLocation);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				exclude: Optional.For(exclude.GetValueOrDefault(this.Exclude)),
				excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(this.ExcludeLocation)),
				include: Optional.For(include.GetValueOrDefault(this.Include)),
				includeLocation: Optional.For(includeLocation.GetValueOrDefault(this.IncludeLocation)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(this.KeepDuplicates)),
				keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(this.KeepDuplicatesLocation)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(this.KeepMetadata)),
				keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(this.KeepMetadataLocation)),
				metadata: Optional.For(metadata.GetValueOrDefault(this.Metadata)),
				remove: Optional.For(remove.GetValueOrDefault(this.Remove)),
				removeLocation: Optional.For(removeLocation.GetValueOrDefault(this.RemoveLocation)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(this.RemoveMetadata)),
				removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(this.RemoveMetadataLocation)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(exclude.IsDefined && exclude.Value != this.Exclude) || 
				(excludeLocation.IsDefined && excludeLocation.Value != this.ExcludeLocation) || 
				(include.IsDefined && include.Value != this.Include) || 
				(includeLocation.IsDefined && includeLocation.Value != this.IncludeLocation) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(keepDuplicates.IsDefined && keepDuplicates.Value != this.KeepDuplicates) || 
				(keepDuplicatesLocation.IsDefined && keepDuplicatesLocation.Value != this.KeepDuplicatesLocation) || 
				(keepMetadata.IsDefined && keepMetadata.Value != this.KeepMetadata) || 
				(keepMetadataLocation.IsDefined && keepMetadataLocation.Value != this.KeepMetadataLocation) || 
				(metadata.IsDefined && metadata.Value != this.Metadata) || 
				(remove.IsDefined && remove.Value != this.Remove) || 
				(removeLocation.IsDefined && removeLocation.Value != this.RemoveLocation) || 
				(removeMetadata.IsDefined && removeMetadata.Value != this.RemoveMetadata) || 
				(removeMetadataLocation.IsDefined && removeMetadataLocation.Value != this.RemoveMetadataLocation)) {
				return new ProjectItemElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					exclude: exclude.GetValueOrDefault(this.Exclude),
					excludeLocation: excludeLocation.GetValueOrDefault(this.ExcludeLocation),
					include: include.GetValueOrDefault(this.Include),
					includeLocation: includeLocation.GetValueOrDefault(this.IncludeLocation),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					keepDuplicates: keepDuplicates.GetValueOrDefault(this.KeepDuplicates),
					keepDuplicatesLocation: keepDuplicatesLocation.GetValueOrDefault(this.KeepDuplicatesLocation),
					keepMetadata: keepMetadata.GetValueOrDefault(this.KeepMetadata),
					keepMetadataLocation: keepMetadataLocation.GetValueOrDefault(this.KeepMetadataLocation),
					metadata: metadata.GetValueOrDefault(this.Metadata),
					remove: remove.GetValueOrDefault(this.Remove),
					removeLocation: removeLocation.GetValueOrDefault(this.RemoveLocation),
					removeMetadata: removeMetadata.GetValueOrDefault(this.RemoveMetadata),
					removeMetadataLocation: removeMetadataLocation.GetValueOrDefault(this.RemoveMetadataLocation));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemElement whose fields are initialized with default values.</summary>
		private static ProjectItemElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Exclude, 
				template.ExcludeLocation, 
				template.Include, 
				template.IncludeLocation, 
				template.ItemType, 
				template.KeepDuplicates, 
				template.KeepDuplicatesLocation, 
				template.KeepMetadata, 
				template.KeepMetadataLocation, 
				template.Metadata, 
				template.Remove, 
				template.RemoveLocation, 
				template.RemoveMetadata, 
				template.RemoveMetadataLocation);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Exclude { get; set; }
	
			internal ElementLocation ExcludeLocation { get; set; }
	
			internal System.String Include { get; set; }
	
			internal ElementLocation IncludeLocation { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal System.String KeepDuplicates { get; set; }
	
			internal ElementLocation KeepDuplicatesLocation { get; set; }
	
			internal System.String KeepMetadata { get; set; }
	
			internal ElementLocation KeepMetadataLocation { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectMetadataElement> Metadata { get; set; }
	
			internal System.String Remove { get; set; }
	
			internal ElementLocation RemoveLocation { get; set; }
	
			internal System.String RemoveMetadata { get; set; }
	
			internal ElementLocation RemoveMetadataLocation { get; set; }
		}
		
		internal static ProjectItemElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> excludeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> includeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepDuplicatesLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> keepMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>> metadata = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>>),
				ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> removeLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> removeMetadataLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
					excludeLocation: Optional.For(excludeLocation.GetValueOrDefault(DefaultInstance.ExcludeLocation)),
					include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
					includeLocation: Optional.For(includeLocation.GetValueOrDefault(DefaultInstance.IncludeLocation)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
					keepDuplicatesLocation: Optional.For(keepDuplicatesLocation.GetValueOrDefault(DefaultInstance.KeepDuplicatesLocation)),
					keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
					keepMetadataLocation: Optional.For(keepMetadataLocation.GetValueOrDefault(DefaultInstance.KeepMetadataLocation)),
					metadata: Optional.For(metadata.GetValueOrDefault(DefaultInstance.Metadata)),
					remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
					removeLocation: Optional.For(removeLocation.GetValueOrDefault(DefaultInstance.RemoveLocation)),
					removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
					removeMetadataLocation: Optional.For(removeMetadataLocation.GetValueOrDefault(DefaultInstance.RemoveMetadataLocation)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectItemElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String exclude;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> excludeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String include;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> includeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String itemType;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String keepDuplicates;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> keepDuplicatesLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String keepMetadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> keepMetadataLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder> metadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String remove;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> removeLocation;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String removeMetadata;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected ImmutableObjectGraph.Optional<ElementLocation.Builder> removeMetadataLocation;
		
			internal Builder(ProjectItemElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.exclude = immutable.Exclude;
				this.include = immutable.Include;
				this.itemType = immutable.ItemType;
				this.keepDuplicates = immutable.KeepDuplicates;
				this.keepMetadata = immutable.KeepMetadata;
				this.remove = immutable.Remove;
				this.removeMetadata = immutable.RemoveMetadata;
			}
		
			public System.String Exclude {
				get {
					return this.exclude;
				}
		
				set {
					this.exclude = value;
				}
			}
		
			public ElementLocation.Builder ExcludeLocation {
				get {
					if (!this.excludeLocation.IsDefined) {
						this.excludeLocation = this.immutable.excludeLocation != null ? this.immutable.excludeLocation.ToBuilder() : null;
					}
		
					return this.excludeLocation.Value;
				}
		
				set {
					this.excludeLocation = value;
				}
			}
		
			public System.String Include {
				get {
					return this.include;
				}
		
				set {
					this.include = value;
				}
			}
		
			public ElementLocation.Builder IncludeLocation {
				get {
					if (!this.includeLocation.IsDefined) {
						this.includeLocation = this.immutable.includeLocation != null ? this.immutable.includeLocation.ToBuilder() : null;
					}
		
					return this.includeLocation.Value;
				}
		
				set {
					this.includeLocation = value;
				}
			}
		
			public System.String ItemType {
				get {
					return this.itemType;
				}
		
				set {
					this.itemType = value;
				}
			}
		
			public System.String KeepDuplicates {
				get {
					return this.keepDuplicates;
				}
		
				set {
					this.keepDuplicates = value;
				}
			}
		
			public ElementLocation.Builder KeepDuplicatesLocation {
				get {
					if (!this.keepDuplicatesLocation.IsDefined) {
						this.keepDuplicatesLocation = this.immutable.keepDuplicatesLocation != null ? this.immutable.keepDuplicatesLocation.ToBuilder() : null;
					}
		
					return this.keepDuplicatesLocation.Value;
				}
		
				set {
					this.keepDuplicatesLocation = value;
				}
			}
		
			public System.String KeepMetadata {
				get {
					return this.keepMetadata;
				}
		
				set {
					this.keepMetadata = value;
				}
			}
		
			public ElementLocation.Builder KeepMetadataLocation {
				get {
					if (!this.keepMetadataLocation.IsDefined) {
						this.keepMetadataLocation = this.immutable.keepMetadataLocation != null ? this.immutable.keepMetadataLocation.ToBuilder() : null;
					}
		
					return this.keepMetadataLocation.Value;
				}
		
				set {
					this.keepMetadataLocation = value;
				}
			}
		
			public System.Collections.Immutable.ImmutableList<ProjectMetadataElement>.Builder Metadata {
				get {
					if (!this.metadata.IsDefined) {
						this.metadata = this.immutable.metadata != null ? this.immutable.metadata.ToBuilder() : null;
					}
		
					return this.metadata.Value;
				}
		
				set {
					this.metadata = value;
				}
			}
		
			public System.String Remove {
				get {
					return this.remove;
				}
		
				set {
					this.remove = value;
				}
			}
		
			public ElementLocation.Builder RemoveLocation {
				get {
					if (!this.removeLocation.IsDefined) {
						this.removeLocation = this.immutable.removeLocation != null ? this.immutable.removeLocation.ToBuilder() : null;
					}
		
					return this.removeLocation.Value;
				}
		
				set {
					this.removeLocation = value;
				}
			}
		
			public System.String RemoveMetadata {
				get {
					return this.removeMetadata;
				}
		
				set {
					this.removeMetadata = value;
				}
			}
		
			public ElementLocation.Builder RemoveMetadataLocation {
				get {
					if (!this.removeMetadataLocation.IsDefined) {
						this.removeMetadataLocation = this.immutable.removeMetadataLocation != null ? this.immutable.removeMetadataLocation.ToBuilder() : null;
					}
		
					return this.removeMetadataLocation.Value;
				}
		
				set {
					this.removeMetadataLocation = value;
				}
			}
		
			public new ProjectItemElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				var excludeLocation = this.excludeLocation.IsDefined ? (this.excludeLocation.Value != null ? this.excludeLocation.Value.ToImmutable() : null) : this.immutable.ExcludeLocation;
				var includeLocation = this.includeLocation.IsDefined ? (this.includeLocation.Value != null ? this.includeLocation.Value.ToImmutable() : null) : this.immutable.IncludeLocation;
				var keepDuplicatesLocation = this.keepDuplicatesLocation.IsDefined ? (this.keepDuplicatesLocation.Value != null ? this.keepDuplicatesLocation.Value.ToImmutable() : null) : this.immutable.KeepDuplicatesLocation;
				var keepMetadataLocation = this.keepMetadataLocation.IsDefined ? (this.keepMetadataLocation.Value != null ? this.keepMetadataLocation.Value.ToImmutable() : null) : this.immutable.KeepMetadataLocation;
				var metadata = this.metadata.IsDefined ? (this.metadata.Value != null ? this.metadata.Value.ToImmutable() : null) : this.immutable.Metadata;
				var removeLocation = this.removeLocation.IsDefined ? (this.removeLocation.Value != null ? this.removeLocation.Value.ToImmutable() : null) : this.immutable.RemoveLocation;
				var removeMetadataLocation = this.removeMetadataLocation.IsDefined ? (this.removeMetadataLocation.Value != null ? this.removeMetadataLocation.Value.ToImmutable() : null) : this.immutable.RemoveMetadataLocation;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Exclude),
					ImmutableObjectGraph.Optional.For(excludeLocation),
					ImmutableObjectGraph.Optional.For(this.Include),
					ImmutableObjectGraph.Optional.For(includeLocation),
					ImmutableObjectGraph.Optional.For(this.ItemType),
					ImmutableObjectGraph.Optional.For(this.KeepDuplicates),
					ImmutableObjectGraph.Optional.For(keepDuplicatesLocation),
					ImmutableObjectGraph.Optional.For(this.KeepMetadata),
					ImmutableObjectGraph.Optional.For(keepMetadataLocation),
					ImmutableObjectGraph.Optional.For(metadata),
					ImmutableObjectGraph.Optional.For(this.Remove),
					ImmutableObjectGraph.Optional.For(removeLocation),
					ImmutableObjectGraph.Optional.For(this.RemoveMetadata),
					ImmutableObjectGraph.Optional.For(removeMetadataLocation));
			}
		}
	}
	
	public interface IProjectMetadataElement : IProjectElement {
		System.String Name { get; }
		System.String Value { get; }
	}
	
	public partial class ProjectMetadataElement : ProjectElement, IProjectMetadataElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectMetadataElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectMetadataElement class.</summary>
		protected ProjectMetadataElement(
			System.Int32 identity,
			System.String condition,
			ElementLocation conditionLocation,
			System.String label,
			ElementLocation labelLocation,
			ElementLocation location,
			System.String name,
			System.String value)
			: base(
				identity: identity,
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location)
		{
			this.name = name;
			this.value = value;
			this.Validate();
		}
	
		public static ProjectMetadataElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
		
		/// <summary>Returns a new instance with the Condition property set to the specified value.</summary>
		public new ProjectMetadataElement WithCondition(System.String value) {
			return (ProjectMetadataElement)base.WithCondition(value);
		}
		
		/// <summary>Returns a new instance with the ConditionLocation property set to the specified value.</summary>
		public new ProjectMetadataElement WithConditionLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithConditionLocation(value);
		}
		
		/// <summary>Returns a new instance with the Label property set to the specified value.</summary>
		public new ProjectMetadataElement WithLabel(System.String value) {
			return (ProjectMetadataElement)base.WithLabel(value);
		}
		
		/// <summary>Returns a new instance with the LabelLocation property set to the specified value.</summary>
		public new ProjectMetadataElement WithLabelLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithLabelLocation(value);
		}
		
		/// <summary>Returns a new instance with the Location property set to the specified value.</summary>
		public new ProjectMetadataElement WithLocation(ElementLocation value) {
			return (ProjectMetadataElement)base.WithLocation(value);
		}
		
		/// <summary>Returns a new instance with the Name property set to the specified value.</summary>
		public ProjectMetadataElement WithName(System.String value) {
			if (value == this.Name) {
				return this;
			}
		
			return this.With(name: Optional.For(value));
		}
		
		/// <summary>Returns a new instance with the Value property set to the specified value.</summary>
		public ProjectMetadataElement WithValue(System.String value) {
			if (value == this.Value) {
				return this;
			}
		
			return this.With(value: Optional.For(value));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>)) {
			return this.WithFactory(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectMetadataElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectMetadataElement)this.WithCore(
				condition: condition,
				conditionLocation: conditionLocation,
				label: label,
				labelLocation: labelLocation,
				location: location,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectMetadataElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(this.ConditionLocation)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				labelLocation: Optional.For(labelLocation.GetValueOrDefault(this.LabelLocation)),
				location: Optional.For(location.GetValueOrDefault(this.Location)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectMetadataElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(conditionLocation.IsDefined && conditionLocation.Value != this.ConditionLocation) || 
				(label.IsDefined && label.Value != this.Label) || 
				(labelLocation.IsDefined && labelLocation.Value != this.LabelLocation) || 
				(location.IsDefined && location.Value != this.Location) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectMetadataElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					conditionLocation: conditionLocation.GetValueOrDefault(this.ConditionLocation),
					label: label.GetValueOrDefault(this.Label),
					labelLocation: labelLocation.GetValueOrDefault(this.LabelLocation),
					location: location.GetValueOrDefault(this.Location),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectMetadataElement whose fields are initialized with default values.</summary>
		private static ProjectMetadataElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectMetadataElement(
				default(System.Int32), 
				template.Condition, 
				template.ConditionLocation, 
				template.Label, 
				template.LabelLocation, 
				template.Location, 
				template.Name, 
				template.Value);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal ElementLocation ConditionLocation { get; set; }
	
			internal System.String Label { get; set; }
	
			internal ElementLocation LabelLocation { get; set; }
	
			internal ElementLocation Location { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		internal static ProjectMetadataElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> conditionLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<ElementLocation> labelLocation = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<ElementLocation> location = default(ImmutableObjectGraph.Optional<ElementLocation>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					conditionLocation: Optional.For(conditionLocation.GetValueOrDefault(DefaultInstance.ConditionLocation)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					labelLocation: Optional.For(labelLocation.GetValueOrDefault(DefaultInstance.LabelLocation)),
					location: Optional.For(location.GetValueOrDefault(DefaultInstance.Location)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		public new Builder ToBuilder() {
			return new Builder(this);
		}
		
		public new partial class Builder : ProjectElement.Builder {
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			private ProjectMetadataElement immutable;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String name;
		
			[DebuggerBrowsable(DebuggerBrowsableState.Never)]
			protected System.String value;
		
			internal Builder(ProjectMetadataElement immutable) : base(immutable) {
				this.immutable = immutable;
		
				this.name = immutable.Name;
				this.value = immutable.Value;
			}
		
			public System.String Name {
				get {
					return this.name;
				}
		
				set {
					this.name = value;
				}
			}
		
			public System.String Value {
				get {
					return this.value;
				}
		
				set {
					this.value = value;
				}
			}
		
			public new ProjectMetadataElement ToImmutable() {
				var conditionLocation = this.conditionLocation.IsDefined ? (this.conditionLocation.Value != null ? this.conditionLocation.Value.ToImmutable() : null) : this.immutable.ConditionLocation;
				var labelLocation = this.labelLocation.IsDefined ? (this.labelLocation.Value != null ? this.labelLocation.Value.ToImmutable() : null) : this.immutable.LabelLocation;
				var location = this.location.IsDefined ? (this.location.Value != null ? this.location.Value.ToImmutable() : null) : this.immutable.Location;
				return this.immutable = this.immutable.With(
					ImmutableObjectGraph.Optional.For(this.Condition),
					ImmutableObjectGraph.Optional.For(conditionLocation),
					ImmutableObjectGraph.Optional.For(this.Label),
					ImmutableObjectGraph.Optional.For(labelLocation),
					ImmutableObjectGraph.Optional.For(location),
					ImmutableObjectGraph.Optional.For(this.Name),
					ImmutableObjectGraph.Optional.For(this.Value));
			}
		}
	}
}


