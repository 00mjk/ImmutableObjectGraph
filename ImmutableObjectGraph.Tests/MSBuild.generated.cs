// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ImmutableTree Version: 0.0.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace ImmutableObjectGraph.Tests {
	using System.Diagnostics;
	using System.Linq;
	using ImmutableObjectGraph;
	
	public abstract partial class ProjectElement : IRecursiveType, IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram> {
		
		/// <summary>The last identity assigned to a created instance.</summary>
		private static int lastIdentityProduced;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String condition;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String label;
	
		private readonly System.Int32 identity;
	
		/// <summary>Initializes a new instance of the ProjectElement class.</summary>
		protected ProjectElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
		{
			this.identity = identity;
			this.condition = condition;
			this.label = label;
		}
	
		public System.String Condition {
			get { return this.condition; }
		}
	
		public System.String Label {
			get { return this.label; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectElement)this.WithCore(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>));
	
		protected internal System.Int32 Identity {
			get { return this.identity; }
		}
	
		/// <summary>Returns a unique identity that may be assigned to a newly created instance.</summary>
		protected static System.Int32 NewIdentity() {
			return System.Threading.Interlocked.Increment(ref lastIdentityProduced);
		}
		
		public RootedProjectElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectElement(this, root);
		}
		
		/// <summary>
		/// A description of a change made to an instance of an immutable object.
		/// </summary>
		[DebuggerDisplay("{Kind} {(Before ?? After).Caption} ({Identity}) {Changes}")]
		public struct DiffGram {
			private DiffGram(ProjectElement before, ProjectElement after, ChangeKind kind, ProjectElementChangedProperties changes)
				: this() {
				this.Before = before;
				this.After = after;
				this.Kind = kind;
				this.Changes = changes;
			}
		
			public static DiffGram Change(ProjectElement before, ProjectElement after, ProjectElementChangedProperties changes) {
				return new DiffGram(before, after, ChangeKind.Replaced, changes);
			}
		
			public static DiffGram Add(ProjectElement value) {
				return new DiffGram(null, value, ChangeKind.Added, default(ProjectElementChangedProperties));
			}
		
			public static DiffGram Remove(ProjectElement value) {
				return new DiffGram(value, null, ChangeKind.Removed, default(ProjectElementChangedProperties));
			}
		
			/// <summary>
			/// Gets the leaf node before the change.
			/// </summary>
			public ProjectElement Before { get; private set; }
		
			/// <summary>
			/// Gets the leaf node after the change.
			/// </summary>
			public ProjectElement After { get; private set; }
		
			/// <summary>
			/// Gets the kind of change made to the alterered node.
			/// </summary>
			public ChangeKind Kind { get; private set; }
		
			/// <summary>
			/// Gets the kinds of changes made to node if <see cref="Kind"/> is <see cref="ChangeKind.Replaced"/>.
			/// </summary>
			public ProjectElementChangedProperties Changes { get; private set; }
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectElement.Condition" /> was changed.
			/// </summary>
			public bool IsConditionChanged {
				get { return (this.Changes & ProjectElementChangedProperties.Condition) != ProjectElementChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets a value indicating whether the <see cref="ProjectElement.Label" /> was changed.
			/// </summary>
			public bool IsLabelChanged {
				get { return (this.Changes & ProjectElementChangedProperties.Label) != ProjectElementChangedProperties.None; }
			}
		
			/// <summary>
			/// Gets the identity of the affected object.
			/// </summary>
			public System.Int32 Identity {
				get { return (this.Before ?? this.After).Identity; }
			}
		}
		
		public static class Comparers {
			/// <summary>Gets an equatable comparer that considers only the persistent identity of a pair of values.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectElement> Identity {
				get { return ImmutableObjectGraph.Comparers.Identity; }
			}
		
			/// <summary>Gets an equatable comparer that compares all properties between two instances.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectElement> ByValue {
				get { return ImmutableObjectGraph.Comparers.ByValue<ProjectElementChangedProperties, DiffGram>(deep: false); }
			}
		
			/// <summary>Gets an equatable comparer that considers all properties between two instances and their children.</summary>
			public static System.Collections.Generic.IEqualityComparer<ProjectElement> ByValueWithDescendents {
				get { return ImmutableObjectGraph.Comparers.ByValue<ProjectElementChangedProperties, DiffGram>(deep: true); }
			}
		
			internal static System.Collections.Generic.IEqualityComparer<ParentedRecursiveType<ProjectElementContainer, ProjectElement>> ParentedProjectElementIdentity {
				get { return ImmutableObjectGraph.Comparers.Parented<ProjectElementContainer, ProjectElement>(); }
			}
		}
		
		ProjectElementChangedProperties IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.ParentProperty {
			get { return ProjectElementChangedProperties.Parent; }
		}
		
		ProjectElementChangedProperties IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.PositionUnderParentProperty {
			get { return ProjectElementChangedProperties.PositionUnderParent; }
		}
		
		ProjectElementChangedProperties IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.DiffProperties(IRecursiveType other) {
			return this.DiffProperties((ProjectElement)other);
		}
		
		ProjectElement.DiffGram IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.Change(IRecursiveType before, IRecursiveType after, ProjectElementChangedProperties diff) {
			return DiffGram.Change((ProjectElement)before, (ProjectElement)after, diff);
		}
		
		ProjectElement.DiffGram IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.Add(IRecursiveType after) {
			return DiffGram.Add((ProjectElement)after);
		}
		
		ProjectElement.DiffGram IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.Remove(IRecursiveType before) {
			return DiffGram.Remove((ProjectElement)before);
		}
		
		bool IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.Equals(ProjectElementChangedProperties first, ProjectElementChangedProperties second) {
			return first == second;
		}
		
		ProjectElementChangedProperties IRecursiveDiffingType<ProjectElementChangedProperties, ProjectElement.DiffGram>.Union(ProjectElementChangedProperties first, ProjectElementChangedProperties second) {
			return first | second;
		}
		
		protected virtual ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			if (other == null) {
				throw new System.ArgumentNullException("other");
			}
		
			var propertiesChanged = ProjectElementChangedProperties.None;
		
			if (this != other) {
				if (!this.GetType().IsEquivalentTo(other.GetType())) {
					propertiesChanged |= ProjectElementChangedProperties.Type;
				}
		
				if (this.Condition != other.Condition) {
					propertiesChanged |= ProjectElementChangedProperties.Condition;
				}
		
				if (this.Label != other.Label) {
					propertiesChanged |= ProjectElementChangedProperties.Label;
				}
			}
		
			return propertiesChanged;
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				defaultTargets: defaultTargets,
				initialTargets: initialTargets,
				treatAsLocalProperty: treatAsLocalProperty);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectItemGroupElement that = this as ProjectItemGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectItemGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectChooseElement that = this as ProjectChooseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectChooseElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectChooseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectOtherwiseElement that = this as ProjectOtherwiseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOtherwiseElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectOtherwiseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectWhenElement that = this as ProjectWhenElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectWhenElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectWhenElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectPropertyElement that = this as ProjectPropertyElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectPropertyElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public virtual ProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectItemElement that = this as ProjectItemElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!exclude.IsDefined || exclude.Value == that.Exclude) && 
				    (!include.IsDefined || include.Value == that.Include) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!keepDuplicates.IsDefined || keepDuplicates.Value == that.KeepDuplicates) && 
				    (!keepMetadata.IsDefined || keepMetadata.Value == that.KeepMetadata) && 
				    (!remove.IsDefined || remove.Value == that.Remove) && 
				    (!removeMetadata.IsDefined || removeMetadata.Value == that.RemoveMetadata)) {
					return that;
				}
			}
		
			return ProjectItemElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				exclude: exclude,
				include: include,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepMetadata: keepMetadata,
				remove: remove,
				removeMetadata: removeMetadata);
		}
		
		public virtual ProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectMetadataElement that = this as ProjectMetadataElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectMetadataElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!value.IsDefined || value.Value == that.Value)) {
					return that;
				}
			}
		
			return ProjectMetadataElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				name: name,
				value: value);
		}
		
		public virtual ProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectExtensionsElement that = this as ProjectExtensionsElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectExtensionsElement))) {
				if ((!content.IsDefined || content.Value == that.Content)) {
					return that;
				}
			}
		
			return ProjectExtensionsElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				content: content);
		}
		
		public virtual ProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectImportElement that = this as ProjectImportElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportElement))) {
				if ((!project.IsDefined || project.Value == that.Project)) {
					return that;
				}
			}
		
			return ProjectImportElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				project: project);
		}
		
		public virtual ProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectImportGroupElement that = this as ProjectImportGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectImportGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectItemDefinitionElement that = this as ProjectItemDefinitionElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				itemType: itemType);
		}
		
		public virtual ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			ProjectItemDefinitionGroupElement that = this as ProjectItemDefinitionGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
		
		public virtual ProjectOnErrorElement ToProjectOnErrorElement() {
			ProjectOnErrorElement that = this as ProjectOnErrorElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOnErrorElement))) {
				return that;
			}
		
			return ProjectOnErrorElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity);
		}
		
		public virtual ProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectOutputElement that = this as ProjectOutputElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOutputElement))) {
				if ((!isOutputItem.IsDefined || isOutputItem.Value == that.IsOutputItem) && 
				    (!isOutputProperty.IsDefined || isOutputProperty.Value == that.IsOutputProperty) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!propertyName.IsDefined || propertyName.Value == that.PropertyName) && 
				    (!taskParameter.IsDefined || taskParameter.Value == that.TaskParameter)) {
					return that;
				}
			}
		
			return ProjectOutputElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				isOutputItem: isOutputItem,
				isOutputProperty: isOutputProperty,
				itemType: itemType,
				propertyName: propertyName,
				taskParameter: taskParameter);
		}
		
		public virtual ProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTargetElement that = this as ProjectTargetElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTargetElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!afterTargets.IsDefined || afterTargets.Value == that.AfterTargets) && 
				    (!beforeTargets.IsDefined || beforeTargets.Value == that.BeforeTargets) && 
				    (!dependsOnTargets.IsDefined || dependsOnTargets.Value == that.DependsOnTargets) && 
				    (!inputs.IsDefined || inputs.Value == that.Inputs) && 
				    (!keepDuplicateOutputs.IsDefined || keepDuplicateOutputs.Value == that.KeepDuplicateOutputs) && 
				    (!name.IsDefined || name.Value == that.Name) && 
				    (!outputs.IsDefined || outputs.Value == that.Outputs) && 
				    (!returns.IsDefined || returns.Value == that.Returns)) {
					return that;
				}
			}
		
			return ProjectTargetElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				afterTargets: afterTargets,
				beforeTargets: beforeTargets,
				dependsOnTargets: dependsOnTargets,
				inputs: inputs,
				keepDuplicateOutputs: keepDuplicateOutputs,
				name: name,
				outputs: outputs,
				returns: returns);
		}
		
		public virtual ProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTaskElement that = this as ProjectTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTaskElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!continueOnError.IsDefined || continueOnError.Value == that.ContinueOnError) && 
				    (!mSBuildArchitecture.IsDefined || mSBuildArchitecture.Value == that.MSBuildArchitecture) && 
				    (!mSBuildRuntime.IsDefined || mSBuildRuntime.Value == that.MSBuildRuntime) && 
				    (!name.IsDefined || name.Value == that.Name)) {
					return that;
				}
			}
		
			return ProjectTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				continueOnError: continueOnError,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildRuntime: mSBuildRuntime,
				name: name);
		}
		
		public virtual ProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectUsingTaskBodyElement that = this as ProjectUsingTaskBodyElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskBodyElement))) {
				if ((!evaluate.IsDefined || evaluate.Value == that.Evaluate) && 
				    (!taskBody.IsDefined || taskBody.Value == that.TaskBody)) {
					return that;
				}
			}
		
			return ProjectUsingTaskBodyElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				evaluate: evaluate,
				taskBody: taskBody);
		}
		
		public virtual ProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectUsingTaskElement that = this as ProjectUsingTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskElement))) {
				if ((!children.IsDefined || children.Value == that.Children) && 
				    (!architecture.IsDefined || architecture.Value == that.Architecture) && 
				    (!assemblyFile.IsDefined || assemblyFile.Value == that.AssemblyFile) && 
				    (!assemblyName.IsDefined || assemblyName.Value == that.AssemblyName) && 
				    (!runtime.IsDefined || runtime.Value == that.Runtime) && 
				    (!taskFactory.IsDefined || taskFactory.Value == that.TaskFactory) && 
				    (!taskName.IsDefined || taskName.Value == that.TaskName)) {
					return that;
				}
			}
		
			return ProjectUsingTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children,
				architecture: architecture,
				assemblyFile: assemblyFile,
				assemblyName: assemblyName,
				runtime: runtime,
				taskFactory: taskFactory,
				taskName: taskName);
		}
		
		public virtual ProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectUsingTaskParameterElement that = this as ProjectUsingTaskParameterElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskParameterElement))) {
				if ((!name.IsDefined || name.Value == that.Name) && 
				    (!output.IsDefined || output.Value == that.Output) && 
				    (!parameterType.IsDefined || parameterType.Value == that.ParameterType) && 
				    (!required.IsDefined || required.Value == that.Required)) {
					return that;
				}
			}
		
			return ProjectUsingTaskParameterElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				name: name,
				output: output,
				parameterType: parameterType,
				required: required);
		}
		
		public virtual UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			UsingTaskParameterGroupElement that = this as UsingTaskParameterGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(UsingTaskParameterGroupElement))) {
				if ((!children.IsDefined || children.Value == that.Children)) {
					return that;
				}
			}
		
			return UsingTaskParameterGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				identity: this.Identity,
				children: children);
		}
	
		int IRecursiveType.Identity {
			get { return this.Identity; }
		}
	}
	
	public partial struct RootedProjectElement : System.IEquatable<RootedProjectElement>, IRecursiveType {
		private readonly ProjectElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectElement(ProjectElement projectElement, ProjectElementContainer root) {
			this.greenNode = projectElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public bool IsProjectElementContainer {
			get { return this.greenNode is ProjectElementContainer; }
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public bool IsProjectRootElement {
			get { return this.greenNode is ProjectRootElement; }
		}
	
		public RootedProjectRootElement AsProjectRootElement {
			get { return this.greenNode != null ? ((ProjectRootElement)this.greenNode).WithRoot(this.root) : default(RootedProjectRootElement); }
		}
	
		public bool IsProjectPropertyGroupElement {
			get { return this.greenNode is ProjectPropertyGroupElement; }
		}
	
		public RootedProjectPropertyGroupElement AsProjectPropertyGroupElement {
			get { return this.greenNode != null ? ((ProjectPropertyGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectPropertyGroupElement); }
		}
	
		public bool IsProjectItemGroupElement {
			get { return this.greenNode is ProjectItemGroupElement; }
		}
	
		public RootedProjectItemGroupElement AsProjectItemGroupElement {
			get { return this.greenNode != null ? ((ProjectItemGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemGroupElement); }
		}
	
		public bool IsProjectChooseElement {
			get { return this.greenNode is ProjectChooseElement; }
		}
	
		public RootedProjectChooseElement AsProjectChooseElement {
			get { return this.greenNode != null ? ((ProjectChooseElement)this.greenNode).WithRoot(this.root) : default(RootedProjectChooseElement); }
		}
	
		public bool IsProjectOtherwiseElement {
			get { return this.greenNode is ProjectOtherwiseElement; }
		}
	
		public RootedProjectOtherwiseElement AsProjectOtherwiseElement {
			get { return this.greenNode != null ? ((ProjectOtherwiseElement)this.greenNode).WithRoot(this.root) : default(RootedProjectOtherwiseElement); }
		}
	
		public bool IsProjectWhenElement {
			get { return this.greenNode is ProjectWhenElement; }
		}
	
		public RootedProjectWhenElement AsProjectWhenElement {
			get { return this.greenNode != null ? ((ProjectWhenElement)this.greenNode).WithRoot(this.root) : default(RootedProjectWhenElement); }
		}
	
		public bool IsProjectPropertyElement {
			get { return this.greenNode is ProjectPropertyElement; }
		}
	
		public RootedProjectPropertyElement AsProjectPropertyElement {
			get { return this.greenNode != null ? ((ProjectPropertyElement)this.greenNode).WithRoot(this.root) : default(RootedProjectPropertyElement); }
		}
	
		public bool IsProjectItemElement {
			get { return this.greenNode is ProjectItemElement; }
		}
	
		public RootedProjectItemElement AsProjectItemElement {
			get { return this.greenNode != null ? ((ProjectItemElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemElement); }
		}
	
		public bool IsProjectMetadataElement {
			get { return this.greenNode is ProjectMetadataElement; }
		}
	
		public RootedProjectMetadataElement AsProjectMetadataElement {
			get { return this.greenNode != null ? ((ProjectMetadataElement)this.greenNode).WithRoot(this.root) : default(RootedProjectMetadataElement); }
		}
	
		public bool IsProjectExtensionsElement {
			get { return this.greenNode is ProjectExtensionsElement; }
		}
	
		public RootedProjectExtensionsElement AsProjectExtensionsElement {
			get { return this.greenNode != null ? ((ProjectExtensionsElement)this.greenNode).WithRoot(this.root) : default(RootedProjectExtensionsElement); }
		}
	
		public bool IsProjectImportElement {
			get { return this.greenNode is ProjectImportElement; }
		}
	
		public RootedProjectImportElement AsProjectImportElement {
			get { return this.greenNode != null ? ((ProjectImportElement)this.greenNode).WithRoot(this.root) : default(RootedProjectImportElement); }
		}
	
		public bool IsProjectImportGroupElement {
			get { return this.greenNode is ProjectImportGroupElement; }
		}
	
		public RootedProjectImportGroupElement AsProjectImportGroupElement {
			get { return this.greenNode != null ? ((ProjectImportGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectImportGroupElement); }
		}
	
		public bool IsProjectItemDefinitionElement {
			get { return this.greenNode is ProjectItemDefinitionElement; }
		}
	
		public RootedProjectItemDefinitionElement AsProjectItemDefinitionElement {
			get { return this.greenNode != null ? ((ProjectItemDefinitionElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemDefinitionElement); }
		}
	
		public bool IsProjectItemDefinitionGroupElement {
			get { return this.greenNode is ProjectItemDefinitionGroupElement; }
		}
	
		public RootedProjectItemDefinitionGroupElement AsProjectItemDefinitionGroupElement {
			get { return this.greenNode != null ? ((ProjectItemDefinitionGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemDefinitionGroupElement); }
		}
	
		public bool IsProjectOnErrorElement {
			get { return this.greenNode is ProjectOnErrorElement; }
		}
	
		public RootedProjectOnErrorElement AsProjectOnErrorElement {
			get { return this.greenNode != null ? ((ProjectOnErrorElement)this.greenNode).WithRoot(this.root) : default(RootedProjectOnErrorElement); }
		}
	
		public bool IsProjectOutputElement {
			get { return this.greenNode is ProjectOutputElement; }
		}
	
		public RootedProjectOutputElement AsProjectOutputElement {
			get { return this.greenNode != null ? ((ProjectOutputElement)this.greenNode).WithRoot(this.root) : default(RootedProjectOutputElement); }
		}
	
		public bool IsProjectTargetElement {
			get { return this.greenNode is ProjectTargetElement; }
		}
	
		public RootedProjectTargetElement AsProjectTargetElement {
			get { return this.greenNode != null ? ((ProjectTargetElement)this.greenNode).WithRoot(this.root) : default(RootedProjectTargetElement); }
		}
	
		public bool IsProjectTaskElement {
			get { return this.greenNode is ProjectTaskElement; }
		}
	
		public RootedProjectTaskElement AsProjectTaskElement {
			get { return this.greenNode != null ? ((ProjectTaskElement)this.greenNode).WithRoot(this.root) : default(RootedProjectTaskElement); }
		}
	
		public bool IsProjectUsingTaskBodyElement {
			get { return this.greenNode is ProjectUsingTaskBodyElement; }
		}
	
		public RootedProjectUsingTaskBodyElement AsProjectUsingTaskBodyElement {
			get { return this.greenNode != null ? ((ProjectUsingTaskBodyElement)this.greenNode).WithRoot(this.root) : default(RootedProjectUsingTaskBodyElement); }
		}
	
		public bool IsProjectUsingTaskElement {
			get { return this.greenNode is ProjectUsingTaskElement; }
		}
	
		public RootedProjectUsingTaskElement AsProjectUsingTaskElement {
			get { return this.greenNode != null ? ((ProjectUsingTaskElement)this.greenNode).WithRoot(this.root) : default(RootedProjectUsingTaskElement); }
		}
	
		public bool IsProjectUsingTaskParameterElement {
			get { return this.greenNode is ProjectUsingTaskParameterElement; }
		}
	
		public RootedProjectUsingTaskParameterElement AsProjectUsingTaskParameterElement {
			get { return this.greenNode != null ? ((ProjectUsingTaskParameterElement)this.greenNode).WithRoot(this.root) : default(RootedProjectUsingTaskParameterElement); }
		}
	
		public bool IsUsingTaskParameterGroupElement {
			get { return this.greenNode is UsingTaskParameterGroupElement; }
		}
	
		public RootedUsingTaskParameterGroupElement AsUsingTaskParameterGroupElement {
			get { return this.greenNode != null ? ((UsingTaskParameterGroupElement)this.greenNode).WithRoot(this.root) : default(RootedUsingTaskParameterGroupElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectElement ProjectElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectElement) {
				var other = (RootedProjectElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectElement NewSpine(ProjectElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	[System.Flags]
	public enum ProjectElementChangedProperties : ulong {
		/// <summary>
		/// No change was made to the node.  It was either entirely added or removed. 
		/// </summary>
		None = 0x0,
	
		/// <summary>
		/// The type of the node was changed.
		/// </summary>
		Type = 0x1,
	
		/// <summary>
		/// The node's position within its parent's list of children changed.
		/// </summary>
		PositionUnderParent = 0x2,
		
		/// <summary>
		/// The node was removed and reappeared in a new position in the tree (with a different parent).
		/// </summary>
		Parent = 0x4,
	
		/// <summary>
		/// The Condition property was changed.
		/// </summary>
		Condition = 0x8,
	
		/// <summary>
		/// The Label property was changed.
		/// </summary>
		Label = 0x10,
	
		/// <summary>
		/// The FullPath property was changed.
		/// </summary>
		FullPath = 0x20,
	
		/// <summary>
		/// The Encoding property was changed.
		/// </summary>
		Encoding = 0x40,
	
		/// <summary>
		/// The ToolsVersion property was changed.
		/// </summary>
		ToolsVersion = 0x80,
	
		/// <summary>
		/// The DefaultTargets property was changed.
		/// </summary>
		DefaultTargets = 0x100,
	
		/// <summary>
		/// The InitialTargets property was changed.
		/// </summary>
		InitialTargets = 0x200,
	
		/// <summary>
		/// The TreatAsLocalProperty property was changed.
		/// </summary>
		TreatAsLocalProperty = 0x400,
	
		/// <summary>
		/// The Name property was changed.
		/// </summary>
		Name = 0x800,
	
		/// <summary>
		/// The Value property was changed.
		/// </summary>
		Value = 0x1000,
	
		/// <summary>
		/// The Exclude property was changed.
		/// </summary>
		Exclude = 0x2000,
	
		/// <summary>
		/// The Include property was changed.
		/// </summary>
		Include = 0x4000,
	
		/// <summary>
		/// The ItemType property was changed.
		/// </summary>
		ItemType = 0x8000,
	
		/// <summary>
		/// The KeepDuplicates property was changed.
		/// </summary>
		KeepDuplicates = 0x10000,
	
		/// <summary>
		/// The KeepMetadata property was changed.
		/// </summary>
		KeepMetadata = 0x20000,
	
		/// <summary>
		/// The Remove property was changed.
		/// </summary>
		Remove = 0x40000,
	
		/// <summary>
		/// The RemoveMetadata property was changed.
		/// </summary>
		RemoveMetadata = 0x80000,
	
		/// <summary>
		/// The Content property was changed.
		/// </summary>
		Content = 0x100000,
	
		/// <summary>
		/// The Project property was changed.
		/// </summary>
		Project = 0x200000,
	
		/// <summary>
		/// The IsOutputItem property was changed.
		/// </summary>
		IsOutputItem = 0x400000,
	
		/// <summary>
		/// The IsOutputProperty property was changed.
		/// </summary>
		IsOutputProperty = 0x800000,
	
		/// <summary>
		/// The PropertyName property was changed.
		/// </summary>
		PropertyName = 0x1000000,
	
		/// <summary>
		/// The TaskParameter property was changed.
		/// </summary>
		TaskParameter = 0x2000000,
	
		/// <summary>
		/// The AfterTargets property was changed.
		/// </summary>
		AfterTargets = 0x4000000,
	
		/// <summary>
		/// The BeforeTargets property was changed.
		/// </summary>
		BeforeTargets = 0x8000000,
	
		/// <summary>
		/// The DependsOnTargets property was changed.
		/// </summary>
		DependsOnTargets = 0x10000000,
	
		/// <summary>
		/// The Inputs property was changed.
		/// </summary>
		Inputs = 0x20000000,
	
		/// <summary>
		/// The KeepDuplicateOutputs property was changed.
		/// </summary>
		KeepDuplicateOutputs = 0x40000000,
	
		/// <summary>
		/// The Outputs property was changed.
		/// </summary>
		Outputs = 0x80000000,
	
		/// <summary>
		/// The Returns property was changed.
		/// </summary>
		Returns = 0x100000000,
	
		/// <summary>
		/// The ContinueOnError property was changed.
		/// </summary>
		ContinueOnError = 0x200000000,
	
		/// <summary>
		/// The MSBuildArchitecture property was changed.
		/// </summary>
		MSBuildArchitecture = 0x400000000,
	
		/// <summary>
		/// The MSBuildRuntime property was changed.
		/// </summary>
		MSBuildRuntime = 0x800000000,
	
		/// <summary>
		/// The Evaluate property was changed.
		/// </summary>
		Evaluate = 0x1000000000,
	
		/// <summary>
		/// The TaskBody property was changed.
		/// </summary>
		TaskBody = 0x2000000000,
	
		/// <summary>
		/// The Architecture property was changed.
		/// </summary>
		Architecture = 0x4000000000,
	
		/// <summary>
		/// The AssemblyFile property was changed.
		/// </summary>
		AssemblyFile = 0x8000000000,
	
		/// <summary>
		/// The AssemblyName property was changed.
		/// </summary>
		AssemblyName = 0x10000000000,
	
		/// <summary>
		/// The Runtime property was changed.
		/// </summary>
		Runtime = 0x20000000000,
	
		/// <summary>
		/// The TaskFactory property was changed.
		/// </summary>
		TaskFactory = 0x40000000000,
	
		/// <summary>
		/// The TaskName property was changed.
		/// </summary>
		TaskName = 0x80000000000,
	
		/// <summary>
		/// The Output property was changed.
		/// </summary>
		Output = 0x100000000000,
	
		/// <summary>
		/// The ParameterType property was changed.
		/// </summary>
		ParameterType = 0x200000000000,
	
		/// <summary>
		/// The Required property was changed.
		/// </summary>
		Required = 0x400000000000,
	
		/// <summary>
		/// All flags in this enum.
		/// </summary>
		All = Type | PositionUnderParent | Parent | Condition | Label | FullPath | Encoding | ToolsVersion | DefaultTargets | InitialTargets | TreatAsLocalProperty | Name | Value | Exclude | Include | ItemType | KeepDuplicates | KeepMetadata | Remove | RemoveMetadata | Content | Project | IsOutputItem | IsOutputProperty | PropertyName | TaskParameter | AfterTargets | BeforeTargets | DependsOnTargets | Inputs | KeepDuplicateOutputs | Outputs | Returns | ContinueOnError | MSBuildArchitecture | MSBuildRuntime | Evaluate | TaskBody | Architecture | AssemblyFile | AssemblyName | Runtime | TaskFactory | TaskName | Output | ParameterType | Required,
	}
	
	public abstract partial class ProjectElementContainer : ProjectElement, System.Collections.Generic.IEnumerable<ProjectElement>, IRecursiveParentWithOrderedChildren, IRecursiveParentWithFastLookup {
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Collections.Immutable.ImmutableList<ProjectElement> children;
	
		/// <summary>Initializes a new instance of the ProjectElementContainer class.</summary>
		protected ProjectElementContainer(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> lookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>),
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.children = children;
			this.InitializeLookup(lookupTable);
		}
	
		public System.Collections.Immutable.ImmutableList<ProjectElement> Children {
			get { return this.children; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public ProjectElementContainer WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.ResetContents(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public ProjectElementContainer AddChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.AddRange(values));
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ProjectElementContainer AddChild(ProjectElement value) {
			return this.With(children: this.Children.Add(value));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren(params ProjectElement[] values) {
			return this.With(children: this.Children.RemoveRange(values.Select(v => this.SyncImmediateChildToCurrentVersion(v))));
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public ProjectElementContainer RemoveChild(ProjectElement value) {
			return this.With(children: this.Children.Remove(this.SyncImmediateChildToCurrentVersion(value)));
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public ProjectElementContainer RemoveChildren() {
			return this.With(children: this.Children.Clear());
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectElementContainer With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectElementContainer)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected abstract ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
	
		public System.Collections.Generic.IEnumerator<ProjectElement> GetEnumerator() {
			return this.children.GetEnumerator();
		}
	
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this.children.GetEnumerator();
		}
		
		public RootedProjectElementContainer AsRoot {
			get { return new RootedProjectElementContainer(this, this); }
		}
		
		public new RootedProjectElementContainer WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectElementContainer(this, root);
		}
		
		protected ProjectElement SyncImmediateChildToCurrentVersion(ProjectElement child) {
			ProjectElement currentValue;
			if (!this.TryFindImmediateChild(child.Identity, out currentValue)) {
				throw new System.ArgumentException();
			}
		
			return currentValue;
		}
		
		public ProjectElementContainer AddDescendent(ProjectElement value, ProjectElementContainer parent) {
			var spine = this.GetSpine(parent);
			var newParent = parent.AddChildren(value);
			var newSpine = System.Collections.Immutable.ImmutableStack.Create(value, newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: false).Peek();
		}
		
		public ProjectElementContainer RemoveDescendent(ProjectElement value) {
			var spine = this.GetSpine(value);
			var spineList = spine.ToList();
			var parent = (ProjectElementContainer)spineList[spineList.Count - 2];
			var newParent = parent.RemoveChildren(spineList[spineList.Count - 1]);
		
			var newSpine = System.Collections.Immutable.ImmutableStack.Create((ProjectElement)newParent);
			return (ProjectElementContainer)this.ReplaceDescendent(spine, newSpine, spineIncludesDeletedElement: true).Peek();
		}
		
		public ProjectElementContainer ReplaceDescendent(ProjectElement current, ProjectElement replacement) {
			var spine = this.GetSpine(current);
		
			if (spine.IsEmpty) {
				// The descendent was not found.
				throw new System.ArgumentException("Old value not found");
			}
		
			return (ProjectElementContainer)this.ReplaceDescendent(spine, System.Collections.Immutable.ImmutableStack.Create(replacement), spineIncludesDeletedElement: false).Peek();
		}
		
		private System.Collections.Immutable.ImmutableStack<ProjectElement> ReplaceDescendent(System.Collections.Immutable.ImmutableStack<ProjectElement> spine, System.Collections.Immutable.ImmutableStack<ProjectElement> replacementStackTip, bool spineIncludesDeletedElement) {
			Debug.Assert(this == spine.Peek());
			var remainingSpine = spine.Pop();
			if (remainingSpine.IsEmpty || (spineIncludesDeletedElement && remainingSpine.Pop().IsEmpty)) {
				// This is the instance to be changed.
				return replacementStackTip;
			}
		
			System.Collections.Immutable.ImmutableStack<ProjectElement> newChildSpine;
			var child = remainingSpine.Peek();
			var recursiveChild = child as ProjectElementContainer;
			if (recursiveChild != null) {
				newChildSpine = recursiveChild.ReplaceDescendent(remainingSpine, replacementStackTip, spineIncludesDeletedElement);
			} else {
				Debug.Assert(remainingSpine.Pop().IsEmpty); // we should be at the tail of the stack, since we're at a leaf.
				Debug.Assert(this.Children.Contains(child));
				newChildSpine = replacementStackTip;
			}
		
			var newChildren = this.Children.Replace(child, newChildSpine.Peek());
			var newSelf = this.WithChildren(newChildren);
			if (newSelf.lookupTable == lookupTableLazySentinal && this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// Our newly mutated self wants a lookup table. If we already have one we can use it,
				// but it needs to be fixed up given the newly rewritten spine through our descendents.
				newSelf.lookupTable = this.FixupLookupTable(ImmutableDeque.Create(newChildSpine), ImmutableDeque.Create(remainingSpine));
				newSelf.ValidateInternalIntegrityDebugOnly();
			}
		
			return newChildSpine.Push(newSelf);
		}
		
		/// <summary>
		/// Produces a fast lookup table based on an existing one, if this node has one, to account for an updated spine among its descendents.
		/// </summary>
		/// <param name="updatedSpine">
		/// The spine of this node's new descendents' instances that are created for this change.
		/// The head is an immediate child of the new instance for this node.
		/// The tail is the node that was added or replaced.
		/// </param>
		/// <param name="oldSpine">
		/// The spine of this node's descendents that have been changed in this delta.
		/// The head is an immediate child of this instance.
		/// The tail is the node that was removed or replaced.
		/// </param>
		/// <returns>An updated lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> FixupLookupTable(ImmutableObjectGraph.ImmutableDeque<ProjectElement> updatedSpine, ImmutableObjectGraph.ImmutableDeque<ProjectElement> oldSpine) {
			if (this.lookupTable == null || this.lookupTable == lookupTableLazySentinal) {
				// We don't already have a lookup table to base this on, so leave it to the new instance to lazily construct.
				return lookupTableLazySentinal;
			}
		
			if ((updatedSpine.IsEmpty && oldSpine.IsEmpty) ||
				(updatedSpine.Count > 1 && oldSpine.Count > 1 && System.Object.ReferenceEquals(updatedSpine.PeekHead(), oldSpine.PeekHead()))) {
				// No changes were actually made.
				return this.lookupTable;
			}
		
			var lookupTable = this.lookupTable.ToBuilder();
		
			// Classify the kind of change that has just occurred.
			var oldSpineTail = oldSpine.PeekTail();
			var newSpineTail = updatedSpine.PeekTail();
			ChangeKind changeKind;
			bool childrenChanged = false;
			if (updatedSpine.Count == oldSpine.Count) {
				changeKind = ChangeKind.Replaced;
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				var newSpineTailRecursive = newSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null || newSpineTailRecursive != null) {
					// Children have changed if either before or after type didn't have a children property,
					// or if both did, but the children actually changed.
					childrenChanged = oldSpineTailRecursive == null || newSpineTailRecursive == null
						|| !System.Object.ReferenceEquals(oldSpineTailRecursive.Children, newSpineTailRecursive.Children);
				}
			} else if (updatedSpine.Count > oldSpine.Count) {
				changeKind = ChangeKind.Added;
			} else // updatedSpine.Count < oldSpine.Count
			{
				changeKind = ChangeKind.Removed;
			}
		
			// Trim the lookup table of any entries for nodes that have been removed from the tree.
			if (childrenChanged || changeKind == ChangeKind.Removed) {
				// We need to remove all descendents of the old tail node.
				lookupTable.RemoveRange(oldSpineTail.GetSelfAndDescendents().Select(n => n.Identity));
			} else if (changeKind == ChangeKind.Replaced && oldSpineTail.Identity != newSpineTail.Identity) {
				// The identity of the node was changed during the replacement.  We must explicitly remove the old entry
				// from our lookup table in this case.
				lookupTable.Remove(oldSpineTail.Identity);
		
				// We also need to update any immediate children of the old spine tail
				// because the identity of their parent has changed.
				var oldSpineTailRecursive = oldSpineTail as ProjectElementContainer;
				if (oldSpineTailRecursive != null) {
					foreach (var child in oldSpineTailRecursive) {
						lookupTable[child.Identity] = new System.Collections.Generic.KeyValuePair<ProjectElement, int>(child, newSpineTail.Identity);
					}
				}
			}
		
			// Update our lookup table so that it includes (updated) entries for every member of the spine itself.
			ProjectElement parent = this;
			foreach (var node in updatedSpine) {
				// Remove and add rather than use the Set method, since the old and new node are equal (in identity) therefore the map class will
				// assume no change is relevant and not apply the change.
				lookupTable.Remove(node.Identity);
				lookupTable.Add(node.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, int>(node, parent.Identity));
				parent = node;
			}
		
			// There may be children on the added node that we should include.
			if (childrenChanged || changeKind == ChangeKind.Added) {
				var recursiveParent = parent as ProjectElementContainer;
				if (recursiveParent != null) {
					recursiveParent.ContributeDescendentsToLookupTable(lookupTable);
				}
			}
		
			return lookupTable.ToImmutable();
		}
		
		/// <summary>
		/// Validates this node and all its descendents <em>only in DEBUG builds</em>.
		/// </summary>
		[Conditional("DEBUG")]
		private void ValidateInternalIntegrityDebugOnly() {
			this.ValidateInternalIntegrity();
		}
		
		/// <summary>
		/// Validates this node and all its descendents.
		/// </summary>
		protected internal void ValidateInternalIntegrity() {
			// Each node id appears at most once.
			var observedIdentities = new System.Collections.Generic.HashSet<int>();
			foreach (var node in this.GetSelfAndDescendents()) {
				if (!observedIdentities.Add(node.Identity)) {
					throw new RecursiveChildNotUniqueException(node.Identity);
				}
			}
		
			// The lookup table (if any) accurately describes the contents of this tree.
			if (this.lookupTable != null && this.lookupTable != lookupTableLazySentinal) {
				// The table should have one entry for every *descendent* of this node (not this node itself).
				int expectedCount = this.GetSelfAndDescendents().Count() - 1;
				int actualCount = this.lookupTable.Count;
				if (actualCount != expectedCount) {
					throw new System.ApplicationException(string.Format(System.Globalization.CultureInfo.CurrentCulture, "Expected {0} entries in lookup table but found {1}.", expectedCount, actualCount));
				}
		
				this.ValidateLookupTable(this.lookupTable);
			}
		}
		
		/// <summary>
		/// Validates that the contents of a lookup table are valid for all descendent nodes of this node.
		/// </summary>
		/// <param name="lookupTable">The lookup table being validated.</param>
		private void ValidateLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable) {
			const string ErrorString = "Lookup table integrity failure.";
		
			foreach (var child in this.Children) {
				var entry = lookupTable[child.Identity];
				if (!object.ReferenceEquals(entry.Key, child)) {
					throw new System.ApplicationException(ErrorString);
				}
		
				if (entry.Value != this.Identity) {
					throw new System.ApplicationException(ErrorString);
				}
		
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ValidateLookupTable(lookupTable);
				}
			}
		}
		
		private static readonly System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTableLazySentinal = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().Add(default(System.Int32), new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>());
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> lookupTable;
		
		private int inefficiencyLoad;
		
		/// <summary>
		/// The maximum number of steps allowable for a search to be done among this node's children
		/// before a faster lookup table will be built.
		/// </summary>
		internal const int InefficiencyLoadThreshold = 16;
		
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> LookupTable {
			get {
				if (this.lookupTable == lookupTableLazySentinal) {
					this.lookupTable = this.CreateLookupTable();
					this.inefficiencyLoad = 1;
				}
		
				return this.lookupTable;
			}
		}
		
		bool IRecursiveParentWithFastLookup.TryLookup(int identity, out System.Collections.Generic.KeyValuePair<IRecursiveType, int> result) {
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> typedResult;
				this.LookupTable.TryGetValue(identity, out typedResult);
				result = new System.Collections.Generic.KeyValuePair<IRecursiveType, int>(typedResult.Key, typedResult.Value);
				return true;
			}
		
			result = default(System.Collections.Generic.KeyValuePair<IRecursiveType, int>);
			return false;
		}
		
		private void InitializeLookup(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>> priorLookupTable = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>>)) {
			int inefficiencyLoad = 1; // use local until we know final value since that's faster than field access.
			if (priorLookupTable.IsDefined && priorLookupTable.Value != null) {
				this.lookupTable = priorLookupTable.Value;
			} else {
				if (this.children != null) {
					if (this.children.Count >= InefficiencyLoadThreshold) {
						// The number of children alone are enough to put us over the threshold, skip enumeration.
						inefficiencyLoad = InefficiencyLoadThreshold + 1;
					} else if (this.children.Count > 0) {
						foreach (var child in this.children) {
							var recursiveChild = child as ProjectElementContainer;
							inefficiencyLoad += recursiveChild != null ? recursiveChild.inefficiencyLoad : 1;
							if (inefficiencyLoad > InefficiencyLoadThreshold) {
								break; // It's ok to under-estimate once we're above the threshold since any further would be a waste of time.
							}
						}
					}
				}
		
				if (inefficiencyLoad > InefficiencyLoadThreshold) {
					inefficiencyLoad = 1;
					this.lookupTable = lookupTableLazySentinal;
				}
			}
		
			this.inefficiencyLoad = inefficiencyLoad;
			this.ValidateInternalIntegrityDebugOnly();
		}
		
		/// <summary>
		/// Creates the lookup table that will contain all this node's children.
		/// </summary>
		/// <returns>The lookup table.</returns>
		private System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>> CreateLookupTable() {
			var table = System.Collections.Immutable.ImmutableDictionary.Create<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>().ToBuilder();
			this.ContributeDescendentsToLookupTable(table);
			return table.ToImmutable();
		}
		
		/// <summary>
		/// Adds this node's children (recursively) to the lookup table.
		/// </summary>
		/// <param name="seedLookupTable">The lookup table to add entries to.</param>
		/// <returns>The new lookup table.</returns>
		private void ContributeDescendentsToLookupTable(System.Collections.Immutable.ImmutableDictionary<System.Int32, System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>>.Builder seedLookupTable)
		{
			foreach (var child in this.Children)
			{
				seedLookupTable.Add(child.Identity, new System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32>(child, this.Identity));
				var recursiveChild = child as ProjectElementContainer;
				if (recursiveChild != null) {
					recursiveChild.ContributeDescendentsToLookupTable(seedLookupTable);
				}
			}
		}
		
		public ProjectElement Find(System.Int32 identity) {
			ProjectElement result;
			if (this.TryFind(identity, out result)) {
				return result;
			}
		
			throw new System.Collections.Generic.KeyNotFoundException();
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ParentedRecursiveType<ProjectElementContainer, ProjectElement> GetParentedNode(System.Int32 identity) {
			if (this.Identity == identity) {
				return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this, null);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(identity, out lookupValue)) {
					var parentIdentity = lookupValue.Value;
					return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(this.LookupTable[identity].Key, (ProjectElementContainer)this.Find(parentIdentity));
				}
			} else {
				// No lookup table means we have to aggressively search each child.
				foreach (var child in this.Children) {
					if (child.Identity.Equals(identity)) {
						return new ParentedRecursiveType<ProjectElementContainer, ProjectElement>(child, this);
					}
		
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						var childResult = recursiveChild.GetParentedNode(identity);
						if (childResult.Value != null) {
							return childResult;
						}
					} 
				}
			}
		
			return default(ParentedRecursiveType<ProjectElementContainer, ProjectElement>);
		}
		
		/// <summary>Gets the recursive parent of the specified value, or <c>null</c> if none could be found.</summary>
		internal ProjectElementContainer GetParent(ProjectElement descendent) {
			return this.GetParentedNode(descendent.Identity).Parent;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(System.Int32 descendent) {
			var emptySpine = System.Collections.Immutable.ImmutableStack.Create<ProjectElement>();
			if (this.Identity.Equals(descendent)) {
				return emptySpine.Push(this);
			}
		
			if (this.LookupTable != null) {
				System.Collections.Generic.KeyValuePair<ProjectElement, System.Int32> lookupValue;
				if (this.LookupTable.TryGetValue(descendent, out lookupValue))
				{
					// Awesome.  We know the node the caller is looking for is a descendent of this node.
					// Now just string together all the nodes that connect this one with the sought one.
					var spine = emptySpine;
					do
					{
						spine = spine.Push(lookupValue.Key);
					}
					while (this.lookupTable.TryGetValue(lookupValue.Value, out lookupValue));
					return spine.Push(this);
				}
			} else {
				// We don't have an efficient lookup table for this node.  Aggressively search every child.
				var spine = emptySpine;
				foreach (var child in this.Children) {
					var recursiveChild = child as ProjectElementContainer;
					if (recursiveChild != null) {
						spine = recursiveChild.GetSpine(descendent);
					} else if (child.Identity.Equals(descendent)) {
						spine = spine.Push(child);
					}
		
					if (!spine.IsEmpty) {
						return spine.Push(this);
					}
				}
			}
		
			// The descendent is not in this sub-tree.
			return emptySpine;
		}
		
		public System.Collections.Immutable.ImmutableStack<ProjectElement> GetSpine(ProjectElement descendent) {
			return this.GetSpine(descendent.Identity);
		}
		
		public virtual ProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			ProjectRootElement that = this as ProjectRootElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectRootElement))) {
				if ((!fullPath.IsDefined || fullPath.Value == that.FullPath) && 
				    (!encoding.IsDefined || encoding.Value == that.Encoding) && 
				    (!toolsVersion.IsDefined || toolsVersion.Value == that.ToolsVersion) && 
				    (!defaultTargets.IsDefined || defaultTargets.Value == that.DefaultTargets) && 
				    (!initialTargets.IsDefined || initialTargets.Value == that.InitialTargets) && 
				    (!treatAsLocalProperty.IsDefined || treatAsLocalProperty.Value == that.TreatAsLocalProperty)) {
					return that;
				}
			}
		
			return ProjectRootElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				defaultTargets: defaultTargets,
				initialTargets: initialTargets,
				treatAsLocalProperty: treatAsLocalProperty);
		}
		
		public override ProjectRootElement ToProjectRootElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			return base.ToProjectRootElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
		}
		
		public virtual ProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			ProjectPropertyGroupElement that = this as ProjectPropertyGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectPropertyGroupElement))) {
				return that;
			}
		
			return ProjectPropertyGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectPropertyGroupElement ToProjectPropertyGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectPropertyGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectItemGroupElement ToProjectItemGroupElement() {
			ProjectItemGroupElement that = this as ProjectItemGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemGroupElement))) {
				return that;
			}
		
			return ProjectItemGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectItemGroupElement ToProjectItemGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectItemGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectChooseElement ToProjectChooseElement() {
			ProjectChooseElement that = this as ProjectChooseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectChooseElement))) {
				return that;
			}
		
			return ProjectChooseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectChooseElement ToProjectChooseElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectChooseElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectOtherwiseElement ToProjectOtherwiseElement() {
			ProjectOtherwiseElement that = this as ProjectOtherwiseElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectOtherwiseElement))) {
				return that;
			}
		
			return ProjectOtherwiseElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectOtherwiseElement ToProjectOtherwiseElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectOtherwiseElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectWhenElement ToProjectWhenElement() {
			ProjectWhenElement that = this as ProjectWhenElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectWhenElement))) {
				return that;
			}
		
			return ProjectWhenElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectWhenElement ToProjectWhenElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectWhenElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectItemElement that = this as ProjectItemElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemElement))) {
				if ((!exclude.IsDefined || exclude.Value == that.Exclude) && 
				    (!include.IsDefined || include.Value == that.Include) && 
				    (!itemType.IsDefined || itemType.Value == that.ItemType) && 
				    (!keepDuplicates.IsDefined || keepDuplicates.Value == that.KeepDuplicates) && 
				    (!keepMetadata.IsDefined || keepMetadata.Value == that.KeepMetadata) && 
				    (!remove.IsDefined || remove.Value == that.Remove) && 
				    (!removeMetadata.IsDefined || removeMetadata.Value == that.RemoveMetadata)) {
					return that;
				}
			}
		
			return ProjectItemElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				exclude: exclude,
				include: include,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepMetadata: keepMetadata,
				remove: remove,
				removeMetadata: removeMetadata);
		}
		
		public override ProjectItemElement ToProjectItemElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectItemElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
		}
		
		public virtual ProjectImportGroupElement ToProjectImportGroupElement() {
			ProjectImportGroupElement that = this as ProjectImportGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectImportGroupElement))) {
				return that;
			}
		
			return ProjectImportGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectImportGroupElement ToProjectImportGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectImportGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectItemDefinitionElement that = this as ProjectItemDefinitionElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionElement))) {
				if ((!itemType.IsDefined || itemType.Value == that.ItemType)) {
					return that;
				}
			}
		
			return ProjectItemDefinitionElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				itemType: itemType);
		}
		
		public override ProjectItemDefinitionElement ToProjectItemDefinitionElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectItemDefinitionElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					itemType: itemType);
		}
		
		public virtual ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			ProjectItemDefinitionGroupElement that = this as ProjectItemDefinitionGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectItemDefinitionGroupElement))) {
				return that;
			}
		
			return ProjectItemDefinitionGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override ProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToProjectItemDefinitionGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
		
		public virtual ProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTargetElement that = this as ProjectTargetElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTargetElement))) {
				if ((!afterTargets.IsDefined || afterTargets.Value == that.AfterTargets) && 
				    (!beforeTargets.IsDefined || beforeTargets.Value == that.BeforeTargets) && 
				    (!dependsOnTargets.IsDefined || dependsOnTargets.Value == that.DependsOnTargets) && 
				    (!inputs.IsDefined || inputs.Value == that.Inputs) && 
				    (!keepDuplicateOutputs.IsDefined || keepDuplicateOutputs.Value == that.KeepDuplicateOutputs) && 
				    (!name.IsDefined || name.Value == that.Name) && 
				    (!outputs.IsDefined || outputs.Value == that.Outputs) && 
				    (!returns.IsDefined || returns.Value == that.Returns)) {
					return that;
				}
			}
		
			return ProjectTargetElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				afterTargets: afterTargets,
				beforeTargets: beforeTargets,
				dependsOnTargets: dependsOnTargets,
				inputs: inputs,
				keepDuplicateOutputs: keepDuplicateOutputs,
				name: name,
				outputs: outputs,
				returns: returns);
		}
		
		public override ProjectTargetElement ToProjectTargetElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectTargetElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
		}
		
		public virtual ProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectTaskElement that = this as ProjectTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectTaskElement))) {
				if ((!continueOnError.IsDefined || continueOnError.Value == that.ContinueOnError) && 
				    (!mSBuildArchitecture.IsDefined || mSBuildArchitecture.Value == that.MSBuildArchitecture) && 
				    (!mSBuildRuntime.IsDefined || mSBuildRuntime.Value == that.MSBuildRuntime) && 
				    (!name.IsDefined || name.Value == that.Name)) {
					return that;
				}
			}
		
			return ProjectTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				continueOnError: continueOnError,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildRuntime: mSBuildRuntime,
				name: name);
		}
		
		public override ProjectTaskElement ToProjectTaskElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectTaskElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
		}
		
		public virtual ProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			ProjectUsingTaskElement that = this as ProjectUsingTaskElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(ProjectUsingTaskElement))) {
				if ((!architecture.IsDefined || architecture.Value == that.Architecture) && 
				    (!assemblyFile.IsDefined || assemblyFile.Value == that.AssemblyFile) && 
				    (!assemblyName.IsDefined || assemblyName.Value == that.AssemblyName) && 
				    (!runtime.IsDefined || runtime.Value == that.Runtime) && 
				    (!taskFactory.IsDefined || taskFactory.Value == that.TaskFactory) && 
				    (!taskName.IsDefined || taskName.Value == that.TaskName)) {
					return that;
				}
			}
		
			return ProjectUsingTaskElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity,
				architecture: architecture,
				assemblyFile: assemblyFile,
				assemblyName: assemblyName,
				runtime: runtime,
				taskFactory: taskFactory,
				taskName: taskName);
		}
		
		public override ProjectUsingTaskElement ToProjectUsingTaskElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return base.ToProjectUsingTaskElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
		}
		
		public virtual UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			UsingTaskParameterGroupElement that = this as UsingTaskParameterGroupElement;
			if (that != null && this.GetType().IsEquivalentTo(typeof(UsingTaskParameterGroupElement))) {
				return that;
			}
		
			return UsingTaskParameterGroupElement.CreateWithIdentity(
				condition: Optional.For(this.Condition),
				label: Optional.For(this.Label),
				children: Optional.For(this.Children),
				identity: this.Identity);
		}
		
		public override UsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return base.ToUsingTaskParameterGroupElement(
					children: Optional.For(children.GetValueOrDefault(this.Children)));
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get { return this.Children; }
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			var parented = this.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(parented.Value, parented.Parent);
		}
		int IRecursiveParentWithOrderedChildren.IndexOf(IRecursiveType value) {
			return this.Children.IndexOf((ProjectElement)value);
		}
	}
	
	public partial struct RootedProjectElementContainer : System.IEquatable<RootedProjectElementContainer>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectElementContainer greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectElementContainer(ProjectElementContainer projectElementContainer, ProjectElementContainer root) {
			this.greenNode = projectElementContainer;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectElementContainer);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public bool IsProjectRootElement {
			get { return this.greenNode is ProjectRootElement; }
		}
	
		public RootedProjectRootElement AsProjectRootElement {
			get { return this.greenNode != null ? ((ProjectRootElement)this.greenNode).WithRoot(this.root) : default(RootedProjectRootElement); }
		}
	
		public bool IsProjectPropertyGroupElement {
			get { return this.greenNode is ProjectPropertyGroupElement; }
		}
	
		public RootedProjectPropertyGroupElement AsProjectPropertyGroupElement {
			get { return this.greenNode != null ? ((ProjectPropertyGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectPropertyGroupElement); }
		}
	
		public bool IsProjectItemGroupElement {
			get { return this.greenNode is ProjectItemGroupElement; }
		}
	
		public RootedProjectItemGroupElement AsProjectItemGroupElement {
			get { return this.greenNode != null ? ((ProjectItemGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemGroupElement); }
		}
	
		public bool IsProjectChooseElement {
			get { return this.greenNode is ProjectChooseElement; }
		}
	
		public RootedProjectChooseElement AsProjectChooseElement {
			get { return this.greenNode != null ? ((ProjectChooseElement)this.greenNode).WithRoot(this.root) : default(RootedProjectChooseElement); }
		}
	
		public bool IsProjectOtherwiseElement {
			get { return this.greenNode is ProjectOtherwiseElement; }
		}
	
		public RootedProjectOtherwiseElement AsProjectOtherwiseElement {
			get { return this.greenNode != null ? ((ProjectOtherwiseElement)this.greenNode).WithRoot(this.root) : default(RootedProjectOtherwiseElement); }
		}
	
		public bool IsProjectWhenElement {
			get { return this.greenNode is ProjectWhenElement; }
		}
	
		public RootedProjectWhenElement AsProjectWhenElement {
			get { return this.greenNode != null ? ((ProjectWhenElement)this.greenNode).WithRoot(this.root) : default(RootedProjectWhenElement); }
		}
	
		public bool IsProjectItemElement {
			get { return this.greenNode is ProjectItemElement; }
		}
	
		public RootedProjectItemElement AsProjectItemElement {
			get { return this.greenNode != null ? ((ProjectItemElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemElement); }
		}
	
		public bool IsProjectImportGroupElement {
			get { return this.greenNode is ProjectImportGroupElement; }
		}
	
		public RootedProjectImportGroupElement AsProjectImportGroupElement {
			get { return this.greenNode != null ? ((ProjectImportGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectImportGroupElement); }
		}
	
		public bool IsProjectItemDefinitionElement {
			get { return this.greenNode is ProjectItemDefinitionElement; }
		}
	
		public RootedProjectItemDefinitionElement AsProjectItemDefinitionElement {
			get { return this.greenNode != null ? ((ProjectItemDefinitionElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemDefinitionElement); }
		}
	
		public bool IsProjectItemDefinitionGroupElement {
			get { return this.greenNode is ProjectItemDefinitionGroupElement; }
		}
	
		public RootedProjectItemDefinitionGroupElement AsProjectItemDefinitionGroupElement {
			get { return this.greenNode != null ? ((ProjectItemDefinitionGroupElement)this.greenNode).WithRoot(this.root) : default(RootedProjectItemDefinitionGroupElement); }
		}
	
		public bool IsProjectTargetElement {
			get { return this.greenNode is ProjectTargetElement; }
		}
	
		public RootedProjectTargetElement AsProjectTargetElement {
			get { return this.greenNode != null ? ((ProjectTargetElement)this.greenNode).WithRoot(this.root) : default(RootedProjectTargetElement); }
		}
	
		public bool IsProjectTaskElement {
			get { return this.greenNode is ProjectTaskElement; }
		}
	
		public RootedProjectTaskElement AsProjectTaskElement {
			get { return this.greenNode != null ? ((ProjectTaskElement)this.greenNode).WithRoot(this.root) : default(RootedProjectTaskElement); }
		}
	
		public bool IsProjectUsingTaskElement {
			get { return this.greenNode is ProjectUsingTaskElement; }
		}
	
		public RootedProjectUsingTaskElement AsProjectUsingTaskElement {
			get { return this.greenNode != null ? ((ProjectUsingTaskElement)this.greenNode).WithRoot(this.root) : default(RootedProjectUsingTaskElement); }
		}
	
		public bool IsUsingTaskParameterGroupElement {
			get { return this.greenNode is UsingTaskParameterGroupElement; }
		}
	
		public RootedUsingTaskParameterGroupElement AsUsingTaskParameterGroupElement {
			get { return this.greenNode != null ? ((UsingTaskParameterGroupElement)this.greenNode).WithRoot(this.root) : default(RootedUsingTaskParameterGroupElement); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public bool IsRoot {
			get { return this.root == this.greenNode; }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectElementContainer WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectElementContainer WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectElementContainer, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectElementContainer, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectElementContainer WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectElementContainer WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectElementContainer, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectElementContainer, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectElementContainer RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectElementContainer ProjectElementContainer {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectElementContainer With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public RootedProjectElement Find(System.Int32 identity) {
			this.ThrowIfDefault();
			return this.greenNode.Find(identity).WithRoot(this.root);
		}
	
		public bool TryFind(System.Int32 identity, out RootedProjectElement value) {
			this.ThrowIfDefault();
			ProjectElement greenValue;
			if (this.greenNode.TryFind(identity, out greenValue)) {
				value = greenValue.WithRoot(this.root);
				return true;
			}
	
			value = default(RootedProjectElement);
			return false;
		}
	
		public System.Collections.Generic.IEnumerator<RootedProjectElement> GetEnumerator() {
			return this.Children.GetEnumerator();
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectElementContainer priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectElementContainer);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectElementContainer) {
				var other = (RootedProjectElementContainer)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectElementContainer other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectElementContainer NewSpine(ProjectElementContainer leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectElementContainer.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectRootElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectRootElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String fullPath;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Text.Encoding encoding;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String toolsVersion;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String defaultTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String initialTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean treatAsLocalProperty;
	
		/// <summary>Initializes a new instance of the ProjectRootElement class.</summary>
		protected ProjectRootElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String fullPath,
			System.Text.Encoding encoding,
			System.String toolsVersion,
			System.String defaultTargets,
			System.String initialTargets,
			System.Boolean treatAsLocalProperty,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.fullPath = fullPath;
			this.encoding = encoding;
			this.toolsVersion = toolsVersion;
			this.defaultTargets = defaultTargets;
			this.initialTargets = initialTargets;
			this.treatAsLocalProperty = treatAsLocalProperty;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectRootElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String FullPath {
			get { return this.fullPath; }
		}
	
		public System.Text.Encoding Encoding {
			get { return this.encoding; }
		}
	
		public System.String ToolsVersion {
			get { return this.toolsVersion; }
		}
	
		public System.String DefaultTargets {
			get { return this.defaultTargets; }
		}
	
		public System.String InitialTargets {
			get { return this.initialTargets; }
		}
	
		public System.Boolean TreatAsLocalProperty {
			get { return this.treatAsLocalProperty; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectRootElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectRootElement AddChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectRootElement AddChild(ProjectElement value) {
			return (ProjectRootElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectRootElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectRootElement RemoveChild(ProjectElement value) {
			return (ProjectRootElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectRootElement RemoveChildren() {
			return (ProjectRootElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectRootElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			return (ProjectRootElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				defaultTargets: defaultTargets,
				initialTargets: initialTargets,
				treatAsLocalProperty: treatAsLocalProperty);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectRootElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				fullPath: Optional.For(fullPath.GetValueOrDefault(this.FullPath)),
				encoding: Optional.For(encoding.GetValueOrDefault(this.Encoding)),
				toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(this.ToolsVersion)),
				defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(this.DefaultTargets)),
				initialTargets: Optional.For(initialTargets.GetValueOrDefault(this.InitialTargets)),
				treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectRootElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(fullPath.IsDefined && fullPath.Value != this.FullPath) || 
				(encoding.IsDefined && encoding.Value != this.Encoding) || 
				(toolsVersion.IsDefined && toolsVersion.Value != this.ToolsVersion) || 
				(defaultTargets.IsDefined && defaultTargets.Value != this.DefaultTargets) || 
				(initialTargets.IsDefined && initialTargets.Value != this.InitialTargets) || 
				(treatAsLocalProperty.IsDefined && treatAsLocalProperty.Value != this.TreatAsLocalProperty)) {
				return new ProjectRootElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					fullPath: fullPath.GetValueOrDefault(this.FullPath),
					encoding: encoding.GetValueOrDefault(this.Encoding),
					toolsVersion: toolsVersion.GetValueOrDefault(this.ToolsVersion),
					defaultTargets: defaultTargets.GetValueOrDefault(this.DefaultTargets),
					initialTargets: initialTargets.GetValueOrDefault(this.InitialTargets),
					treatAsLocalProperty: treatAsLocalProperty.GetValueOrDefault(this.TreatAsLocalProperty));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectRootElement whose fields are initialized with default values.</summary>
		private static ProjectRootElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectRootElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.FullPath,
				template.Encoding,
				template.ToolsVersion,
				template.DefaultTargets,
				template.InitialTargets,
				template.TreatAsLocalProperty,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String FullPath { get; set; }
	
			internal System.Text.Encoding Encoding { get; set; }
	
			internal System.String ToolsVersion { get; set; }
	
			internal System.String DefaultTargets { get; set; }
	
			internal System.String InitialTargets { get; set; }
	
			internal System.Boolean TreatAsLocalProperty { get; set; }
		}
		
		public RootedProjectRootElement AsRoot {
			get { return new RootedProjectRootElement(this, this); }
		}
		
		public new RootedProjectRootElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectRootElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectRootElement = other as ProjectRootElement;
			if (otherProjectRootElement != null) {
				if (this.FullPath != otherProjectRootElement.FullPath) {
					propertiesChanged |= ProjectElementChangedProperties.FullPath;
				}
		
				if (this.Encoding != otherProjectRootElement.Encoding) {
					propertiesChanged |= ProjectElementChangedProperties.Encoding;
				}
		
				if (this.ToolsVersion != otherProjectRootElement.ToolsVersion) {
					propertiesChanged |= ProjectElementChangedProperties.ToolsVersion;
				}
		
				if (this.DefaultTargets != otherProjectRootElement.DefaultTargets) {
					propertiesChanged |= ProjectElementChangedProperties.DefaultTargets;
				}
		
				if (this.InitialTargets != otherProjectRootElement.InitialTargets) {
					propertiesChanged |= ProjectElementChangedProperties.InitialTargets;
				}
		
				if (this.TreatAsLocalProperty != otherProjectRootElement.TreatAsLocalProperty) {
					propertiesChanged |= ProjectElementChangedProperties.TreatAsLocalProperty;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectRootElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
				ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					fullPath: Optional.For(fullPath.GetValueOrDefault(DefaultInstance.FullPath)),
					encoding: Optional.For(encoding.GetValueOrDefault(DefaultInstance.Encoding)),
					toolsVersion: Optional.For(toolsVersion.GetValueOrDefault(DefaultInstance.ToolsVersion)),
					defaultTargets: Optional.For(defaultTargets.GetValueOrDefault(DefaultInstance.DefaultTargets)),
					initialTargets: Optional.For(initialTargets.GetValueOrDefault(DefaultInstance.InitialTargets)),
					treatAsLocalProperty: Optional.For(treatAsLocalProperty.GetValueOrDefault(DefaultInstance.TreatAsLocalProperty)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectRootElement : System.IEquatable<RootedProjectRootElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectRootElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectRootElement(ProjectRootElement projectRootElement, ProjectElementContainer root) {
			this.greenNode = projectRootElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectRootElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectRootElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectRootElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectRootElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectRootElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectRootElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectRootElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectRootElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectRootElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectRootElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectRootElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectRootElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectRootElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectRootElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectRootElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectRootElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectRootElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectRootElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectRootElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectRootElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String FullPath {
			get {
				this.ThrowIfDefault();
				return this.greenNode.FullPath;
			}
		}
	
		public System.Text.Encoding Encoding {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Encoding;
			}
		}
	
		public System.String ToolsVersion {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ToolsVersion;
			}
		}
	
		public System.String DefaultTargets {
			get {
				this.ThrowIfDefault();
				return this.greenNode.DefaultTargets;
			}
		}
	
		public System.String InitialTargets {
			get {
				this.ThrowIfDefault();
				return this.greenNode.InitialTargets;
			}
		}
	
		public System.Boolean TreatAsLocalProperty {
			get {
				this.ThrowIfDefault();
				return this.greenNode.TreatAsLocalProperty;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectRootElement ProjectRootElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectRootElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				fullPath: fullPath,
				encoding: encoding,
				toolsVersion: toolsVersion,
				defaultTargets: defaultTargets,
				initialTargets: initialTargets,
				treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectRootElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectRootElement);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectRootElement) {
				var other = (RootedProjectRootElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectRootElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectRootElement NewSpine(ProjectRootElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectRootElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectPropertyGroupElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectPropertyGroupElement class.</summary>
		protected ProjectPropertyGroupElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectPropertyGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectPropertyGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement AddChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectPropertyGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChild(ProjectElement value) {
			return (ProjectPropertyGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectPropertyGroupElement RemoveChildren() {
			return (ProjectPropertyGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectPropertyGroupElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectPropertyGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyGroupElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyGroupElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectPropertyGroupElement AsRoot {
			get { return new RootedProjectPropertyGroupElement(this, this); }
		}
		
		public new RootedProjectPropertyGroupElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectPropertyGroupElement(this, root);
		}
		
		internal static ProjectPropertyGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectPropertyGroupElement : System.IEquatable<RootedProjectPropertyGroupElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectPropertyGroupElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectPropertyGroupElement(ProjectPropertyGroupElement projectPropertyGroupElement, ProjectElementContainer root) {
			this.greenNode = projectPropertyGroupElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectPropertyGroupElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectPropertyGroupElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectPropertyGroupElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectPropertyGroupElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectPropertyGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectPropertyGroupElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectPropertyGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectPropertyGroupElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectPropertyGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectPropertyGroupElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectPropertyGroupElement ProjectPropertyGroupElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectPropertyGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectPropertyGroupElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectPropertyGroupElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectPropertyGroupElement) {
				var other = (RootedProjectPropertyGroupElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectPropertyGroupElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectPropertyGroupElement NewSpine(ProjectPropertyGroupElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectPropertyGroupElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectItemGroupElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectItemGroupElement class.</summary>
		protected ProjectItemGroupElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectItemGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemGroupElement AddChild(ProjectElement value) {
			return (ProjectItemGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChild(ProjectElement value) {
			return (ProjectItemGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemGroupElement RemoveChildren() {
			return (ProjectItemGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectItemGroupElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectItemGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemGroupElement whose fields are initialized with default values.</summary>
		private static ProjectItemGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemGroupElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectItemGroupElement AsRoot {
			get { return new RootedProjectItemGroupElement(this, this); }
		}
		
		public new RootedProjectItemGroupElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectItemGroupElement(this, root);
		}
		
		internal static ProjectItemGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectItemGroupElement : System.IEquatable<RootedProjectItemGroupElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectItemGroupElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectItemGroupElement(ProjectItemGroupElement projectItemGroupElement, ProjectElementContainer root) {
			this.greenNode = projectItemGroupElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectItemGroupElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemGroupElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemGroupElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemGroupElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemGroupElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemGroupElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectItemGroupElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectItemGroupElement ProjectItemGroupElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectItemGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectItemGroupElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectItemGroupElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectItemGroupElement) {
				var other = (RootedProjectItemGroupElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectItemGroupElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectItemGroupElement NewSpine(ProjectItemGroupElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectItemGroupElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectChooseElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectChooseElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectChooseElement class.</summary>
		protected ProjectChooseElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectChooseElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectChooseElement WithChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectChooseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectChooseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectChooseElement AddChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectChooseElement AddChild(ProjectElement value) {
			return (ProjectChooseElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectChooseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectChooseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectChooseElement RemoveChild(ProjectElement value) {
			return (ProjectChooseElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectChooseElement RemoveChildren() {
			return (ProjectChooseElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectChooseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectChooseElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectChooseElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectChooseElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectChooseElement whose fields are initialized with default values.</summary>
		private static ProjectChooseElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectChooseElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectChooseElement AsRoot {
			get { return new RootedProjectChooseElement(this, this); }
		}
		
		public new RootedProjectChooseElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectChooseElement(this, root);
		}
		
		internal static ProjectChooseElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectChooseElement : System.IEquatable<RootedProjectChooseElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectChooseElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectChooseElement(ProjectChooseElement projectChooseElement, ProjectElementContainer root) {
			this.greenNode = projectChooseElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectChooseElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectChooseElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectChooseElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectChooseElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectChooseElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectChooseElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectChooseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectChooseElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectChooseElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectChooseElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectChooseElement ProjectChooseElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectChooseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectChooseElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectChooseElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectChooseElement) {
				var other = (RootedProjectChooseElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectChooseElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectChooseElement NewSpine(ProjectChooseElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectChooseElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectOtherwiseElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOtherwiseElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectOtherwiseElement class.</summary>
		protected ProjectOtherwiseElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectOtherwiseElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectOtherwiseElement WithChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectOtherwiseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectOtherwiseElement AddChild(ProjectElement value) {
			return (ProjectOtherwiseElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectOtherwiseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectOtherwiseElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChild(ProjectElement value) {
			return (ProjectOtherwiseElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectOtherwiseElement RemoveChildren() {
			return (ProjectOtherwiseElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOtherwiseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectOtherwiseElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOtherwiseElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectOtherwiseElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOtherwiseElement whose fields are initialized with default values.</summary>
		private static ProjectOtherwiseElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOtherwiseElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectOtherwiseElement AsRoot {
			get { return new RootedProjectOtherwiseElement(this, this); }
		}
		
		public new RootedProjectOtherwiseElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectOtherwiseElement(this, root);
		}
		
		internal static ProjectOtherwiseElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectOtherwiseElement : System.IEquatable<RootedProjectOtherwiseElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectOtherwiseElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectOtherwiseElement(ProjectOtherwiseElement projectOtherwiseElement, ProjectElementContainer root) {
			this.greenNode = projectOtherwiseElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectOtherwiseElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectOtherwiseElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectOtherwiseElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectOtherwiseElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectOtherwiseElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectOtherwiseElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectOtherwiseElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectOtherwiseElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectOtherwiseElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectOtherwiseElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectOtherwiseElement ProjectOtherwiseElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectOtherwiseElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectOtherwiseElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectOtherwiseElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectOtherwiseElement) {
				var other = (RootedProjectOtherwiseElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectOtherwiseElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectOtherwiseElement NewSpine(ProjectOtherwiseElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectOtherwiseElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectWhenElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectWhenElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectWhenElement class.</summary>
		protected ProjectWhenElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectWhenElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectWhenElement WithChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectWhenElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectWhenElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectWhenElement AddChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectWhenElement AddChild(ProjectElement value) {
			return (ProjectWhenElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectWhenElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectWhenElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectWhenElement RemoveChild(ProjectElement value) {
			return (ProjectWhenElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectWhenElement RemoveChildren() {
			return (ProjectWhenElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectWhenElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectWhenElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectWhenElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectWhenElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectWhenElement whose fields are initialized with default values.</summary>
		private static ProjectWhenElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectWhenElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectWhenElement AsRoot {
			get { return new RootedProjectWhenElement(this, this); }
		}
		
		public new RootedProjectWhenElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectWhenElement(this, root);
		}
		
		internal static ProjectWhenElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectWhenElement : System.IEquatable<RootedProjectWhenElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectWhenElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectWhenElement(ProjectWhenElement projectWhenElement, ProjectElementContainer root) {
			this.greenNode = projectWhenElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectWhenElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectWhenElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectWhenElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectWhenElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectWhenElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectWhenElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectWhenElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectWhenElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectWhenElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectWhenElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectWhenElement ProjectWhenElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectWhenElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectWhenElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectWhenElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectWhenElement) {
				var other = (RootedProjectWhenElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectWhenElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectWhenElement NewSpine(ProjectWhenElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectWhenElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectPropertyElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectPropertyElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectPropertyElement class.</summary>
		protected ProjectPropertyElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String name,
			System.String value,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.name = name;
			this.value = value;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectPropertyElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectPropertyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectPropertyElement)this.WithCore(
				condition: condition,
				label: label,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectPropertyElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectPropertyElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectPropertyElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectPropertyElement whose fields are initialized with default values.</summary>
		private static ProjectPropertyElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectPropertyElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Name,
				template.Value,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		public new RootedProjectPropertyElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectPropertyElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectPropertyElement = other as ProjectPropertyElement;
			if (otherProjectPropertyElement != null) {
				if (this.Name != otherProjectPropertyElement.Name) {
					propertiesChanged |= ProjectElementChangedProperties.Name;
				}
		
				if (this.Value != otherProjectPropertyElement.Value) {
					propertiesChanged |= ProjectElementChangedProperties.Value;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectPropertyElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectPropertyElement : System.IEquatable<RootedProjectPropertyElement>, IRecursiveType {
		private readonly ProjectPropertyElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectPropertyElement(ProjectPropertyElement projectPropertyElement, ProjectElementContainer root) {
			this.greenNode = projectPropertyElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectPropertyElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Name {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Name;
			}
		}
	
		public System.String Value {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Value;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectPropertyElement ProjectPropertyElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectPropertyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				name: name,
				value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectPropertyElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectPropertyElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectPropertyElement) {
				var other = (RootedProjectPropertyElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectPropertyElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectPropertyElement NewSpine(ProjectPropertyElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectPropertyElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectItemElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String exclude;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String include;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepDuplicates;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepMetadata;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String remove;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String removeMetadata;
	
		/// <summary>Initializes a new instance of the ProjectItemElement class.</summary>
		protected ProjectItemElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String exclude,
			System.String include,
			System.String itemType,
			System.String keepDuplicates,
			System.String keepMetadata,
			System.String remove,
			System.String removeMetadata,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.exclude = exclude;
			this.include = include;
			this.itemType = itemType;
			this.keepDuplicates = keepDuplicates;
			this.keepMetadata = keepMetadata;
			this.remove = remove;
			this.removeMetadata = removeMetadata;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectItemElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
				include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
				remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Exclude {
			get { return this.exclude; }
		}
	
		public System.String Include {
			get { return this.include; }
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public System.String KeepDuplicates {
			get { return this.keepDuplicates; }
		}
	
		public System.String KeepMetadata {
			get { return this.keepMetadata; }
		}
	
		public System.String Remove {
			get { return this.remove; }
		}
	
		public System.String RemoveMetadata {
			get { return this.removeMetadata; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemElement AddChild(ProjectElement value) {
			return (ProjectItemElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemElement RemoveChild(ProjectElement value) {
			return (ProjectItemElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemElement RemoveChildren() {
			return (ProjectItemElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectItemElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				exclude: exclude,
				include: include,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepMetadata: keepMetadata,
				remove: remove,
				removeMetadata: removeMetadata);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				exclude: Optional.For(exclude.GetValueOrDefault(this.Exclude)),
				include: Optional.For(include.GetValueOrDefault(this.Include)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(this.KeepDuplicates)),
				keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(this.KeepMetadata)),
				remove: Optional.For(remove.GetValueOrDefault(this.Remove)),
				removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(this.RemoveMetadata)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(exclude.IsDefined && exclude.Value != this.Exclude) || 
				(include.IsDefined && include.Value != this.Include) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(keepDuplicates.IsDefined && keepDuplicates.Value != this.KeepDuplicates) || 
				(keepMetadata.IsDefined && keepMetadata.Value != this.KeepMetadata) || 
				(remove.IsDefined && remove.Value != this.Remove) || 
				(removeMetadata.IsDefined && removeMetadata.Value != this.RemoveMetadata)) {
				return new ProjectItemElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					exclude: exclude.GetValueOrDefault(this.Exclude),
					include: include.GetValueOrDefault(this.Include),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					keepDuplicates: keepDuplicates.GetValueOrDefault(this.KeepDuplicates),
					keepMetadata: keepMetadata.GetValueOrDefault(this.KeepMetadata),
					remove: remove.GetValueOrDefault(this.Remove),
					removeMetadata: removeMetadata.GetValueOrDefault(this.RemoveMetadata));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemElement whose fields are initialized with default values.</summary>
		private static ProjectItemElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.Exclude,
				template.Include,
				template.ItemType,
				template.KeepDuplicates,
				template.KeepMetadata,
				template.Remove,
				template.RemoveMetadata,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String Exclude { get; set; }
	
			internal System.String Include { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal System.String KeepDuplicates { get; set; }
	
			internal System.String KeepMetadata { get; set; }
	
			internal System.String Remove { get; set; }
	
			internal System.String RemoveMetadata { get; set; }
		}
		
		public RootedProjectItemElement AsRoot {
			get { return new RootedProjectItemElement(this, this); }
		}
		
		public new RootedProjectItemElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectItemElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectItemElement = other as ProjectItemElement;
			if (otherProjectItemElement != null) {
				if (this.Exclude != otherProjectItemElement.Exclude) {
					propertiesChanged |= ProjectElementChangedProperties.Exclude;
				}
		
				if (this.Include != otherProjectItemElement.Include) {
					propertiesChanged |= ProjectElementChangedProperties.Include;
				}
		
				if (this.ItemType != otherProjectItemElement.ItemType) {
					propertiesChanged |= ProjectElementChangedProperties.ItemType;
				}
		
				if (this.KeepDuplicates != otherProjectItemElement.KeepDuplicates) {
					propertiesChanged |= ProjectElementChangedProperties.KeepDuplicates;
				}
		
				if (this.KeepMetadata != otherProjectItemElement.KeepMetadata) {
					propertiesChanged |= ProjectElementChangedProperties.KeepMetadata;
				}
		
				if (this.Remove != otherProjectItemElement.Remove) {
					propertiesChanged |= ProjectElementChangedProperties.Remove;
				}
		
				if (this.RemoveMetadata != otherProjectItemElement.RemoveMetadata) {
					propertiesChanged |= ProjectElementChangedProperties.RemoveMetadata;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectItemElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					exclude: Optional.For(exclude.GetValueOrDefault(DefaultInstance.Exclude)),
					include: Optional.For(include.GetValueOrDefault(DefaultInstance.Include)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					keepDuplicates: Optional.For(keepDuplicates.GetValueOrDefault(DefaultInstance.KeepDuplicates)),
					keepMetadata: Optional.For(keepMetadata.GetValueOrDefault(DefaultInstance.KeepMetadata)),
					remove: Optional.For(remove.GetValueOrDefault(DefaultInstance.Remove)),
					removeMetadata: Optional.For(removeMetadata.GetValueOrDefault(DefaultInstance.RemoveMetadata)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectItemElement : System.IEquatable<RootedProjectItemElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectItemElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectItemElement(ProjectItemElement projectItemElement, ProjectElementContainer root) {
			this.greenNode = projectItemElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectItemElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectItemElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String Exclude {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Exclude;
			}
		}
	
		public System.String Include {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Include;
			}
		}
	
		public System.String ItemType {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ItemType;
			}
		}
	
		public System.String KeepDuplicates {
			get {
				this.ThrowIfDefault();
				return this.greenNode.KeepDuplicates;
			}
		}
	
		public System.String KeepMetadata {
			get {
				this.ThrowIfDefault();
				return this.greenNode.KeepMetadata;
			}
		}
	
		public System.String Remove {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Remove;
			}
		}
	
		public System.String RemoveMetadata {
			get {
				this.ThrowIfDefault();
				return this.greenNode.RemoveMetadata;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectItemElement ProjectItemElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectItemElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				exclude: exclude,
				include: include,
				itemType: itemType,
				keepDuplicates: keepDuplicates,
				keepMetadata: keepMetadata,
				remove: remove,
				removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectItemElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectItemElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectItemElement) {
				var other = (RootedProjectItemElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectItemElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectItemElement NewSpine(ProjectItemElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectItemElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectMetadataElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectMetadataElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String value;
	
		/// <summary>Initializes a new instance of the ProjectMetadataElement class.</summary>
		protected ProjectMetadataElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String name,
			System.String value,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.name = name;
			this.value = value;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectMetadataElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Value {
			get { return this.value; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectMetadataElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectMetadataElement)this.WithCore(
				condition: condition,
				label: label,
				name: name,
				value: value);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectMetadataElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				value: Optional.For(value.GetValueOrDefault(this.Value)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectMetadataElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(name.IsDefined && name.Value != this.Name) || 
				(value.IsDefined && value.Value != this.Value)) {
				return new ProjectMetadataElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					name: name.GetValueOrDefault(this.Name),
					value: value.GetValueOrDefault(this.Value));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectMetadataElement whose fields are initialized with default values.</summary>
		private static ProjectMetadataElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectMetadataElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Name,
				template.Value,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Value { get; set; }
		}
		
		public new RootedProjectMetadataElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectMetadataElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectMetadataElement = other as ProjectMetadataElement;
			if (otherProjectMetadataElement != null) {
				if (this.Name != otherProjectMetadataElement.Name) {
					propertiesChanged |= ProjectElementChangedProperties.Name;
				}
		
				if (this.Value != otherProjectMetadataElement.Value) {
					propertiesChanged |= ProjectElementChangedProperties.Value;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectMetadataElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					value: Optional.For(value.GetValueOrDefault(DefaultInstance.Value)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectMetadataElement : System.IEquatable<RootedProjectMetadataElement>, IRecursiveType {
		private readonly ProjectMetadataElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectMetadataElement(ProjectMetadataElement projectMetadataElement, ProjectElementContainer root) {
			this.greenNode = projectMetadataElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectMetadataElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Name {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Name;
			}
		}
	
		public System.String Value {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Value;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectMetadataElement ProjectMetadataElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectMetadataElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				name: name,
				value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectMetadataElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectMetadataElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectMetadataElement) {
				var other = (RootedProjectMetadataElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectMetadataElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectMetadataElement NewSpine(ProjectMetadataElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectMetadataElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectExtensionsElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectExtensionsElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String content;
	
		/// <summary>Initializes a new instance of the ProjectExtensionsElement class.</summary>
		protected ProjectExtensionsElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String content,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.content = content;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectExtensionsElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Content {
			get { return this.content; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectExtensionsElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectExtensionsElement)this.WithCore(
				condition: condition,
				label: label,
				content: content);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectExtensionsElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				content: Optional.For(content.GetValueOrDefault(this.Content)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectExtensionsElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(content.IsDefined && content.Value != this.Content)) {
				return new ProjectExtensionsElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					content: content.GetValueOrDefault(this.Content));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectExtensionsElement whose fields are initialized with default values.</summary>
		private static ProjectExtensionsElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectExtensionsElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Content,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Content { get; set; }
		}
		
		public new RootedProjectExtensionsElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectExtensionsElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectExtensionsElement = other as ProjectExtensionsElement;
			if (otherProjectExtensionsElement != null) {
				if (this.Content != otherProjectExtensionsElement.Content) {
					propertiesChanged |= ProjectElementChangedProperties.Content;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectExtensionsElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					content: Optional.For(content.GetValueOrDefault(DefaultInstance.Content)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectExtensionsElement : System.IEquatable<RootedProjectExtensionsElement>, IRecursiveType {
		private readonly ProjectExtensionsElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectExtensionsElement(ProjectExtensionsElement projectExtensionsElement, ProjectElementContainer root) {
			this.greenNode = projectExtensionsElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectExtensionsElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Content {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Content;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectExtensionsElement ProjectExtensionsElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectExtensionsElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectExtensionsElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectExtensionsElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectExtensionsElement) {
				var other = (RootedProjectExtensionsElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectExtensionsElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectExtensionsElement NewSpine(ProjectExtensionsElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectExtensionsElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectImportElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectImportElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String project;
	
		/// <summary>Initializes a new instance of the ProjectImportElement class.</summary>
		protected ProjectImportElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String project,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.project = project;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectImportElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				project: Optional.For(project.GetValueOrDefault(DefaultInstance.Project)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Project {
			get { return this.project; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectImportElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectImportElement)this.WithCore(
				condition: condition,
				label: label,
				project: project);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectImportElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				project: Optional.For(project.GetValueOrDefault(this.Project)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectImportElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(project.IsDefined && project.Value != this.Project)) {
				return new ProjectImportElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					project: project.GetValueOrDefault(this.Project));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectImportElement whose fields are initialized with default values.</summary>
		private static ProjectImportElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectImportElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Project,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Project { get; set; }
		}
		
		public new RootedProjectImportElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectImportElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectImportElement = other as ProjectImportElement;
			if (otherProjectImportElement != null) {
				if (this.Project != otherProjectImportElement.Project) {
					propertiesChanged |= ProjectElementChangedProperties.Project;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectImportElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					project: Optional.For(project.GetValueOrDefault(DefaultInstance.Project)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectImportElement : System.IEquatable<RootedProjectImportElement>, IRecursiveType {
		private readonly ProjectImportElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectImportElement(ProjectImportElement projectImportElement, ProjectElementContainer root) {
			this.greenNode = projectImportElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectImportElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Project {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Project;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectImportElement ProjectImportElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectImportElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectImportElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectImportElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectImportElement) {
				var other = (RootedProjectImportElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectImportElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectImportElement NewSpine(ProjectImportElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectImportElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectImportGroupElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectImportGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectImportGroupElement class.</summary>
		protected ProjectImportGroupElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectImportGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectImportGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectImportGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectImportGroupElement AddChild(ProjectElement value) {
			return (ProjectImportGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectImportGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectImportGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChild(ProjectElement value) {
			return (ProjectImportGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectImportGroupElement RemoveChildren() {
			return (ProjectImportGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectImportGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectImportGroupElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectImportGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectImportGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectImportGroupElement whose fields are initialized with default values.</summary>
		private static ProjectImportGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectImportGroupElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectImportGroupElement AsRoot {
			get { return new RootedProjectImportGroupElement(this, this); }
		}
		
		public new RootedProjectImportGroupElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectImportGroupElement(this, root);
		}
		
		internal static ProjectImportGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectImportGroupElement : System.IEquatable<RootedProjectImportGroupElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectImportGroupElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectImportGroupElement(ProjectImportGroupElement projectImportGroupElement, ProjectElementContainer root) {
			this.greenNode = projectImportGroupElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectImportGroupElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectImportGroupElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectImportGroupElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectImportGroupElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectImportGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectImportGroupElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectImportGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectImportGroupElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectImportGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectImportGroupElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectImportGroupElement ProjectImportGroupElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectImportGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectImportGroupElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectImportGroupElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectImportGroupElement) {
				var other = (RootedProjectImportGroupElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectImportGroupElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectImportGroupElement NewSpine(ProjectImportGroupElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectImportGroupElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectItemDefinitionElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemDefinitionElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		/// <summary>Initializes a new instance of the ProjectItemDefinitionElement class.</summary>
		protected ProjectItemDefinitionElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String itemType,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.itemType = itemType;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectItemDefinitionElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionElement AddChild(ProjectElement value) {
			return (ProjectItemDefinitionElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChild(ProjectElement value) {
			return (ProjectItemDefinitionElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemDefinitionElement RemoveChildren() {
			return (ProjectItemDefinitionElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemDefinitionElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectItemDefinitionElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				itemType: itemType);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectItemDefinitionElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemDefinitionElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(itemType.IsDefined && itemType.Value != this.ItemType)) {
				return new ProjectItemDefinitionElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					itemType: itemType.GetValueOrDefault(this.ItemType));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemDefinitionElement whose fields are initialized with default values.</summary>
		private static ProjectItemDefinitionElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemDefinitionElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.ItemType,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String ItemType { get; set; }
		}
		
		public RootedProjectItemDefinitionElement AsRoot {
			get { return new RootedProjectItemDefinitionElement(this, this); }
		}
		
		public new RootedProjectItemDefinitionElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectItemDefinitionElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectItemDefinitionElement = other as ProjectItemDefinitionElement;
			if (otherProjectItemDefinitionElement != null) {
				if (this.ItemType != otherProjectItemDefinitionElement.ItemType) {
					propertiesChanged |= ProjectElementChangedProperties.ItemType;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectItemDefinitionElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectItemDefinitionElement : System.IEquatable<RootedProjectItemDefinitionElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectItemDefinitionElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectItemDefinitionElement(ProjectItemDefinitionElement projectItemDefinitionElement, ProjectElementContainer root) {
			this.greenNode = projectItemDefinitionElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectItemDefinitionElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemDefinitionElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemDefinitionElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemDefinitionElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemDefinitionElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectItemDefinitionElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String ItemType {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ItemType;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectItemDefinitionElement ProjectItemDefinitionElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectItemDefinitionElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectItemDefinitionElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectItemDefinitionElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectItemDefinitionElement) {
				var other = (RootedProjectItemDefinitionElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectItemDefinitionElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectItemDefinitionElement NewSpine(ProjectItemDefinitionElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectItemDefinitionElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectItemDefinitionGroupElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectItemDefinitionGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectItemDefinitionGroupElement class.</summary>
		protected ProjectItemDefinitionGroupElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectItemDefinitionGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionGroupElement WithChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectItemDefinitionGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement AddChild(ProjectElement value) {
			return (ProjectItemDefinitionGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChild(ProjectElement value) {
			return (ProjectItemDefinitionGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectItemDefinitionGroupElement RemoveChildren() {
			return (ProjectItemDefinitionGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectItemDefinitionGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (ProjectItemDefinitionGroupElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectItemDefinitionGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new ProjectItemDefinitionGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectItemDefinitionGroupElement whose fields are initialized with default values.</summary>
		private static ProjectItemDefinitionGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectItemDefinitionGroupElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedProjectItemDefinitionGroupElement AsRoot {
			get { return new RootedProjectItemDefinitionGroupElement(this, this); }
		}
		
		public new RootedProjectItemDefinitionGroupElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectItemDefinitionGroupElement(this, root);
		}
		
		internal static ProjectItemDefinitionGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectItemDefinitionGroupElement : System.IEquatable<RootedProjectItemDefinitionGroupElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectItemDefinitionGroupElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectItemDefinitionGroupElement(ProjectItemDefinitionGroupElement projectItemDefinitionGroupElement, ProjectElementContainer root) {
			this.greenNode = projectItemDefinitionGroupElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectItemDefinitionGroupElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionGroupElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionGroupElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemDefinitionGroupElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemDefinitionGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionGroupElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectItemDefinitionGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectItemDefinitionGroupElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectItemDefinitionGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectItemDefinitionGroupElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectItemDefinitionGroupElement ProjectItemDefinitionGroupElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectItemDefinitionGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectItemDefinitionGroupElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectItemDefinitionGroupElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectItemDefinitionGroupElement) {
				var other = (RootedProjectItemDefinitionGroupElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectItemDefinitionGroupElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectItemDefinitionGroupElement NewSpine(ProjectItemDefinitionGroupElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectItemDefinitionGroupElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectOnErrorElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOnErrorElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the ProjectOnErrorElement class.</summary>
		protected ProjectOnErrorElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectOnErrorElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOnErrorElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectOnErrorElement)this.WithCore(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOnErrorElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label)) {
				return new ProjectOnErrorElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOnErrorElement whose fields are initialized with default values.</summary>
		private static ProjectOnErrorElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOnErrorElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
		}
		
		public new RootedProjectOnErrorElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectOnErrorElement(this, root);
		}
		
		internal static ProjectOnErrorElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedProjectOnErrorElement : System.IEquatable<RootedProjectOnErrorElement>, IRecursiveType {
		private readonly ProjectOnErrorElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectOnErrorElement(ProjectOnErrorElement projectOnErrorElement, ProjectElementContainer root) {
			this.greenNode = projectOnErrorElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectOnErrorElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectOnErrorElement ProjectOnErrorElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectOnErrorElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectOnErrorElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectOnErrorElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectOnErrorElement) {
				var other = (RootedProjectOnErrorElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectOnErrorElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectOnErrorElement NewSpine(ProjectOnErrorElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectOnErrorElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectOutputElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectOutputElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean isOutputItem;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.Boolean isOutputProperty;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String itemType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String propertyName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskParameter;
	
		/// <summary>Initializes a new instance of the ProjectOutputElement class.</summary>
		protected ProjectOutputElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Boolean isOutputItem,
			System.Boolean isOutputProperty,
			System.String itemType,
			System.String propertyName,
			System.String taskParameter,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.isOutputItem = isOutputItem;
			this.isOutputProperty = isOutputProperty;
			this.itemType = itemType;
			this.propertyName = propertyName;
			this.taskParameter = taskParameter;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectOutputElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(DefaultInstance.IsOutputItem)),
				isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(DefaultInstance.IsOutputProperty)),
				itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
				propertyName: Optional.For(propertyName.GetValueOrDefault(DefaultInstance.PropertyName)),
				taskParameter: Optional.For(taskParameter.GetValueOrDefault(DefaultInstance.TaskParameter)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.Boolean IsOutputItem {
			get { return this.isOutputItem; }
		}
	
		public System.Boolean IsOutputProperty {
			get { return this.isOutputProperty; }
		}
	
		public System.String ItemType {
			get { return this.itemType; }
		}
	
		public System.String PropertyName {
			get { return this.propertyName; }
		}
	
		public System.String TaskParameter {
			get { return this.taskParameter; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectOutputElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectOutputElement)this.WithCore(
				condition: condition,
				label: label,
				isOutputItem: isOutputItem,
				isOutputProperty: isOutputProperty,
				itemType: itemType,
				propertyName: propertyName,
				taskParameter: taskParameter);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectOutputElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(this.IsOutputItem)),
				isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(this.IsOutputProperty)),
				itemType: Optional.For(itemType.GetValueOrDefault(this.ItemType)),
				propertyName: Optional.For(propertyName.GetValueOrDefault(this.PropertyName)),
				taskParameter: Optional.For(taskParameter.GetValueOrDefault(this.TaskParameter)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectOutputElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(isOutputItem.IsDefined && isOutputItem.Value != this.IsOutputItem) || 
				(isOutputProperty.IsDefined && isOutputProperty.Value != this.IsOutputProperty) || 
				(itemType.IsDefined && itemType.Value != this.ItemType) || 
				(propertyName.IsDefined && propertyName.Value != this.PropertyName) || 
				(taskParameter.IsDefined && taskParameter.Value != this.TaskParameter)) {
				return new ProjectOutputElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					isOutputItem: isOutputItem.GetValueOrDefault(this.IsOutputItem),
					isOutputProperty: isOutputProperty.GetValueOrDefault(this.IsOutputProperty),
					itemType: itemType.GetValueOrDefault(this.ItemType),
					propertyName: propertyName.GetValueOrDefault(this.PropertyName),
					taskParameter: taskParameter.GetValueOrDefault(this.TaskParameter));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectOutputElement whose fields are initialized with default values.</summary>
		private static ProjectOutputElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectOutputElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.IsOutputItem,
				template.IsOutputProperty,
				template.ItemType,
				template.PropertyName,
				template.TaskParameter,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Boolean IsOutputItem { get; set; }
	
			internal System.Boolean IsOutputProperty { get; set; }
	
			internal System.String ItemType { get; set; }
	
			internal System.String PropertyName { get; set; }
	
			internal System.String TaskParameter { get; set; }
		}
		
		public new RootedProjectOutputElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectOutputElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectOutputElement = other as ProjectOutputElement;
			if (otherProjectOutputElement != null) {
				if (this.IsOutputItem != otherProjectOutputElement.IsOutputItem) {
					propertiesChanged |= ProjectElementChangedProperties.IsOutputItem;
				}
		
				if (this.IsOutputProperty != otherProjectOutputElement.IsOutputProperty) {
					propertiesChanged |= ProjectElementChangedProperties.IsOutputProperty;
				}
		
				if (this.ItemType != otherProjectOutputElement.ItemType) {
					propertiesChanged |= ProjectElementChangedProperties.ItemType;
				}
		
				if (this.PropertyName != otherProjectOutputElement.PropertyName) {
					propertiesChanged |= ProjectElementChangedProperties.PropertyName;
				}
		
				if (this.TaskParameter != otherProjectOutputElement.TaskParameter) {
					propertiesChanged |= ProjectElementChangedProperties.TaskParameter;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectOutputElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
				ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					isOutputItem: Optional.For(isOutputItem.GetValueOrDefault(DefaultInstance.IsOutputItem)),
					isOutputProperty: Optional.For(isOutputProperty.GetValueOrDefault(DefaultInstance.IsOutputProperty)),
					itemType: Optional.For(itemType.GetValueOrDefault(DefaultInstance.ItemType)),
					propertyName: Optional.For(propertyName.GetValueOrDefault(DefaultInstance.PropertyName)),
					taskParameter: Optional.For(taskParameter.GetValueOrDefault(DefaultInstance.TaskParameter)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectOutputElement : System.IEquatable<RootedProjectOutputElement>, IRecursiveType {
		private readonly ProjectOutputElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectOutputElement(ProjectOutputElement projectOutputElement, ProjectElementContainer root) {
			this.greenNode = projectOutputElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectOutputElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Boolean IsOutputItem {
			get {
				this.ThrowIfDefault();
				return this.greenNode.IsOutputItem;
			}
		}
	
		public System.Boolean IsOutputProperty {
			get {
				this.ThrowIfDefault();
				return this.greenNode.IsOutputProperty;
			}
		}
	
		public System.String ItemType {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ItemType;
			}
		}
	
		public System.String PropertyName {
			get {
				this.ThrowIfDefault();
				return this.greenNode.PropertyName;
			}
		}
	
		public System.String TaskParameter {
			get {
				this.ThrowIfDefault();
				return this.greenNode.TaskParameter;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectOutputElement ProjectOutputElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectOutputElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				isOutputItem: isOutputItem,
				isOutputProperty: isOutputProperty,
				itemType: itemType,
				propertyName: propertyName,
				taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectOutputElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectOutputElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectOutputElement) {
				var other = (RootedProjectOutputElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectOutputElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectOutputElement NewSpine(ProjectOutputElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectOutputElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectTargetElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectTargetElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String afterTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String beforeTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String dependsOnTargets;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String inputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String keepDuplicateOutputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String outputs;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String returns;
	
		/// <summary>Initializes a new instance of the ProjectTargetElement class.</summary>
		protected ProjectTargetElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String afterTargets,
			System.String beforeTargets,
			System.String dependsOnTargets,
			System.String inputs,
			System.String keepDuplicateOutputs,
			System.String name,
			System.String outputs,
			System.String returns,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.afterTargets = afterTargets;
			this.beforeTargets = beforeTargets;
			this.dependsOnTargets = dependsOnTargets;
			this.inputs = inputs;
			this.keepDuplicateOutputs = keepDuplicateOutputs;
			this.name = name;
			this.outputs = outputs;
			this.returns = returns;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectTargetElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				afterTargets: Optional.For(afterTargets.GetValueOrDefault(DefaultInstance.AfterTargets)),
				beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(DefaultInstance.BeforeTargets)),
				dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(DefaultInstance.DependsOnTargets)),
				inputs: Optional.For(inputs.GetValueOrDefault(DefaultInstance.Inputs)),
				keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputs)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				outputs: Optional.For(outputs.GetValueOrDefault(DefaultInstance.Outputs)),
				returns: Optional.For(returns.GetValueOrDefault(DefaultInstance.Returns)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String AfterTargets {
			get { return this.afterTargets; }
		}
	
		public System.String BeforeTargets {
			get { return this.beforeTargets; }
		}
	
		public System.String DependsOnTargets {
			get { return this.dependsOnTargets; }
		}
	
		public System.String Inputs {
			get { return this.inputs; }
		}
	
		public System.String KeepDuplicateOutputs {
			get { return this.keepDuplicateOutputs; }
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Outputs {
			get { return this.outputs; }
		}
	
		public System.String Returns {
			get { return this.returns; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTargetElement WithChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTargetElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTargetElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTargetElement AddChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectTargetElement AddChild(ProjectElement value) {
			return (ProjectTargetElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTargetElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectTargetElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectTargetElement RemoveChild(ProjectElement value) {
			return (ProjectTargetElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectTargetElement RemoveChildren() {
			return (ProjectTargetElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectTargetElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectTargetElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				afterTargets: afterTargets,
				beforeTargets: beforeTargets,
				dependsOnTargets: dependsOnTargets,
				inputs: inputs,
				keepDuplicateOutputs: keepDuplicateOutputs,
				name: name,
				outputs: outputs,
				returns: returns);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectTargetElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				afterTargets: Optional.For(afterTargets.GetValueOrDefault(this.AfterTargets)),
				beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(this.BeforeTargets)),
				dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(this.DependsOnTargets)),
				inputs: Optional.For(inputs.GetValueOrDefault(this.Inputs)),
				keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(this.KeepDuplicateOutputs)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				outputs: Optional.For(outputs.GetValueOrDefault(this.Outputs)),
				returns: Optional.For(returns.GetValueOrDefault(this.Returns)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectTargetElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(afterTargets.IsDefined && afterTargets.Value != this.AfterTargets) || 
				(beforeTargets.IsDefined && beforeTargets.Value != this.BeforeTargets) || 
				(dependsOnTargets.IsDefined && dependsOnTargets.Value != this.DependsOnTargets) || 
				(inputs.IsDefined && inputs.Value != this.Inputs) || 
				(keepDuplicateOutputs.IsDefined && keepDuplicateOutputs.Value != this.KeepDuplicateOutputs) || 
				(name.IsDefined && name.Value != this.Name) || 
				(outputs.IsDefined && outputs.Value != this.Outputs) || 
				(returns.IsDefined && returns.Value != this.Returns)) {
				return new ProjectTargetElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					afterTargets: afterTargets.GetValueOrDefault(this.AfterTargets),
					beforeTargets: beforeTargets.GetValueOrDefault(this.BeforeTargets),
					dependsOnTargets: dependsOnTargets.GetValueOrDefault(this.DependsOnTargets),
					inputs: inputs.GetValueOrDefault(this.Inputs),
					keepDuplicateOutputs: keepDuplicateOutputs.GetValueOrDefault(this.KeepDuplicateOutputs),
					name: name.GetValueOrDefault(this.Name),
					outputs: outputs.GetValueOrDefault(this.Outputs),
					returns: returns.GetValueOrDefault(this.Returns));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectTargetElement whose fields are initialized with default values.</summary>
		private static ProjectTargetElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectTargetElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.AfterTargets,
				template.BeforeTargets,
				template.DependsOnTargets,
				template.Inputs,
				template.KeepDuplicateOutputs,
				template.Name,
				template.Outputs,
				template.Returns,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String AfterTargets { get; set; }
	
			internal System.String BeforeTargets { get; set; }
	
			internal System.String DependsOnTargets { get; set; }
	
			internal System.String Inputs { get; set; }
	
			internal System.String KeepDuplicateOutputs { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Outputs { get; set; }
	
			internal System.String Returns { get; set; }
		}
		
		public RootedProjectTargetElement AsRoot {
			get { return new RootedProjectTargetElement(this, this); }
		}
		
		public new RootedProjectTargetElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectTargetElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectTargetElement = other as ProjectTargetElement;
			if (otherProjectTargetElement != null) {
				if (this.AfterTargets != otherProjectTargetElement.AfterTargets) {
					propertiesChanged |= ProjectElementChangedProperties.AfterTargets;
				}
		
				if (this.BeforeTargets != otherProjectTargetElement.BeforeTargets) {
					propertiesChanged |= ProjectElementChangedProperties.BeforeTargets;
				}
		
				if (this.DependsOnTargets != otherProjectTargetElement.DependsOnTargets) {
					propertiesChanged |= ProjectElementChangedProperties.DependsOnTargets;
				}
		
				if (this.Inputs != otherProjectTargetElement.Inputs) {
					propertiesChanged |= ProjectElementChangedProperties.Inputs;
				}
		
				if (this.KeepDuplicateOutputs != otherProjectTargetElement.KeepDuplicateOutputs) {
					propertiesChanged |= ProjectElementChangedProperties.KeepDuplicateOutputs;
				}
		
				if (this.Name != otherProjectTargetElement.Name) {
					propertiesChanged |= ProjectElementChangedProperties.Name;
				}
		
				if (this.Outputs != otherProjectTargetElement.Outputs) {
					propertiesChanged |= ProjectElementChangedProperties.Outputs;
				}
		
				if (this.Returns != otherProjectTargetElement.Returns) {
					propertiesChanged |= ProjectElementChangedProperties.Returns;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectTargetElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					afterTargets: Optional.For(afterTargets.GetValueOrDefault(DefaultInstance.AfterTargets)),
					beforeTargets: Optional.For(beforeTargets.GetValueOrDefault(DefaultInstance.BeforeTargets)),
					dependsOnTargets: Optional.For(dependsOnTargets.GetValueOrDefault(DefaultInstance.DependsOnTargets)),
					inputs: Optional.For(inputs.GetValueOrDefault(DefaultInstance.Inputs)),
					keepDuplicateOutputs: Optional.For(keepDuplicateOutputs.GetValueOrDefault(DefaultInstance.KeepDuplicateOutputs)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					outputs: Optional.For(outputs.GetValueOrDefault(DefaultInstance.Outputs)),
					returns: Optional.For(returns.GetValueOrDefault(DefaultInstance.Returns)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectTargetElement : System.IEquatable<RootedProjectTargetElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectTargetElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectTargetElement(ProjectTargetElement projectTargetElement, ProjectElementContainer root) {
			this.greenNode = projectTargetElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectTargetElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTargetElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTargetElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTargetElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectTargetElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTargetElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTargetElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTargetElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectTargetElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectTargetElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String AfterTargets {
			get {
				this.ThrowIfDefault();
				return this.greenNode.AfterTargets;
			}
		}
	
		public System.String BeforeTargets {
			get {
				this.ThrowIfDefault();
				return this.greenNode.BeforeTargets;
			}
		}
	
		public System.String DependsOnTargets {
			get {
				this.ThrowIfDefault();
				return this.greenNode.DependsOnTargets;
			}
		}
	
		public System.String Inputs {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Inputs;
			}
		}
	
		public System.String KeepDuplicateOutputs {
			get {
				this.ThrowIfDefault();
				return this.greenNode.KeepDuplicateOutputs;
			}
		}
	
		public System.String Name {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Name;
			}
		}
	
		public System.String Outputs {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Outputs;
			}
		}
	
		public System.String Returns {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Returns;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectTargetElement ProjectTargetElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectTargetElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				afterTargets: afterTargets,
				beforeTargets: beforeTargets,
				dependsOnTargets: dependsOnTargets,
				inputs: inputs,
				keepDuplicateOutputs: keepDuplicateOutputs,
				name: name,
				outputs: outputs,
				returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectTargetElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectTargetElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectTargetElement) {
				var other = (RootedProjectTargetElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectTargetElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectTargetElement NewSpine(ProjectTargetElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectTargetElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectTaskElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectTaskElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String continueOnError;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String mSBuildArchitecture;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String mSBuildRuntime;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		/// <summary>Initializes a new instance of the ProjectTaskElement class.</summary>
		protected ProjectTaskElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String continueOnError,
			System.String mSBuildArchitecture,
			System.String mSBuildRuntime,
			System.String name,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.continueOnError = continueOnError;
			this.mSBuildArchitecture = mSBuildArchitecture;
			this.mSBuildRuntime = mSBuildRuntime;
			this.name = name;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectTaskElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				continueOnError: Optional.For(continueOnError.GetValueOrDefault(DefaultInstance.ContinueOnError)),
				mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(DefaultInstance.MSBuildArchitecture)),
				mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(DefaultInstance.MSBuildRuntime)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String ContinueOnError {
			get { return this.continueOnError; }
		}
	
		public System.String MSBuildArchitecture {
			get { return this.mSBuildArchitecture; }
		}
	
		public System.String MSBuildRuntime {
			get { return this.mSBuildRuntime; }
		}
	
		public System.String Name {
			get { return this.name; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTaskElement WithChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectTaskElement AddChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectTaskElement AddChild(ProjectElement value) {
			return (ProjectTaskElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectTaskElement RemoveChild(ProjectElement value) {
			return (ProjectTaskElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectTaskElement RemoveChildren() {
			return (ProjectTaskElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectTaskElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				continueOnError: continueOnError,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildRuntime: mSBuildRuntime,
				name: name);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectTaskElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				continueOnError: Optional.For(continueOnError.GetValueOrDefault(this.ContinueOnError)),
				mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(this.MSBuildArchitecture)),
				mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(this.MSBuildRuntime)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectTaskElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(continueOnError.IsDefined && continueOnError.Value != this.ContinueOnError) || 
				(mSBuildArchitecture.IsDefined && mSBuildArchitecture.Value != this.MSBuildArchitecture) || 
				(mSBuildRuntime.IsDefined && mSBuildRuntime.Value != this.MSBuildRuntime) || 
				(name.IsDefined && name.Value != this.Name)) {
				return new ProjectTaskElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					continueOnError: continueOnError.GetValueOrDefault(this.ContinueOnError),
					mSBuildArchitecture: mSBuildArchitecture.GetValueOrDefault(this.MSBuildArchitecture),
					mSBuildRuntime: mSBuildRuntime.GetValueOrDefault(this.MSBuildRuntime),
					name: name.GetValueOrDefault(this.Name));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectTaskElement whose fields are initialized with default values.</summary>
		private static ProjectTaskElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectTaskElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.ContinueOnError,
				template.MSBuildArchitecture,
				template.MSBuildRuntime,
				template.Name,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String ContinueOnError { get; set; }
	
			internal System.String MSBuildArchitecture { get; set; }
	
			internal System.String MSBuildRuntime { get; set; }
	
			internal System.String Name { get; set; }
		}
		
		public RootedProjectTaskElement AsRoot {
			get { return new RootedProjectTaskElement(this, this); }
		}
		
		public new RootedProjectTaskElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectTaskElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectTaskElement = other as ProjectTaskElement;
			if (otherProjectTaskElement != null) {
				if (this.ContinueOnError != otherProjectTaskElement.ContinueOnError) {
					propertiesChanged |= ProjectElementChangedProperties.ContinueOnError;
				}
		
				if (this.MSBuildArchitecture != otherProjectTaskElement.MSBuildArchitecture) {
					propertiesChanged |= ProjectElementChangedProperties.MSBuildArchitecture;
				}
		
				if (this.MSBuildRuntime != otherProjectTaskElement.MSBuildRuntime) {
					propertiesChanged |= ProjectElementChangedProperties.MSBuildRuntime;
				}
		
				if (this.Name != otherProjectTaskElement.Name) {
					propertiesChanged |= ProjectElementChangedProperties.Name;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectTaskElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					continueOnError: Optional.For(continueOnError.GetValueOrDefault(DefaultInstance.ContinueOnError)),
					mSBuildArchitecture: Optional.For(mSBuildArchitecture.GetValueOrDefault(DefaultInstance.MSBuildArchitecture)),
					mSBuildRuntime: Optional.For(mSBuildRuntime.GetValueOrDefault(DefaultInstance.MSBuildRuntime)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectTaskElement : System.IEquatable<RootedProjectTaskElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectTaskElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectTaskElement(ProjectTaskElement projectTaskElement, ProjectElementContainer root) {
			this.greenNode = projectTaskElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectTaskElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTaskElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTaskElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTaskElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectTaskElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTaskElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectTaskElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectTaskElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectTaskElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String ContinueOnError {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ContinueOnError;
			}
		}
	
		public System.String MSBuildArchitecture {
			get {
				this.ThrowIfDefault();
				return this.greenNode.MSBuildArchitecture;
			}
		}
	
		public System.String MSBuildRuntime {
			get {
				this.ThrowIfDefault();
				return this.greenNode.MSBuildRuntime;
			}
		}
	
		public System.String Name {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Name;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectTaskElement ProjectTaskElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				continueOnError: continueOnError,
				mSBuildArchitecture: mSBuildArchitecture,
				mSBuildRuntime: mSBuildRuntime,
				name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectTaskElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectTaskElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectTaskElement) {
				var other = (RootedProjectTaskElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectTaskElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectTaskElement NewSpine(ProjectTaskElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectTaskElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectUsingTaskBodyElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskBodyElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String evaluate;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskBody;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskBodyElement class.</summary>
		protected ProjectUsingTaskBodyElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String evaluate,
			System.String taskBody,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.evaluate = evaluate;
			this.taskBody = taskBody;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectUsingTaskBodyElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				evaluate: Optional.For(evaluate.GetValueOrDefault(DefaultInstance.Evaluate)),
				taskBody: Optional.For(taskBody.GetValueOrDefault(DefaultInstance.TaskBody)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Evaluate {
			get { return this.evaluate; }
		}
	
		public System.String TaskBody {
			get { return this.taskBody; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskBodyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectUsingTaskBodyElement)this.WithCore(
				condition: condition,
				label: label,
				evaluate: evaluate,
				taskBody: taskBody);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskBodyElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				evaluate: Optional.For(evaluate.GetValueOrDefault(this.Evaluate)),
				taskBody: Optional.For(taskBody.GetValueOrDefault(this.TaskBody)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskBodyElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(evaluate.IsDefined && evaluate.Value != this.Evaluate) || 
				(taskBody.IsDefined && taskBody.Value != this.TaskBody)) {
				return new ProjectUsingTaskBodyElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					evaluate: evaluate.GetValueOrDefault(this.Evaluate),
					taskBody: taskBody.GetValueOrDefault(this.TaskBody));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskBodyElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskBodyElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskBodyElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Evaluate,
				template.TaskBody,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Evaluate { get; set; }
	
			internal System.String TaskBody { get; set; }
		}
		
		public new RootedProjectUsingTaskBodyElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectUsingTaskBodyElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectUsingTaskBodyElement = other as ProjectUsingTaskBodyElement;
			if (otherProjectUsingTaskBodyElement != null) {
				if (this.Evaluate != otherProjectUsingTaskBodyElement.Evaluate) {
					propertiesChanged |= ProjectElementChangedProperties.Evaluate;
				}
		
				if (this.TaskBody != otherProjectUsingTaskBodyElement.TaskBody) {
					propertiesChanged |= ProjectElementChangedProperties.TaskBody;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectUsingTaskBodyElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					evaluate: Optional.For(evaluate.GetValueOrDefault(DefaultInstance.Evaluate)),
					taskBody: Optional.For(taskBody.GetValueOrDefault(DefaultInstance.TaskBody)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectUsingTaskBodyElement : System.IEquatable<RootedProjectUsingTaskBodyElement>, IRecursiveType {
		private readonly ProjectUsingTaskBodyElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectUsingTaskBodyElement(ProjectUsingTaskBodyElement projectUsingTaskBodyElement, ProjectElementContainer root) {
			this.greenNode = projectUsingTaskBodyElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectUsingTaskBodyElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Evaluate {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Evaluate;
			}
		}
	
		public System.String TaskBody {
			get {
				this.ThrowIfDefault();
				return this.greenNode.TaskBody;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectUsingTaskBodyElement ProjectUsingTaskBodyElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectUsingTaskBodyElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				evaluate: evaluate,
				taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectUsingTaskBodyElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectUsingTaskBodyElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectUsingTaskBodyElement) {
				var other = (RootedProjectUsingTaskBodyElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectUsingTaskBodyElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectUsingTaskBodyElement NewSpine(ProjectUsingTaskBodyElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectUsingTaskBodyElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class ProjectUsingTaskElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String architecture;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String assemblyFile;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String assemblyName;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String runtime;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskFactory;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String taskName;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskElement class.</summary>
		protected ProjectUsingTaskElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			System.String architecture,
			System.String assemblyFile,
			System.String assemblyName,
			System.String runtime,
			System.String taskFactory,
			System.String taskName,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			this.architecture = architecture;
			this.assemblyFile = assemblyFile;
			this.assemblyName = assemblyName;
			this.runtime = runtime;
			this.taskFactory = taskFactory;
			this.taskName = taskName;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectUsingTaskElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				architecture: Optional.For(architecture.GetValueOrDefault(DefaultInstance.Architecture)),
				assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(DefaultInstance.AssemblyFile)),
				assemblyName: Optional.For(assemblyName.GetValueOrDefault(DefaultInstance.AssemblyName)),
				runtime: Optional.For(runtime.GetValueOrDefault(DefaultInstance.Runtime)),
				taskFactory: Optional.For(taskFactory.GetValueOrDefault(DefaultInstance.TaskFactory)),
				taskName: Optional.For(taskName.GetValueOrDefault(DefaultInstance.TaskName)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Architecture {
			get { return this.architecture; }
		}
	
		public System.String AssemblyFile {
			get { return this.assemblyFile; }
		}
	
		public System.String AssemblyName {
			get { return this.assemblyName; }
		}
	
		public System.String Runtime {
			get { return this.runtime; }
		}
	
		public System.String TaskFactory {
			get { return this.taskFactory; }
		}
	
		public System.String TaskName {
			get { return this.taskName; }
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectUsingTaskElement WithChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new ProjectUsingTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new ProjectUsingTaskElement AddChild(ProjectElement value) {
			return (ProjectUsingTaskElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (ProjectUsingTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren(params ProjectElement[] values) {
			return (ProjectUsingTaskElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChild(ProjectElement value) {
			return (ProjectUsingTaskElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new ProjectUsingTaskElement RemoveChildren() {
			return (ProjectUsingTaskElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectUsingTaskElement)this.WithCore(
				condition: condition,
				label: label,
				children: children,
				architecture: architecture,
				assemblyFile: assemblyFile,
				assemblyName: assemblyName,
				runtime: runtime,
				taskFactory: taskFactory,
				taskName: taskName);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				children: Optional.For(children.GetValueOrDefault(this.Children)),
				architecture: Optional.For(architecture.GetValueOrDefault(this.Architecture)),
				assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(this.AssemblyFile)),
				assemblyName: Optional.For(assemblyName.GetValueOrDefault(this.AssemblyName)),
				runtime: Optional.For(runtime.GetValueOrDefault(this.Runtime)),
				taskFactory: Optional.For(taskFactory.GetValueOrDefault(this.TaskFactory)),
				taskName: Optional.For(taskName.GetValueOrDefault(this.TaskName)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children) || 
				(architecture.IsDefined && architecture.Value != this.Architecture) || 
				(assemblyFile.IsDefined && assemblyFile.Value != this.AssemblyFile) || 
				(assemblyName.IsDefined && assemblyName.Value != this.AssemblyName) || 
				(runtime.IsDefined && runtime.Value != this.Runtime) || 
				(taskFactory.IsDefined && taskFactory.Value != this.TaskFactory) || 
				(taskName.IsDefined && taskName.Value != this.TaskName)) {
				return new ProjectUsingTaskElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children),
					architecture: architecture.GetValueOrDefault(this.Architecture),
					assemblyFile: assemblyFile.GetValueOrDefault(this.AssemblyFile),
					assemblyName: assemblyName.GetValueOrDefault(this.AssemblyName),
					runtime: runtime.GetValueOrDefault(this.Runtime),
					taskFactory: taskFactory.GetValueOrDefault(this.TaskFactory),
					taskName: taskName.GetValueOrDefault(this.TaskName));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				template.Architecture,
				template.AssemblyFile,
				template.AssemblyName,
				template.Runtime,
				template.TaskFactory,
				template.TaskName,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
	
			internal System.String Architecture { get; set; }
	
			internal System.String AssemblyFile { get; set; }
	
			internal System.String AssemblyName { get; set; }
	
			internal System.String Runtime { get; set; }
	
			internal System.String TaskFactory { get; set; }
	
			internal System.String TaskName { get; set; }
		}
		
		public RootedProjectUsingTaskElement AsRoot {
			get { return new RootedProjectUsingTaskElement(this, this); }
		}
		
		public new RootedProjectUsingTaskElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectUsingTaskElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectUsingTaskElement = other as ProjectUsingTaskElement;
			if (otherProjectUsingTaskElement != null) {
				if (this.Architecture != otherProjectUsingTaskElement.Architecture) {
					propertiesChanged |= ProjectElementChangedProperties.Architecture;
				}
		
				if (this.AssemblyFile != otherProjectUsingTaskElement.AssemblyFile) {
					propertiesChanged |= ProjectElementChangedProperties.AssemblyFile;
				}
		
				if (this.AssemblyName != otherProjectUsingTaskElement.AssemblyName) {
					propertiesChanged |= ProjectElementChangedProperties.AssemblyName;
				}
		
				if (this.Runtime != otherProjectUsingTaskElement.Runtime) {
					propertiesChanged |= ProjectElementChangedProperties.Runtime;
				}
		
				if (this.TaskFactory != otherProjectUsingTaskElement.TaskFactory) {
					propertiesChanged |= ProjectElementChangedProperties.TaskFactory;
				}
		
				if (this.TaskName != otherProjectUsingTaskElement.TaskName) {
					propertiesChanged |= ProjectElementChangedProperties.TaskName;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectUsingTaskElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
					architecture: Optional.For(architecture.GetValueOrDefault(DefaultInstance.Architecture)),
					assemblyFile: Optional.For(assemblyFile.GetValueOrDefault(DefaultInstance.AssemblyFile)),
					assemblyName: Optional.For(assemblyName.GetValueOrDefault(DefaultInstance.AssemblyName)),
					runtime: Optional.For(runtime.GetValueOrDefault(DefaultInstance.Runtime)),
					taskFactory: Optional.For(taskFactory.GetValueOrDefault(DefaultInstance.TaskFactory)),
					taskName: Optional.For(taskName.GetValueOrDefault(DefaultInstance.TaskName)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectUsingTaskElement : System.IEquatable<RootedProjectUsingTaskElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly ProjectUsingTaskElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedProjectUsingTaskElement(ProjectUsingTaskElement projectUsingTaskElement, ProjectElementContainer root) {
			this.greenNode = projectUsingTaskElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectUsingTaskElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectUsingTaskElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectUsingTaskElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectUsingTaskElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectUsingTaskElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectUsingTaskElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedProjectUsingTaskElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedProjectUsingTaskElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedProjectUsingTaskElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedProjectUsingTaskElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		public System.String Architecture {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Architecture;
			}
		}
	
		public System.String AssemblyFile {
			get {
				this.ThrowIfDefault();
				return this.greenNode.AssemblyFile;
			}
		}
	
		public System.String AssemblyName {
			get {
				this.ThrowIfDefault();
				return this.greenNode.AssemblyName;
			}
		}
	
		public System.String Runtime {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Runtime;
			}
		}
	
		public System.String TaskFactory {
			get {
				this.ThrowIfDefault();
				return this.greenNode.TaskFactory;
			}
		}
	
		public System.String TaskName {
			get {
				this.ThrowIfDefault();
				return this.greenNode.TaskName;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectUsingTaskElement ProjectUsingTaskElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectUsingTaskElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				architecture: architecture,
				assemblyFile: assemblyFile,
				assemblyName: assemblyName,
				runtime: runtime,
				taskFactory: taskFactory,
				taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectUsingTaskElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectUsingTaskElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement() {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectUsingTaskElement) {
				var other = (RootedProjectUsingTaskElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectUsingTaskElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectUsingTaskElement NewSpine(ProjectUsingTaskElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectUsingTaskElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
	
	public partial class ProjectUsingTaskParameterElement : ProjectElement {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly ProjectUsingTaskParameterElement DefaultInstance = GetDefaultTemplate();
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String name;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String output;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String parameterType;
	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private readonly System.String required;
	
		/// <summary>Initializes a new instance of the ProjectUsingTaskParameterElement class.</summary>
		protected ProjectUsingTaskParameterElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.String name,
			System.String output,
			System.String parameterType,
			System.String required,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label)
		{
			this.name = name;
			this.output = output;
			this.parameterType = parameterType;
			this.required = required;
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static ProjectUsingTaskParameterElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
				output: Optional.For(output.GetValueOrDefault(DefaultInstance.Output)),
				parameterType: Optional.For(parameterType.GetValueOrDefault(DefaultInstance.ParameterType)),
				required: Optional.For(required.GetValueOrDefault(DefaultInstance.Required)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	
		public System.String Name {
			get { return this.name; }
		}
	
		public System.String Output {
			get { return this.output; }
		}
	
		public System.String ParameterType {
			get { return this.parameterType; }
		}
	
		public System.String Required {
			get { return this.required; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public ProjectUsingTaskParameterElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			return (ProjectUsingTaskParameterElement)this.WithCore(
				condition: condition,
				label: label,
				name: name,
				output: output,
				parameterType: parameterType,
				required: required);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected virtual ProjectUsingTaskParameterElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var identity = default(ImmutableObjectGraph.Optional<System.Int32>);
			return this.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(this.Condition)),
				label: Optional.For(label.GetValueOrDefault(this.Label)),
				name: Optional.For(name.GetValueOrDefault(this.Name)),
				output: Optional.For(output.GetValueOrDefault(this.Output)),
				parameterType: Optional.For(parameterType.GetValueOrDefault(this.ParameterType)),
				required: Optional.For(required.GetValueOrDefault(this.Required)),
				identity: Optional.For(identity.GetValueOrDefault(this.Identity)));
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private ProjectUsingTaskParameterElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(name.IsDefined && name.Value != this.Name) || 
				(output.IsDefined && output.Value != this.Output) || 
				(parameterType.IsDefined && parameterType.Value != this.ParameterType) || 
				(required.IsDefined && required.Value != this.Required)) {
				return new ProjectUsingTaskParameterElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					name: name.GetValueOrDefault(this.Name),
					output: output.GetValueOrDefault(this.Output),
					parameterType: parameterType.GetValueOrDefault(this.ParameterType),
					required: required.GetValueOrDefault(this.Required));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated ProjectUsingTaskParameterElement whose fields are initialized with default values.</summary>
		private static ProjectUsingTaskParameterElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new ProjectUsingTaskParameterElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Name,
				template.Output,
				template.ParameterType,
				template.Required,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.String Name { get; set; }
	
			internal System.String Output { get; set; }
	
			internal System.String ParameterType { get; set; }
	
			internal System.String Required { get; set; }
		}
		
		public new RootedProjectUsingTaskParameterElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedProjectUsingTaskParameterElement(this, root);
		}
		
		protected override ProjectElementChangedProperties DiffProperties(ProjectElement other) {
			var propertiesChanged = base.DiffProperties(other);
		
			var otherProjectUsingTaskParameterElement = other as ProjectUsingTaskParameterElement;
			if (otherProjectUsingTaskParameterElement != null) {
				if (this.Name != otherProjectUsingTaskParameterElement.Name) {
					propertiesChanged |= ProjectElementChangedProperties.Name;
				}
		
				if (this.Output != otherProjectUsingTaskParameterElement.Output) {
					propertiesChanged |= ProjectElementChangedProperties.Output;
				}
		
				if (this.ParameterType != otherProjectUsingTaskParameterElement.ParameterType) {
					propertiesChanged |= ProjectElementChangedProperties.ParameterType;
				}
		
				if (this.Required != otherProjectUsingTaskParameterElement.Required) {
					propertiesChanged |= ProjectElementChangedProperties.Required;
				}
			}
		
			return propertiesChanged;
		}
		
		internal static ProjectUsingTaskParameterElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance.WithFactory(
					condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
					label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
					name: Optional.For(name.GetValueOrDefault(DefaultInstance.Name)),
					output: Optional.For(output.GetValueOrDefault(DefaultInstance.Output)),
					parameterType: Optional.For(parameterType.GetValueOrDefault(DefaultInstance.ParameterType)),
					required: Optional.For(required.GetValueOrDefault(DefaultInstance.Required)),
					identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
	}
	
	public partial struct RootedProjectUsingTaskParameterElement : System.IEquatable<RootedProjectUsingTaskParameterElement>, IRecursiveType {
		private readonly ProjectUsingTaskParameterElement greenNode;
	
		private readonly ProjectElementContainer root;
	
		internal RootedProjectUsingTaskParameterElement(ProjectUsingTaskParameterElement projectUsingTaskParameterElement, ProjectElementContainer root) {
			this.greenNode = projectUsingTaskParameterElement;
			this.root = root;
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.ProjectUsingTaskParameterElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.String Name {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Name;
			}
		}
	
		public System.String Output {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Output;
			}
		}
	
		public System.String ParameterType {
			get {
				this.ThrowIfDefault();
				return this.greenNode.ParameterType;
			}
		}
	
		public System.String Required {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Required;
			}
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public ProjectUsingTaskParameterElement ProjectUsingTaskParameterElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedProjectUsingTaskParameterElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				name: name,
				output: output,
				parameterType: parameterType,
				required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedProjectUsingTaskParameterElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.ProjectUsingTaskParameterElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectChooseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectWhenElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>),
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedUsingTaskParameterGroupElement ToUsingTaskParameterGroupElement(
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			var newGreenNode = this.greenNode.ToUsingTaskParameterGroupElement(
					children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedProjectUsingTaskParameterElement) {
				var other = (RootedProjectUsingTaskParameterElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedProjectUsingTaskParameterElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedProjectUsingTaskParameterElement NewSpine(ProjectUsingTaskParameterElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing ProjectUsingTaskParameterElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	}
	
	public partial class UsingTaskParameterGroupElement : ProjectElementContainer {
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private static readonly UsingTaskParameterGroupElement DefaultInstance = GetDefaultTemplate();
	
		/// <summary>Initializes a new instance of the UsingTaskParameterGroupElement class.</summary>
		protected UsingTaskParameterGroupElement(
			System.Int32 identity,
			System.String condition,
			System.String label,
			System.Collections.Immutable.ImmutableList<ProjectElement> children,
			ImmutableObjectGraph.Optional<bool> skipValidation = default(ImmutableObjectGraph.Optional<bool>))
			: base(
				identity: identity,
				condition: condition,
				label: label,
				children: children)
		{
			if (!skipValidation.Value) {
				this.Validate();
			}
		}
	
		public static UsingTaskParameterGroupElement Create(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			var identity = Optional.For(NewIdentity());
			return DefaultInstance.WithFactory(
				condition: Optional.For(condition.GetValueOrDefault(DefaultInstance.Condition)),
				label: Optional.For(label.GetValueOrDefault(DefaultInstance.Label)),
				children: Optional.For(children.GetValueOrDefault(DefaultInstance.Children)),
				identity: Optional.For(identity.GetValueOrDefault(DefaultInstance.Identity)));
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new UsingTaskParameterGroupElement WithChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public new UsingTaskParameterGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.WithChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.AddChildren(values);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public new UsingTaskParameterGroupElement AddChild(ProjectElement value) {
			return (UsingTaskParameterGroupElement)base.AddChild(value);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			return (UsingTaskParameterGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren(params ProjectElement[] values) {
			return (UsingTaskParameterGroupElement)base.RemoveChildren(values);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChild(ProjectElement value) {
			return (UsingTaskParameterGroupElement)base.RemoveChild(value);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public new UsingTaskParameterGroupElement RemoveChildren() {
			return (UsingTaskParameterGroupElement)base.RemoveChildren();
		}
		
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElement WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>)) {
			return this.WithFactory(
				condition: condition,
				label: label);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		protected override ProjectElementContainer WithCore(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return this.WithFactory(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public UsingTaskParameterGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>)) {
			return (UsingTaskParameterGroupElement)this.WithCore(
				condition: condition,
				label: label,
				children: children);
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		private UsingTaskParameterGroupElement WithFactory(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
			ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (
				(identity.IsDefined && identity.Value != this.Identity) || 
				(condition.IsDefined && condition.Value != this.Condition) || 
				(label.IsDefined && label.Value != this.Label) || 
				(children.IsDefined && children.Value != this.Children)) {
				return new UsingTaskParameterGroupElement(
					identity: identity.GetValueOrDefault(this.Identity),
					condition: condition.GetValueOrDefault(this.Condition),
					label: label.GetValueOrDefault(this.Label),
					children: children.GetValueOrDefault(this.Children));
			} else {
				return this;
			}
		}
	
		/// <summary>Normalizes and/or validates all properties on this object.</summary>
		/// <exception type="ArgumentException">Thrown if any properties have disallowed values.</exception>
		partial void Validate();
	
		/// <summary>Provides defaults for fields.</summary>
		/// <param name="template">The struct to set default values on.</param>
		static partial void CreateDefaultTemplate(ref Template template);
	
		/// <summary>Returns a newly instantiated UsingTaskParameterGroupElement whose fields are initialized with default values.</summary>
		private static UsingTaskParameterGroupElement GetDefaultTemplate() {
			var template = new Template();
			CreateDefaultTemplate(ref template);
			return new UsingTaskParameterGroupElement(
				default(System.Int32),
				template.Condition,
				template.Label,
				template.Children,
				skipValidation: true);
		}
	
		/// <summary>A struct with all the same fields as the containing type for use in describing default values for new instances of the class.</summary>
		private struct Template {
			internal System.String Condition { get; set; }
	
			internal System.String Label { get; set; }
	
			internal System.Collections.Immutable.ImmutableList<ProjectElement> Children { get; set; }
		}
		
		public RootedUsingTaskParameterGroupElement AsRoot {
			get { return new RootedUsingTaskParameterGroupElement(this, this); }
		}
		
		public new RootedUsingTaskParameterGroupElement WithRoot(ProjectElementContainer root) {
			var spine = root.GetSpine(this);
			if (spine.IsEmpty) {
				throw new System.ArgumentException("Root does not belong to the same tree.");
			}
		
			return new RootedUsingTaskParameterGroupElement(this, root);
		}
		
		internal static UsingTaskParameterGroupElement CreateWithIdentity(
				ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
				ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>),
				ImmutableObjectGraph.Optional<System.Int32> identity = default(ImmutableObjectGraph.Optional<System.Int32>)) {
			if (!identity.IsDefined) {
				identity = NewIdentity();
			}
		
			return DefaultInstance;
		}
	}
	
	public partial struct RootedUsingTaskParameterGroupElement : System.IEquatable<RootedUsingTaskParameterGroupElement>, IRecursiveParent {
		private static readonly System.Func<RootedProjectElement, ProjectElement> toUnrooted = r => r.ProjectElement;
		private static readonly System.Func<ProjectElement, ProjectElementContainer, RootedProjectElement> toRooted = (u, r) => u.WithRoot(r);
	
		private readonly UsingTaskParameterGroupElement greenNode;
	
		private readonly ProjectElementContainer root;
		private Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>> children;
	
		internal RootedUsingTaskParameterGroupElement(UsingTaskParameterGroupElement usingTaskParameterGroupElement, ProjectElementContainer root) {
			this.greenNode = usingTaskParameterGroupElement;
			this.root = root;
			this.children = default(Optional<ImmutableObjectGraph.Adapters.ImmutableListRootAdapter<ProjectElement, RootedProjectElement, ProjectElementContainer>>);
		}
	
		/// <summary>Gets the parent of this object in the hierarchy.</summary>
		public RootedProjectElementContainer Parent {
			get {
				this.ThrowIfDefault();
				var greenParent = this.root.GetParent(this.UsingTaskParameterGroupElement);
				return greenParent != null ? greenParent.WithRoot(this.root) : default(RootedProjectElementContainer);
			}
		}
	
		public RootedProjectElementContainer Root {
			get { return this.root != null ? this.root.AsRoot : default(RootedProjectElementContainer); }
		}
	
		public System.Int32 Identity {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Identity;
			}
		}
	
		public RootedProjectElementContainer AsProjectElementContainer {
			get { return this.greenNode != null ? ((ProjectElementContainer)this.greenNode).WithRoot(this.root) : default(RootedProjectElementContainer); }
		}
	
		public RootedProjectElement AsProjectElement {
			get { return this.greenNode != null ? ((ProjectElement)this.greenNode).WithRoot(this.root) : default(RootedProjectElement); }
		}
	
		public System.String Condition {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Condition;
			}
		}
	
		public System.String Label {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Label;
			}
		}
	
		public System.Collections.Immutable.IImmutableList<RootedProjectElement> Children {
			get {
				if (!this.children.IsDefined) {
					this.ThrowIfDefault();
					this.children = Optional.For(Adapter.Create(this.greenNode.Children, toRooted, toUnrooted, this.root));
				}
	
				return this.children.Value;
			}
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedUsingTaskParameterGroupElement WithChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedUsingTaskParameterGroupElement WithChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement AddChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement AddChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedUsingTaskParameterGroupElement, RootedProjectElement> AddChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value.ProjectElement);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value.ProjectElement, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedUsingTaskParameterGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<RootedProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChildren(params RootedProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values.Select(r => r.ProjectElement));
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChild(RootedProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value.ProjectElement);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedUsingTaskParameterGroupElement WithChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Replaces the elements of the Children collection with the specified collection.</summary>
		public RootedUsingTaskParameterGroupElement WithChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.WithChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement AddChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement AddChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Adds the specified element from the Children collection.</summary>
		public ParentedRecursiveType<RootedUsingTaskParameterGroupElement, RootedProjectElement> AddChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.AddChild(value);
			var newParent = this.NewSpine(mutatedLeaf);
			var newChild = new RootedProjectElement(value, newParent.Root.ProjectElementContainer);
			return new ParentedRecursiveType<RootedUsingTaskParameterGroupElement, RootedProjectElement>(newChild, newParent);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChildren(System.Collections.Generic.IEnumerable<ProjectElement> values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChildren(params ProjectElement[] values) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren(values);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Removes the specified element from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChild(ProjectElement value) {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChild(value);
			return this.NewSpine(mutatedLeaf);
		}
		
		/// <summary>Clears all elements from the Children collection.</summary>
		public RootedUsingTaskParameterGroupElement RemoveChildren() {
			this.ThrowIfDefault();
			var mutatedLeaf = this.greenNode.RemoveChildren();
			return this.NewSpine(mutatedLeaf);
		}
	
		/// <summary>Gets the unrooted representation of this object in the hierarchy.</summary>
		public UsingTaskParameterGroupElement UsingTaskParameterGroupElement {
			get { return this.greenNode; }
		}
	
		/// <summary>Returns a new instance of this object with any number of properties changed.</summary>
		public RootedUsingTaskParameterGroupElement With(
			ImmutableObjectGraph.Optional<System.String> condition = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> label = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>> children = default(ImmutableObjectGraph.Optional<System.Collections.Immutable.IImmutableList<RootedProjectElement>>)) {
			this.ThrowIfDefault();
			var newGreenNode = this.greenNode.With(
				condition: condition,
				label: label,
				children: children.IsDefined ? (System.Collections.Immutable.ImmutableList<ProjectElement>)((ImmutableObjectGraph.Adapters.IImmutableCollectionAdapter<ProjectElement>)children.Value).UnderlyingCollection : default(ImmutableObjectGraph.Optional<System.Collections.Immutable.ImmutableList<ProjectElement>>));
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public System.Collections.Generic.IReadOnlyList<ProjectElement.DiffGram> ChangesSince(RootedUsingTaskParameterGroupElement priorVersion) {
			this.ThrowIfDefault();
			return this.greenNode.ChangesSince(priorVersion.UsingTaskParameterGroupElement);
		}
		
		public RootedProjectRootElement ToProjectRootElement(
			ImmutableObjectGraph.Optional<System.String> fullPath = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Text.Encoding> encoding = default(ImmutableObjectGraph.Optional<System.Text.Encoding>),
			ImmutableObjectGraph.Optional<System.String> toolsVersion = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> defaultTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> initialTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.Boolean> treatAsLocalProperty = default(ImmutableObjectGraph.Optional<System.Boolean>)) {
			var newGreenNode = this.greenNode.ToProjectRootElement(
					fullPath: fullPath,
					encoding: encoding,
					toolsVersion: toolsVersion,
					defaultTargets: defaultTargets,
					initialTargets: initialTargets,
					treatAsLocalProperty: treatAsLocalProperty);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyGroupElement ToProjectPropertyGroupElement() {
			var newGreenNode = this.greenNode.ToProjectPropertyGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemGroupElement ToProjectItemGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectChooseElement ToProjectChooseElement() {
			var newGreenNode = this.greenNode.ToProjectChooseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOtherwiseElement ToProjectOtherwiseElement() {
			var newGreenNode = this.greenNode.ToProjectOtherwiseElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectWhenElement ToProjectWhenElement() {
			var newGreenNode = this.greenNode.ToProjectWhenElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectPropertyElement ToProjectPropertyElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectPropertyElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemElement ToProjectItemElement(
			ImmutableObjectGraph.Optional<System.String> exclude = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> include = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicates = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepMetadata = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> remove = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> removeMetadata = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemElement(
					exclude: exclude,
					include: include,
					itemType: itemType,
					keepDuplicates: keepDuplicates,
					keepMetadata: keepMetadata,
					remove: remove,
					removeMetadata: removeMetadata);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectMetadataElement ToProjectMetadataElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> value = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectMetadataElement(
					name: name,
					value: value);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectExtensionsElement ToProjectExtensionsElement(
			ImmutableObjectGraph.Optional<System.String> content = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectExtensionsElement(
					content: content);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportElement ToProjectImportElement(
			ImmutableObjectGraph.Optional<System.String> project = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectImportElement(
					project: project);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectImportGroupElement ToProjectImportGroupElement() {
			var newGreenNode = this.greenNode.ToProjectImportGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionElement ToProjectItemDefinitionElement(
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionElement(
					itemType: itemType);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectItemDefinitionGroupElement ToProjectItemDefinitionGroupElement() {
			var newGreenNode = this.greenNode.ToProjectItemDefinitionGroupElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOnErrorElement ToProjectOnErrorElement() {
			var newGreenNode = this.greenNode.ToProjectOnErrorElement();
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectOutputElement ToProjectOutputElement(
			ImmutableObjectGraph.Optional<System.Boolean> isOutputItem = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.Boolean> isOutputProperty = default(ImmutableObjectGraph.Optional<System.Boolean>),
			ImmutableObjectGraph.Optional<System.String> itemType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> propertyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskParameter = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectOutputElement(
					isOutputItem: isOutputItem,
					isOutputProperty: isOutputProperty,
					itemType: itemType,
					propertyName: propertyName,
					taskParameter: taskParameter);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTargetElement ToProjectTargetElement(
			ImmutableObjectGraph.Optional<System.String> afterTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> beforeTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> dependsOnTargets = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> inputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> keepDuplicateOutputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> outputs = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> returns = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTargetElement(
					afterTargets: afterTargets,
					beforeTargets: beforeTargets,
					dependsOnTargets: dependsOnTargets,
					inputs: inputs,
					keepDuplicateOutputs: keepDuplicateOutputs,
					name: name,
					outputs: outputs,
					returns: returns);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectTaskElement ToProjectTaskElement(
			ImmutableObjectGraph.Optional<System.String> continueOnError = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildArchitecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> mSBuildRuntime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectTaskElement(
					continueOnError: continueOnError,
					mSBuildArchitecture: mSBuildArchitecture,
					mSBuildRuntime: mSBuildRuntime,
					name: name);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskBodyElement ToProjectUsingTaskBodyElement(
			ImmutableObjectGraph.Optional<System.String> evaluate = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskBody = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskBodyElement(
					evaluate: evaluate,
					taskBody: taskBody);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskElement ToProjectUsingTaskElement(
			ImmutableObjectGraph.Optional<System.String> architecture = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyFile = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> assemblyName = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> runtime = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskFactory = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> taskName = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskElement(
					architecture: architecture,
					assemblyFile: assemblyFile,
					assemblyName: assemblyName,
					runtime: runtime,
					taskFactory: taskFactory,
					taskName: taskName);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
		
		public RootedProjectUsingTaskParameterElement ToProjectUsingTaskParameterElement(
			ImmutableObjectGraph.Optional<System.String> name = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> output = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> parameterType = default(ImmutableObjectGraph.Optional<System.String>),
			ImmutableObjectGraph.Optional<System.String> required = default(ImmutableObjectGraph.Optional<System.String>)) {
			var newGreenNode = this.greenNode.ToProjectUsingTaskParameterElement(
					name: name,
					output: output,
					parameterType: parameterType,
					required: required);
			var newRoot = this.root.ReplaceDescendent(this.greenNode, newGreenNode);
			return newGreenNode.WithRoot(newRoot);
		}
	
		public override bool Equals(object obj) {
			if (obj is RootedUsingTaskParameterGroupElement) {
				var other = (RootedUsingTaskParameterGroupElement)obj;
				return this.Equals(other);
			}
	
			return false;
		}
	
		public bool Equals(RootedUsingTaskParameterGroupElement other) {
			return this.greenNode == other.greenNode && this.root == other.root;
		}
	
		public override int GetHashCode() {
			return this.greenNode == null ? 0 : this.greenNode.GetHashCode();
		}
	
		private RootedUsingTaskParameterGroupElement NewSpine(UsingTaskParameterGroupElement leaf) {
			var newRoot = this.root.ReplaceDescendent(this.greenNode, leaf);
			return leaf.WithRoot(newRoot);
		}
	
		/// <summary>Gets a value indicating whether this struct has not been initialized to represent an object.</summary>
		public bool IsDefault {
			get { return this.greenNode == null; }
		}
	
		/// <summary>Throws an exception if this struct does not have a backing UsingTaskParameterGroupElement.</summary>
		private void ThrowIfDefault() {
			if (this.greenNode == null) {
				throw new System.InvalidOperationException();
			}
		}
	
		System.Collections.Generic.IEnumerable<IRecursiveType> IRecursiveParent.Children {
			get {
				this.ThrowIfDefault();
				return this.greenNode.Children;
			}
		}
	
		ParentedRecursiveType<IRecursiveParent, IRecursiveType> IRecursiveParent.GetParentedNode(int identity) {
			this.ThrowIfDefault();
			var result = this.greenNode.GetParentedNode(identity);
			return new ParentedRecursiveType<IRecursiveParent, IRecursiveType>(result.Value, result.Parent);
		}
	}
}


